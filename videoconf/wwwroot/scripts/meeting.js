(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController
// We don't actually ever use the API being polyfilled, we always use the polyfill because
// it's a very new API right now.
// Not exported from index.
/** @private */
var AbortController = /** @class */ (function () {
    function AbortController() {
        this.isAborted = false;
        this.onabort = null;
    }
    AbortController.prototype.abort = function () {
        if (!this.isAborted) {
            this.isAborted = true;
            if (this.onabort) {
                this.onabort();
            }
        }
    };
    Object.defineProperty(AbortController.prototype, "signal", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortController.prototype, "aborted", {
        get: function () {
            return this.isAborted;
        },
        enumerable: true,
        configurable: true
    });
    return AbortController;
}());
exports.AbortController = AbortController;
//# sourceMappingURL=AbortController.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\AbortController.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Errors_1 = require("./Errors");
var FetchHttpClient_1 = require("./FetchHttpClient");
var HttpClient_1 = require("./HttpClient");
var Utils_1 = require("./Utils");
var XhrHttpClient_1 = require("./XhrHttpClient");
/** Default implementation of {@link @microsoft/signalr.HttpClient}. */
var DefaultHttpClient = /** @class */ (function (_super) {
    __extends(DefaultHttpClient, _super);
    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */
    function DefaultHttpClient(logger) {
        var _this = _super.call(this) || this;
        if (typeof fetch !== "undefined" || Utils_1.Platform.isNode) {
            _this.httpClient = new FetchHttpClient_1.FetchHttpClient(logger);
        }
        else if (typeof XMLHttpRequest !== "undefined") {
            _this.httpClient = new XhrHttpClient_1.XhrHttpClient(logger);
        }
        else {
            throw new Error("No usable HttpClient found.");
        }
        return _this;
    }
    /** @inheritDoc */
    DefaultHttpClient.prototype.send = function (request) {
        // Check that abort was not signaled before calling send
        if (request.abortSignal && request.abortSignal.aborted) {
            return Promise.reject(new Errors_1.AbortError());
        }
        if (!request.method) {
            return Promise.reject(new Error("No method defined."));
        }
        if (!request.url) {
            return Promise.reject(new Error("No url defined."));
        }
        return this.httpClient.send(request);
    };
    DefaultHttpClient.prototype.getCookieString = function (url) {
        return this.httpClient.getCookieString(url);
    };
    return DefaultHttpClient;
}(HttpClient_1.HttpClient));
exports.DefaultHttpClient = DefaultHttpClient;
//# sourceMappingURL=DefaultHttpClient.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\DefaultHttpClient.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./Errors":4,"./FetchHttpClient":5,"./HttpClient":7,"./Utils":20,"./XhrHttpClient":22,"buffer":25,"e/U+97":27}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// 0, 2, 10, 30 second delays before reconnect attempts.
var DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];
/** @private */
var DefaultReconnectPolicy = /** @class */ (function () {
    function DefaultReconnectPolicy(retryDelays) {
        this.retryDelays = retryDelays !== undefined ? retryDelays.concat([null]) : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;
    }
    DefaultReconnectPolicy.prototype.nextRetryDelayInMilliseconds = function (retryContext) {
        return this.retryDelays[retryContext.previousRetryCount];
    };
    return DefaultReconnectPolicy;
}());
exports.DefaultReconnectPolicy = DefaultReconnectPolicy;
//# sourceMappingURL=DefaultReconnectPolicy.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\DefaultReconnectPolicy.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/** Error thrown when an HTTP request fails. */
var HttpError = /** @class */ (function (_super) {
    __extends(HttpError, _super);
    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.
     *
     * @param {string} errorMessage A descriptive error message.
     * @param {number} statusCode The HTTP status code represented by this error.
     */
    function HttpError(errorMessage, statusCode) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, errorMessage) || this;
        _this.statusCode = statusCode;
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this.__proto__ = trueProto;
        return _this;
    }
    return HttpError;
}(Error));
exports.HttpError = HttpError;
/** Error thrown when a timeout elapses. */
var TimeoutError = /** @class */ (function (_super) {
    __extends(TimeoutError, _super);
    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.
     *
     * @param {string} errorMessage A descriptive error message.
     */
    function TimeoutError(errorMessage) {
        var _newTarget = this.constructor;
        if (errorMessage === void 0) { errorMessage = "A timeout occurred."; }
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, errorMessage) || this;
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this.__proto__ = trueProto;
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
/** Error thrown when an action is aborted. */
var AbortError = /** @class */ (function (_super) {
    __extends(AbortError, _super);
    /** Constructs a new instance of {@link AbortError}.
     *
     * @param {string} errorMessage A descriptive error message.
     */
    function AbortError(errorMessage) {
        var _newTarget = this.constructor;
        if (errorMessage === void 0) { errorMessage = "An abort occurred."; }
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, errorMessage) || this;
        // Workaround issue in Typescript compiler
        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200
        _this.__proto__ = trueProto;
        return _this;
    }
    return AbortError;
}(Error));
exports.AbortError = AbortError;
//# sourceMappingURL=Errors.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\Errors.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Errors_1 = require("./Errors");
var HttpClient_1 = require("./HttpClient");
var ILogger_1 = require("./ILogger");
var Utils_1 = require("./Utils");
var FetchHttpClient = /** @class */ (function (_super) {
    __extends(FetchHttpClient, _super);
    function FetchHttpClient(logger) {
        var _this = _super.call(this) || this;
        _this.logger = logger;
        if (typeof fetch === "undefined") {
            // In order to ignore the dynamic require in webpack builds we need to do this magic
            // @ts-ignore: TS doesn't know about these names
            var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests
            _this.jar = new (requireFunc("tough-cookie")).CookieJar();
            _this.fetchType = requireFunc("node-fetch");
            // node-fetch doesn't have a nice API for getting and setting cookies
            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one
            _this.fetchType = requireFunc("fetch-cookie")(_this.fetchType, _this.jar);
            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide
            _this.abortControllerType = requireFunc("abort-controller");
        }
        else {
            _this.fetchType = fetch.bind(self);
            _this.abortControllerType = AbortController;
        }
        return _this;
    }
    /** @inheritDoc */
    FetchHttpClient.prototype.send = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var abortController, error, timeoutId, msTimeout, response, e_1, content, payload;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Check that abort was not signaled before calling send
                        if (request.abortSignal && request.abortSignal.aborted) {
                            throw new Errors_1.AbortError();
                        }
                        if (!request.method) {
                            throw new Error("No method defined.");
                        }
                        if (!request.url) {
                            throw new Error("No url defined.");
                        }
                        abortController = new this.abortControllerType();
                        // Hook our abortSignal into the abort controller
                        if (request.abortSignal) {
                            request.abortSignal.onabort = function () {
                                abortController.abort();
                                error = new Errors_1.AbortError();
                            };
                        }
                        timeoutId = null;
                        if (request.timeout) {
                            msTimeout = request.timeout;
                            timeoutId = setTimeout(function () {
                                abortController.abort();
                                _this.logger.log(ILogger_1.LogLevel.Warning, "Timeout from HTTP request.");
                                error = new Errors_1.TimeoutError();
                            }, msTimeout);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.fetchType(request.url, {
                                body: request.content,
                                cache: "no-cache",
                                credentials: request.withCredentials === true ? "include" : "same-origin",
                                headers: __assign({ "Content-Type": "text/plain;charset=UTF-8", "X-Requested-With": "XMLHttpRequest" }, request.headers),
                                method: request.method,
                                mode: "cors",
                                redirect: "manual",
                                signal: abortController.signal,
                            })];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        if (error) {
                            throw error;
                        }
                        this.logger.log(ILogger_1.LogLevel.Warning, "Error from HTTP request. " + e_1 + ".");
                        throw e_1;
                    case 4:
                        if (timeoutId) {
                            clearTimeout(timeoutId);
                        }
                        if (request.abortSignal) {
                            request.abortSignal.onabort = null;
                        }
                        return [7 /*endfinally*/];
                    case 5:
                        if (!response.ok) {
                            throw new Errors_1.HttpError(response.statusText, response.status);
                        }
                        content = deserializeContent(response, request.responseType);
                        return [4 /*yield*/, content];
                    case 6:
                        payload = _a.sent();
                        return [2 /*return*/, new HttpClient_1.HttpResponse(response.status, response.statusText, payload)];
                }
            });
        });
    };
    FetchHttpClient.prototype.getCookieString = function (url) {
        var cookies = "";
        if (Utils_1.Platform.isNode && this.jar) {
            // @ts-ignore: unused variable
            this.jar.getCookies(url, function (e, c) { return cookies = c.join("; "); });
        }
        return cookies;
    };
    return FetchHttpClient;
}(HttpClient_1.HttpClient));
exports.FetchHttpClient = FetchHttpClient;
function deserializeContent(response, responseType) {
    var content;
    switch (responseType) {
        case "arraybuffer":
            content = response.arrayBuffer();
            break;
        case "text":
            content = response.text();
            break;
        case "blob":
        case "document":
        case "json":
            throw new Error(responseType + " is not supported.");
        default:
            content = response.text();
            break;
    }
    return content;
}
//# sourceMappingURL=FetchHttpClient.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\FetchHttpClient.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./Errors":4,"./HttpClient":7,"./ILogger":12,"./Utils":20,"buffer":25,"e/U+97":27}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var TextMessageFormat_1 = require("./TextMessageFormat");
var Utils_1 = require("./Utils");
/** @private */
var HandshakeProtocol = /** @class */ (function () {
    function HandshakeProtocol() {
    }
    // Handshake request is always JSON
    HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {
        return TextMessageFormat_1.TextMessageFormat.write(JSON.stringify(handshakeRequest));
    };
    HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {
        var responseMessage;
        var messageData;
        var remainingData;
        if (Utils_1.isArrayBuffer(data) || (typeof Buffer !== "undefined" && data instanceof Buffer)) {
            // Format is binary but still need to read JSON text from handshake response
            var binaryData = new Uint8Array(data);
            var separatorIndex = binaryData.indexOf(TextMessageFormat_1.TextMessageFormat.RecordSeparatorCode);
            if (separatorIndex === -1) {
                throw new Error("Message is incomplete.");
            }
            // content before separator is handshake response
            // optional content after is additional messages
            var responseLength = separatorIndex + 1;
            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));
            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;
        }
        else {
            var textData = data;
            var separatorIndex = textData.indexOf(TextMessageFormat_1.TextMessageFormat.RecordSeparator);
            if (separatorIndex === -1) {
                throw new Error("Message is incomplete.");
            }
            // content before separator is handshake response
            // optional content after is additional messages
            var responseLength = separatorIndex + 1;
            messageData = textData.substring(0, responseLength);
            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;
        }
        // At this point we should have just the single handshake message
        var messages = TextMessageFormat_1.TextMessageFormat.parse(messageData);
        var response = JSON.parse(messages[0]);
        if (response.type) {
            throw new Error("Expected a handshake response from the server.");
        }
        responseMessage = response;
        // multiple messages could have arrived with handshake
        // return additional data to be parsed as usual, or null if all parsed
        return [remainingData, responseMessage];
    };
    return HandshakeProtocol;
}());
exports.HandshakeProtocol = HandshakeProtocol;
//# sourceMappingURL=HandshakeProtocol.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\HandshakeProtocol.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./TextMessageFormat":19,"./Utils":20,"buffer":25,"e/U+97":27}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Represents an HTTP response. */
var HttpResponse = /** @class */ (function () {
    function HttpResponse(statusCode, statusText, content) {
        this.statusCode = statusCode;
        this.statusText = statusText;
        this.content = content;
    }
    return HttpResponse;
}());
exports.HttpResponse = HttpResponse;
/** Abstraction over an HTTP client.
 *
 * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.
 */
var HttpClient = /** @class */ (function () {
    function HttpClient() {
    }
    HttpClient.prototype.get = function (url, options) {
        return this.send(__assign({}, options, { method: "GET", url: url }));
    };
    HttpClient.prototype.post = function (url, options) {
        return this.send(__assign({}, options, { method: "POST", url: url }));
    };
    HttpClient.prototype.delete = function (url, options) {
        return this.send(__assign({}, options, { method: "DELETE", url: url }));
    };
    /** Gets all cookies that apply to the specified URL.
     *
     * @param url The URL that the cookies are valid for.
     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.
     */
    // @ts-ignore
    HttpClient.prototype.getCookieString = function (url) {
        return "";
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
//# sourceMappingURL=HttpClient.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\HttpClient.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DefaultHttpClient_1 = require("./DefaultHttpClient");
var ILogger_1 = require("./ILogger");
var ITransport_1 = require("./ITransport");
var LongPollingTransport_1 = require("./LongPollingTransport");
var ServerSentEventsTransport_1 = require("./ServerSentEventsTransport");
var Utils_1 = require("./Utils");
var WebSocketTransport_1 = require("./WebSocketTransport");
var MAX_REDIRECTS = 100;
/** @private */
var HttpConnection = /** @class */ (function () {
    function HttpConnection(url, options) {
        if (options === void 0) { options = {}; }
        this.features = {};
        this.negotiateVersion = 1;
        Utils_1.Arg.isRequired(url, "url");
        this.logger = Utils_1.createLogger(options.logger);
        this.baseUrl = this.resolveUrl(url);
        options = options || {};
        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;
        if (typeof options.withCredentials === "boolean" || options.withCredentials === undefined) {
            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;
        }
        else {
            throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");
        }
        var webSocketModule = null;
        var eventSourceModule = null;
        if (Utils_1.Platform.isNode && typeof require !== "undefined") {
            // In order to ignore the dynamic require in webpack builds we need to do this magic
            // @ts-ignore: TS doesn't know about these names
            var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
            webSocketModule = requireFunc("ws");
            eventSourceModule = requireFunc("eventsource");
        }
        if (!Utils_1.Platform.isNode && typeof WebSocket !== "undefined" && !options.WebSocket) {
            options.WebSocket = WebSocket;
        }
        else if (Utils_1.Platform.isNode && !options.WebSocket) {
            if (webSocketModule) {
                options.WebSocket = webSocketModule;
            }
        }
        if (!Utils_1.Platform.isNode && typeof EventSource !== "undefined" && !options.EventSource) {
            options.EventSource = EventSource;
        }
        else if (Utils_1.Platform.isNode && !options.EventSource) {
            if (typeof eventSourceModule !== "undefined") {
                options.EventSource = eventSourceModule;
            }
        }
        this.httpClient = options.httpClient || new DefaultHttpClient_1.DefaultHttpClient(this.logger);
        this.connectionState = "Disconnected" /* Disconnected */;
        this.connectionStarted = false;
        this.options = options;
        this.onreceive = null;
        this.onclose = null;
    }
    HttpConnection.prototype.start = function (transferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var message, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transferFormat = transferFormat || ITransport_1.TransferFormat.Binary;
                        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, "transferFormat");
                        this.logger.log(ILogger_1.LogLevel.Debug, "Starting connection with transfer format '" + ITransport_1.TransferFormat[transferFormat] + "'.");
                        if (this.connectionState !== "Disconnected" /* Disconnected */) {
                            return [2 /*return*/, Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))];
                        }
                        this.connectionState = "Connecting" /* Connecting */;
                        this.startInternalPromise = this.startInternal(transferFormat);
                        return [4 /*yield*/, this.startInternalPromise];
                    case 1:
                        _a.sent();
                        if (!(this.connectionState === "Disconnecting" /* Disconnecting */)) return [3 /*break*/, 3];
                        message = "Failed to start the HttpConnection before stop() was called.";
                        this.logger.log(ILogger_1.LogLevel.Error, message);
                        // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.
                        return [4 /*yield*/, this.stopPromise];
                    case 2:
                        // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.
                        _a.sent();
                        return [2 /*return*/, Promise.reject(new Error(message))];
                    case 3:
                        if (this.connectionState !== "Connected" /* Connected */) {
                            message = "HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";
                            this.logger.log(ILogger_1.LogLevel.Error, message);
                            return [2 /*return*/, Promise.reject(new Error(message))];
                        }
                        _a.label = 4;
                    case 4:
                        this.connectionStarted = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpConnection.prototype.send = function (data) {
        if (this.connectionState !== "Connected" /* Connected */) {
            return Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State."));
        }
        if (!this.sendQueue) {
            this.sendQueue = new TransportSendQueue(this.transport);
        }
        // Transport will not be null if state is connected
        return this.sendQueue.send(data);
    };
    HttpConnection.prototype.stop = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.connectionState === "Disconnected" /* Disconnected */) {
                            this.logger.log(ILogger_1.LogLevel.Debug, "Call to HttpConnection.stop(" + error + ") ignored because the connection is already in the disconnected state.");
                            return [2 /*return*/, Promise.resolve()];
                        }
                        if (this.connectionState === "Disconnecting" /* Disconnecting */) {
                            this.logger.log(ILogger_1.LogLevel.Debug, "Call to HttpConnection.stop(" + error + ") ignored because the connection is already in the disconnecting state.");
                            return [2 /*return*/, this.stopPromise];
                        }
                        this.connectionState = "Disconnecting" /* Disconnecting */;
                        this.stopPromise = new Promise(function (resolve) {
                            // Don't complete stop() until stopConnection() completes.
                            _this.stopPromiseResolver = resolve;
                        });
                        // stopInternal should never throw so just observe it.
                        return [4 /*yield*/, this.stopInternal(error)];
                    case 1:
                        // stopInternal should never throw so just observe it.
                        _a.sent();
                        return [4 /*yield*/, this.stopPromise];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpConnection.prototype.stopInternal = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Set error as soon as possible otherwise there is a race between
                        // the transport closing and providing an error and the error from a close message
                        // We would prefer the close message error.
                        this.stopError = error;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.startInternalPromise];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        if (!this.transport) return [3 /*break*/, 9];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.transport.stop()];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_2 = _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Error, "HttpConnection.transport.stop() threw error '" + e_2 + "'.");
                        this.stopConnection();
                        return [3 /*break*/, 8];
                    case 8:
                        this.transport = undefined;
                        return [3 /*break*/, 10];
                    case 9:
                        this.logger.log(ILogger_1.LogLevel.Debug, "HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.");
                        this.stopConnection();
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    HttpConnection.prototype.startInternal = function (transferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var url, negotiateResponse, redirects, _loop_1, this_1, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.baseUrl;
                        this.accessTokenFactory = this.options.accessTokenFactory;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 12, , 13]);
                        if (!this.options.skipNegotiation) return [3 /*break*/, 5];
                        if (!(this.options.transport === ITransport_1.HttpTransportType.WebSockets)) return [3 /*break*/, 3];
                        // No need to add a connection ID in this case
                        this.transport = this.constructTransport(ITransport_1.HttpTransportType.WebSockets);
                        // We should just call connect directly in this case.
                        // No fallback or negotiate in this case.
                        return [4 /*yield*/, this.startTransport(url, transferFormat)];
                    case 2:
                        // We should just call connect directly in this case.
                        // No fallback or negotiate in this case.
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3: throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");
                    case 4: return [3 /*break*/, 11];
                    case 5:
                        negotiateResponse = null;
                        redirects = 0;
                        _loop_1 = function () {
                            var accessToken_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this_1.getNegotiationResponse(url)];
                                    case 1:
                                        negotiateResponse = _a.sent();
                                        // the user tries to stop the connection when it is being started
                                        if (this_1.connectionState === "Disconnecting" /* Disconnecting */ || this_1.connectionState === "Disconnected" /* Disconnected */) {
                                            throw new Error("The connection was stopped during negotiation.");
                                        }
                                        if (negotiateResponse.error) {
                                            throw new Error(negotiateResponse.error);
                                        }
                                        if (negotiateResponse.ProtocolVersion) {
                                            throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");
                                        }
                                        if (negotiateResponse.url) {
                                            url = negotiateResponse.url;
                                        }
                                        if (negotiateResponse.accessToken) {
                                            accessToken_1 = negotiateResponse.accessToken;
                                            this_1.accessTokenFactory = function () { return accessToken_1; };
                                        }
                                        redirects++;
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 6;
                    case 6: return [5 /*yield**/, _loop_1()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        if (negotiateResponse.url && redirects < MAX_REDIRECTS) return [3 /*break*/, 6];
                        _a.label = 9;
                    case 9:
                        if (redirects === MAX_REDIRECTS && negotiateResponse.url) {
                            throw new Error("Negotiate redirection limit exceeded.");
                        }
                        return [4 /*yield*/, this.createTransport(url, this.options.transport, negotiateResponse, transferFormat)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        if (this.transport instanceof LongPollingTransport_1.LongPollingTransport) {
                            this.features.inherentKeepAlive = true;
                        }
                        if (this.connectionState === "Connecting" /* Connecting */) {
                            // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.
                            // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.
                            this.logger.log(ILogger_1.LogLevel.Debug, "The HttpConnection connected successfully.");
                            this.connectionState = "Connected" /* Connected */;
                        }
                        return [3 /*break*/, 13];
                    case 12:
                        e_3 = _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Error, "Failed to start the connection: " + e_3);
                        this.connectionState = "Disconnected" /* Disconnected */;
                        this.transport = undefined;
                        return [2 /*return*/, Promise.reject(e_3)];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    HttpConnection.prototype.getNegotiationResponse = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, token, _a, name, value, negotiateUrl, response, negotiateResponse, e_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        headers = {};
                        if (!this.accessTokenFactory) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.accessTokenFactory()];
                    case 1:
                        token = _b.sent();
                        if (token) {
                            headers["Authorization"] = "Bearer " + token;
                        }
                        _b.label = 2;
                    case 2:
                        _a = Utils_1.getUserAgentHeader(), name = _a[0], value = _a[1];
                        headers[name] = value;
                        negotiateUrl = this.resolveNegotiateUrl(url);
                        this.logger.log(ILogger_1.LogLevel.Debug, "Sending negotiation request: " + negotiateUrl + ".");
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.httpClient.post(negotiateUrl, {
                                content: "",
                                headers: __assign({}, headers, this.options.headers),
                                withCredentials: this.options.withCredentials,
                            })];
                    case 4:
                        response = _b.sent();
                        if (response.statusCode !== 200) {
                            return [2 /*return*/, Promise.reject(new Error("Unexpected status code returned from negotiate '" + response.statusCode + "'"))];
                        }
                        negotiateResponse = JSON.parse(response.content);
                        if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {
                            // Negotiate version 0 doesn't use connectionToken
                            // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version
                            negotiateResponse.connectionToken = negotiateResponse.connectionId;
                        }
                        return [2 /*return*/, negotiateResponse];
                    case 5:
                        e_4 = _b.sent();
                        this.logger.log(ILogger_1.LogLevel.Error, "Failed to complete negotiation with the server: " + e_4);
                        return [2 /*return*/, Promise.reject(e_4)];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    HttpConnection.prototype.createConnectUrl = function (url, connectionToken) {
        if (!connectionToken) {
            return url;
        }
        return url + (url.indexOf("?") === -1 ? "?" : "&") + ("id=" + connectionToken);
    };
    HttpConnection.prototype.createTransport = function (url, requestedTransport, negotiateResponse, requestedTransferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var connectUrl, transportExceptions, transports, negotiate, _i, transports_1, endpoint, transportOrError, ex_1, ex_2, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);
                        if (!this.isITransport(requestedTransport)) return [3 /*break*/, 2];
                        this.logger.log(ILogger_1.LogLevel.Debug, "Connection was provided an instance of ITransport, using that directly.");
                        this.transport = requestedTransport;
                        return [4 /*yield*/, this.startTransport(connectUrl, requestedTransferFormat)];
                    case 1:
                        _a.sent();
                        this.connectionId = negotiateResponse.connectionId;
                        return [2 /*return*/];
                    case 2:
                        transportExceptions = [];
                        transports = negotiateResponse.availableTransports || [];
                        negotiate = negotiateResponse;
                        _i = 0, transports_1 = transports;
                        _a.label = 3;
                    case 3:
                        if (!(_i < transports_1.length)) return [3 /*break*/, 13];
                        endpoint = transports_1[_i];
                        transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);
                        if (!(transportOrError instanceof Error)) return [3 /*break*/, 4];
                        // Store the error and continue, we don't want to cause a re-negotiate in these cases
                        transportExceptions.push(endpoint.transport + " failed: " + transportOrError);
                        return [3 /*break*/, 12];
                    case 4:
                        if (!this.isITransport(transportOrError)) return [3 /*break*/, 12];
                        this.transport = transportOrError;
                        if (!!negotiate) return [3 /*break*/, 9];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.getNegotiationResponse(url)];
                    case 6:
                        negotiate = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        ex_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(ex_1)];
                    case 8:
                        connectUrl = this.createConnectUrl(url, negotiate.connectionToken);
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, this.startTransport(connectUrl, requestedTransferFormat)];
                    case 10:
                        _a.sent();
                        this.connectionId = negotiate.connectionId;
                        return [2 /*return*/];
                    case 11:
                        ex_2 = _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Error, "Failed to start the transport '" + endpoint.transport + "': " + ex_2);
                        negotiate = undefined;
                        transportExceptions.push(endpoint.transport + " failed: " + ex_2);
                        if (this.connectionState !== "Connecting" /* Connecting */) {
                            message = "Failed to select transport before stop() was called.";
                            this.logger.log(ILogger_1.LogLevel.Debug, message);
                            return [2 /*return*/, Promise.reject(new Error(message))];
                        }
                        return [3 /*break*/, 12];
                    case 12:
                        _i++;
                        return [3 /*break*/, 3];
                    case 13:
                        if (transportExceptions.length > 0) {
                            return [2 /*return*/, Promise.reject(new Error("Unable to connect to the server with any of the available transports. " + transportExceptions.join(" ")))];
                        }
                        return [2 /*return*/, Promise.reject(new Error("None of the transports supported by the client are supported by the server."))];
                }
            });
        });
    };
    HttpConnection.prototype.constructTransport = function (transport) {
        switch (transport) {
            case ITransport_1.HttpTransportType.WebSockets:
                if (!this.options.WebSocket) {
                    throw new Error("'WebSocket' is not supported in your environment.");
                }
                return new WebSocketTransport_1.WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket, this.options.headers || {});
            case ITransport_1.HttpTransportType.ServerSentEvents:
                if (!this.options.EventSource) {
                    throw new Error("'EventSource' is not supported in your environment.");
                }
                return new ServerSentEventsTransport_1.ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource, this.options.withCredentials, this.options.headers || {});
            case ITransport_1.HttpTransportType.LongPolling:
                return new LongPollingTransport_1.LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.withCredentials, this.options.headers || {});
            default:
                throw new Error("Unknown transport: " + transport + ".");
        }
    };
    HttpConnection.prototype.startTransport = function (url, transferFormat) {
        var _this = this;
        this.transport.onreceive = this.onreceive;
        this.transport.onclose = function (e) { return _this.stopConnection(e); };
        return this.transport.connect(url, transferFormat);
    };
    HttpConnection.prototype.resolveTransportOrError = function (endpoint, requestedTransport, requestedTransferFormat) {
        var transport = ITransport_1.HttpTransportType[endpoint.transport];
        if (transport === null || transport === undefined) {
            this.logger.log(ILogger_1.LogLevel.Debug, "Skipping transport '" + endpoint.transport + "' because it is not supported by this client.");
            return new Error("Skipping transport '" + endpoint.transport + "' because it is not supported by this client.");
        }
        else {
            if (transportMatches(requestedTransport, transport)) {
                var transferFormats = endpoint.transferFormats.map(function (s) { return ITransport_1.TransferFormat[s]; });
                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {
                    if ((transport === ITransport_1.HttpTransportType.WebSockets && !this.options.WebSocket) ||
                        (transport === ITransport_1.HttpTransportType.ServerSentEvents && !this.options.EventSource)) {
                        this.logger.log(ILogger_1.LogLevel.Debug, "Skipping transport '" + ITransport_1.HttpTransportType[transport] + "' because it is not supported in your environment.'");
                        return new Error("'" + ITransport_1.HttpTransportType[transport] + "' is not supported in your environment.");
                    }
                    else {
                        this.logger.log(ILogger_1.LogLevel.Debug, "Selecting transport '" + ITransport_1.HttpTransportType[transport] + "'.");
                        try {
                            return this.constructTransport(transport);
                        }
                        catch (ex) {
                            return ex;
                        }
                    }
                }
                else {
                    this.logger.log(ILogger_1.LogLevel.Debug, "Skipping transport '" + ITransport_1.HttpTransportType[transport] + "' because it does not support the requested transfer format '" + ITransport_1.TransferFormat[requestedTransferFormat] + "'.");
                    return new Error("'" + ITransport_1.HttpTransportType[transport] + "' does not support " + ITransport_1.TransferFormat[requestedTransferFormat] + ".");
                }
            }
            else {
                this.logger.log(ILogger_1.LogLevel.Debug, "Skipping transport '" + ITransport_1.HttpTransportType[transport] + "' because it was disabled by the client.");
                return new Error("'" + ITransport_1.HttpTransportType[transport] + "' is disabled by the client.");
            }
        }
    };
    HttpConnection.prototype.isITransport = function (transport) {
        return transport && typeof (transport) === "object" && "connect" in transport;
    };
    HttpConnection.prototype.stopConnection = function (error) {
        var _this = this;
        this.logger.log(ILogger_1.LogLevel.Debug, "HttpConnection.stopConnection(" + error + ") called while in state " + this.connectionState + ".");
        this.transport = undefined;
        // If we have a stopError, it takes precedence over the error from the transport
        error = this.stopError || error;
        this.stopError = undefined;
        if (this.connectionState === "Disconnected" /* Disconnected */) {
            this.logger.log(ILogger_1.LogLevel.Debug, "Call to HttpConnection.stopConnection(" + error + ") was ignored because the connection is already in the disconnected state.");
            return;
        }
        if (this.connectionState === "Connecting" /* Connecting */) {
            this.logger.log(ILogger_1.LogLevel.Warning, "Call to HttpConnection.stopConnection(" + error + ") was ignored because the connection is still in the connecting state.");
            throw new Error("HttpConnection.stopConnection(" + error + ") was called while the connection is still in the connecting state.");
        }
        if (this.connectionState === "Disconnecting" /* Disconnecting */) {
            // A call to stop() induced this call to stopConnection and needs to be completed.
            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.
            this.stopPromiseResolver();
        }
        if (error) {
            this.logger.log(ILogger_1.LogLevel.Error, "Connection disconnected with error '" + error + "'.");
        }
        else {
            this.logger.log(ILogger_1.LogLevel.Information, "Connection disconnected.");
        }
        if (this.sendQueue) {
            this.sendQueue.stop().catch(function (e) {
                _this.logger.log(ILogger_1.LogLevel.Error, "TransportSendQueue.stop() threw error '" + e + "'.");
            });
            this.sendQueue = undefined;
        }
        this.connectionId = undefined;
        this.connectionState = "Disconnected" /* Disconnected */;
        if (this.connectionStarted) {
            this.connectionStarted = false;
            try {
                if (this.onclose) {
                    this.onclose(error);
                }
            }
            catch (e) {
                this.logger.log(ILogger_1.LogLevel.Error, "HttpConnection.onclose(" + error + ") threw error '" + e + "'.");
            }
        }
    };
    HttpConnection.prototype.resolveUrl = function (url) {
        // startsWith is not supported in IE
        if (url.lastIndexOf("https://", 0) === 0 || url.lastIndexOf("http://", 0) === 0) {
            return url;
        }
        if (!Utils_1.Platform.isBrowser || !window.document) {
            throw new Error("Cannot resolve '" + url + "'.");
        }
        // Setting the url to the href propery of an anchor tag handles normalization
        // for us. There are 3 main cases.
        // 1. Relative path normalization e.g "b" -> "http://localhost:5000/a/b"
        // 2. Absolute path normalization e.g "/a/b" -> "http://localhost:5000/a/b"
        // 3. Networkpath reference normalization e.g "//localhost:5000/a/b" -> "http://localhost:5000/a/b"
        var aTag = window.document.createElement("a");
        aTag.href = url;
        this.logger.log(ILogger_1.LogLevel.Information, "Normalizing '" + url + "' to '" + aTag.href + "'.");
        return aTag.href;
    };
    HttpConnection.prototype.resolveNegotiateUrl = function (url) {
        var index = url.indexOf("?");
        var negotiateUrl = url.substring(0, index === -1 ? url.length : index);
        if (negotiateUrl[negotiateUrl.length - 1] !== "/") {
            negotiateUrl += "/";
        }
        negotiateUrl += "negotiate";
        negotiateUrl += index === -1 ? "" : url.substring(index);
        if (negotiateUrl.indexOf("negotiateVersion") === -1) {
            negotiateUrl += index === -1 ? "?" : "&";
            negotiateUrl += "negotiateVersion=" + this.negotiateVersion;
        }
        return negotiateUrl;
    };
    return HttpConnection;
}());
exports.HttpConnection = HttpConnection;
function transportMatches(requestedTransport, actualTransport) {
    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);
}
/** @private */
var TransportSendQueue = /** @class */ (function () {
    function TransportSendQueue(transport) {
        this.transport = transport;
        this.buffer = [];
        this.executing = true;
        this.sendBufferedData = new PromiseSource();
        this.transportResult = new PromiseSource();
        this.sendLoopPromise = this.sendLoop();
    }
    TransportSendQueue.prototype.send = function (data) {
        this.bufferData(data);
        if (!this.transportResult) {
            this.transportResult = new PromiseSource();
        }
        return this.transportResult.promise;
    };
    TransportSendQueue.prototype.stop = function () {
        this.executing = false;
        this.sendBufferedData.resolve();
        return this.sendLoopPromise;
    };
    TransportSendQueue.prototype.bufferData = function (data) {
        if (this.buffer.length && typeof (this.buffer[0]) !== typeof (data)) {
            throw new Error("Expected data to be of type " + typeof (this.buffer) + " but was of type " + typeof (data));
        }
        this.buffer.push(data);
        this.sendBufferedData.resolve();
    };
    TransportSendQueue.prototype.sendLoop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transportResult, data, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!true) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.sendBufferedData.promise];
                    case 1:
                        _a.sent();
                        if (!this.executing) {
                            if (this.transportResult) {
                                this.transportResult.reject("Connection stopped.");
                            }
                            return [3 /*break*/, 6];
                        }
                        this.sendBufferedData = new PromiseSource();
                        transportResult = this.transportResult;
                        this.transportResult = undefined;
                        data = typeof (this.buffer[0]) === "string" ?
                            this.buffer.join("") :
                            TransportSendQueue.concatBuffers(this.buffer);
                        this.buffer.length = 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.transport.send(data)];
                    case 3:
                        _a.sent();
                        transportResult.resolve();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        transportResult.reject(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 0];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    TransportSendQueue.concatBuffers = function (arrayBuffers) {
        var totalLength = arrayBuffers.map(function (b) { return b.byteLength; }).reduce(function (a, b) { return a + b; });
        var result = new Uint8Array(totalLength);
        var offset = 0;
        for (var _i = 0, arrayBuffers_1 = arrayBuffers; _i < arrayBuffers_1.length; _i++) {
            var item = arrayBuffers_1[_i];
            result.set(new Uint8Array(item), offset);
            offset += item.byteLength;
        }
        return result.buffer;
    };
    return TransportSendQueue;
}());
exports.TransportSendQueue = TransportSendQueue;
var PromiseSource = /** @class */ (function () {
    function PromiseSource() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            var _a;
            return _a = [resolve, reject], _this.resolver = _a[0], _this.rejecter = _a[1], _a;
        });
    }
    PromiseSource.prototype.resolve = function () {
        this.resolver();
    };
    PromiseSource.prototype.reject = function (reason) {
        this.rejecter(reason);
    };
    return PromiseSource;
}());
//# sourceMappingURL=HttpConnection.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\HttpConnection.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./DefaultHttpClient":2,"./ILogger":12,"./ITransport":13,"./LongPollingTransport":16,"./ServerSentEventsTransport":17,"./Utils":20,"./WebSocketTransport":21,"buffer":25,"e/U+97":27}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var HandshakeProtocol_1 = require("./HandshakeProtocol");
var IHubProtocol_1 = require("./IHubProtocol");
var ILogger_1 = require("./ILogger");
var Subject_1 = require("./Subject");
var Utils_1 = require("./Utils");
var DEFAULT_TIMEOUT_IN_MS = 30 * 1000;
var DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;
/** Describes the current state of the {@link HubConnection} to the server. */
var HubConnectionState;
(function (HubConnectionState) {
    /** The hub connection is disconnected. */
    HubConnectionState["Disconnected"] = "Disconnected";
    /** The hub connection is connecting. */
    HubConnectionState["Connecting"] = "Connecting";
    /** The hub connection is connected. */
    HubConnectionState["Connected"] = "Connected";
    /** The hub connection is disconnecting. */
    HubConnectionState["Disconnecting"] = "Disconnecting";
    /** The hub connection is reconnecting. */
    HubConnectionState["Reconnecting"] = "Reconnecting";
})(HubConnectionState = exports.HubConnectionState || (exports.HubConnectionState = {}));
/** Represents a connection to a SignalR Hub. */
var HubConnection = /** @class */ (function () {
    function HubConnection(connection, logger, protocol, reconnectPolicy) {
        var _this = this;
        Utils_1.Arg.isRequired(connection, "connection");
        Utils_1.Arg.isRequired(logger, "logger");
        Utils_1.Arg.isRequired(protocol, "protocol");
        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;
        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;
        this.logger = logger;
        this.protocol = protocol;
        this.connection = connection;
        this.reconnectPolicy = reconnectPolicy;
        this.handshakeProtocol = new HandshakeProtocol_1.HandshakeProtocol();
        this.connection.onreceive = function (data) { return _this.processIncomingData(data); };
        this.connection.onclose = function (error) { return _this.connectionClosed(error); };
        this.callbacks = {};
        this.methods = {};
        this.closedCallbacks = [];
        this.reconnectingCallbacks = [];
        this.reconnectedCallbacks = [];
        this.invocationId = 0;
        this.receivedHandshakeResponse = false;
        this.connectionState = HubConnectionState.Disconnected;
        this.connectionStarted = false;
        this.cachedPingMessage = this.protocol.writeMessage({ type: IHubProtocol_1.MessageType.Ping });
    }
    /** @internal */
    // Using a public static factory method means we can have a private constructor and an _internal_
    // create method that can be used by HubConnectionBuilder. An "internal" constructor would just
    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a
    // public parameter-less constructor.
    HubConnection.create = function (connection, logger, protocol, reconnectPolicy) {
        return new HubConnection(connection, logger, protocol, reconnectPolicy);
    };
    Object.defineProperty(HubConnection.prototype, "state", {
        /** Indicates the state of the {@link HubConnection} to the server. */
        get: function () {
            return this.connectionState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HubConnection.prototype, "connectionId", {
        /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either
         *  in the disconnected state or if the negotiation step was skipped.
         */
        get: function () {
            return this.connection ? (this.connection.connectionId || null) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HubConnection.prototype, "baseUrl", {
        /** Indicates the url of the {@link HubConnection} to the server. */
        get: function () {
            return this.connection.baseUrl || "";
        },
        /**
         * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or
         * Reconnecting states.
         * @param {string} url The url to connect to.
         */
        set: function (url) {
            if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {
                throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");
            }
            if (!url) {
                throw new Error("The HubConnection url must be a valid url.");
            }
            this.connection.baseUrl = url;
        },
        enumerable: true,
        configurable: true
    });
    /** Starts the connection.
     *
     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.
     */
    HubConnection.prototype.start = function () {
        this.startPromise = this.startWithStateTransitions();
        return this.startPromise;
    };
    HubConnection.prototype.startWithStateTransitions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.connectionState !== HubConnectionState.Disconnected) {
                            return [2 /*return*/, Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))];
                        }
                        this.connectionState = HubConnectionState.Connecting;
                        this.logger.log(ILogger_1.LogLevel.Debug, "Starting HubConnection.");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.startInternal()];
                    case 2:
                        _a.sent();
                        this.connectionState = HubConnectionState.Connected;
                        this.connectionStarted = true;
                        this.logger.log(ILogger_1.LogLevel.Debug, "HubConnection connected successfully.");
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.connectionState = HubConnectionState.Disconnected;
                        this.logger.log(ILogger_1.LogLevel.Debug, "HubConnection failed to start successfully because of error '" + e_1 + "'.");
                        return [2 /*return*/, Promise.reject(e_1)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    HubConnection.prototype.startInternal = function () {
        return __awaiter(this, void 0, void 0, function () {
            var handshakePromise, handshakeRequest, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stopDuringStartError = undefined;
                        this.receivedHandshakeResponse = false;
                        handshakePromise = new Promise(function (resolve, reject) {
                            _this.handshakeResolver = resolve;
                            _this.handshakeRejecter = reject;
                        });
                        return [4 /*yield*/, this.connection.start(this.protocol.transferFormat)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 7]);
                        handshakeRequest = {
                            protocol: this.protocol.name,
                            version: this.protocol.version,
                        };
                        this.logger.log(ILogger_1.LogLevel.Debug, "Sending handshake request.");
                        return [4 /*yield*/, this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];
                    case 3:
                        _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Information, "Using HubProtocol '" + this.protocol.name + "'.");
                        // defensively cleanup timeout in case we receive a message from the server before we finish start
                        this.cleanupTimeout();
                        this.resetTimeoutPeriod();
                        this.resetKeepAliveInterval();
                        return [4 /*yield*/, handshakePromise];
                    case 4:
                        _a.sent();
                        // It's important to check the stopDuringStartError instead of just relying on the handshakePromise
                        // being rejected on close, because this continuation can run after both the handshake completed successfully
                        // and the connection was closed.
                        if (this.stopDuringStartError) {
                            // It's important to throw instead of returning a rejected promise, because we don't want to allow any state
                            // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise
                            // will cause the calling continuation to get scheduled to run later.
                            throw this.stopDuringStartError;
                        }
                        return [3 /*break*/, 7];
                    case 5:
                        e_2 = _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Debug, "Hub handshake failed with error '" + e_2 + "' during start(). Stopping HubConnection.");
                        this.cleanupTimeout();
                        this.cleanupPingTimer();
                        // HttpConnection.stop() should not complete until after the onclose callback is invoked.
                        // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.
                        return [4 /*yield*/, this.connection.stop(e_2)];
                    case 6:
                        // HttpConnection.stop() should not complete until after the onclose callback is invoked.
                        // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.
                        _a.sent();
                        throw e_2;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /** Stops the connection.
     *
     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.
     */
    HubConnection.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var startPromise, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startPromise = this.startPromise;
                        this.stopPromise = this.stopInternal();
                        return [4 /*yield*/, this.stopPromise];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        // Awaiting undefined continues immediately
                        return [4 /*yield*/, startPromise];
                    case 3:
                        // Awaiting undefined continues immediately
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    HubConnection.prototype.stopInternal = function (error) {
        if (this.connectionState === HubConnectionState.Disconnected) {
            this.logger.log(ILogger_1.LogLevel.Debug, "Call to HubConnection.stop(" + error + ") ignored because it is already in the disconnected state.");
            return Promise.resolve();
        }
        if (this.connectionState === HubConnectionState.Disconnecting) {
            this.logger.log(ILogger_1.LogLevel.Debug, "Call to HttpConnection.stop(" + error + ") ignored because the connection is already in the disconnecting state.");
            return this.stopPromise;
        }
        this.connectionState = HubConnectionState.Disconnecting;
        this.logger.log(ILogger_1.LogLevel.Debug, "Stopping HubConnection.");
        if (this.reconnectDelayHandle) {
            // We're in a reconnect delay which means the underlying connection is currently already stopped.
            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and
            // fire the onclose callbacks.
            this.logger.log(ILogger_1.LogLevel.Debug, "Connection stopped during reconnect delay. Done reconnecting.");
            clearTimeout(this.reconnectDelayHandle);
            this.reconnectDelayHandle = undefined;
            this.completeClose();
            return Promise.resolve();
        }
        this.cleanupTimeout();
        this.cleanupPingTimer();
        this.stopDuringStartError = error || new Error("The connection was stopped before the hub handshake could complete.");
        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails
        // or the onclose callback is invoked. The onclose callback will transition the HubConnection
        // to the disconnected state if need be before HttpConnection.stop() completes.
        return this.connection.stop(error);
    };
    /** Invokes a streaming hub method on the server using the specified name and arguments.
     *
     * @typeparam T The type of the items returned by the server.
     * @param {string} methodName The name of the server method to invoke.
     * @param {any[]} args The arguments used to invoke the server method.
     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.
     */
    HubConnection.prototype.stream = function (methodName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.replaceStreamingParams(args), streams = _a[0], streamIds = _a[1];
        var invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);
        var promiseQueue;
        var subject = new Subject_1.Subject();
        subject.cancelCallback = function () {
            var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);
            delete _this.callbacks[invocationDescriptor.invocationId];
            return promiseQueue.then(function () {
                return _this.sendWithProtocol(cancelInvocation);
            });
        };
        this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {
            if (error) {
                subject.error(error);
                return;
            }
            else if (invocationEvent) {
                // invocationEvent will not be null when an error is not passed to the callback
                if (invocationEvent.type === IHubProtocol_1.MessageType.Completion) {
                    if (invocationEvent.error) {
                        subject.error(new Error(invocationEvent.error));
                    }
                    else {
                        subject.complete();
                    }
                }
                else {
                    subject.next((invocationEvent.item));
                }
            }
        };
        promiseQueue = this.sendWithProtocol(invocationDescriptor)
            .catch(function (e) {
            subject.error(e);
            delete _this.callbacks[invocationDescriptor.invocationId];
        });
        this.launchStreams(streams, promiseQueue);
        return subject;
    };
    HubConnection.prototype.sendMessage = function (message) {
        this.resetKeepAliveInterval();
        return this.connection.send(message);
    };
    /**
     * Sends a js object to the server.
     * @param message The js object to serialize and send.
     */
    HubConnection.prototype.sendWithProtocol = function (message) {
        return this.sendMessage(this.protocol.writeMessage(message));
    };
    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.
     *
     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still
     * be processing the invocation.
     *
     * @param {string} methodName The name of the server method to invoke.
     * @param {any[]} args The arguments used to invoke the server method.
     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.
     */
    HubConnection.prototype.send = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.replaceStreamingParams(args), streams = _a[0], streamIds = _a[1];
        var sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));
        this.launchStreams(streams, sendPromise);
        return sendPromise;
    };
    /** Invokes a hub method on the server using the specified name and arguments.
     *
     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise
     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of
     * resolving the Promise.
     *
     * @typeparam T The expected return type.
     * @param {string} methodName The name of the server method to invoke.
     * @param {any[]} args The arguments used to invoke the server method.
     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.
     */
    HubConnection.prototype.invoke = function (methodName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.replaceStreamingParams(args), streams = _a[0], streamIds = _a[1];
        var invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);
        var p = new Promise(function (resolve, reject) {
            // invocationId will always have a value for a non-blocking invocation
            _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {
                if (error) {
                    reject(error);
                    return;
                }
                else if (invocationEvent) {
                    // invocationEvent will not be null when an error is not passed to the callback
                    if (invocationEvent.type === IHubProtocol_1.MessageType.Completion) {
                        if (invocationEvent.error) {
                            reject(new Error(invocationEvent.error));
                        }
                        else {
                            resolve(invocationEvent.result);
                        }
                    }
                    else {
                        reject(new Error("Unexpected message type: " + invocationEvent.type));
                    }
                }
            };
            var promiseQueue = _this.sendWithProtocol(invocationDescriptor)
                .catch(function (e) {
                reject(e);
                // invocationId will always have a value for a non-blocking invocation
                delete _this.callbacks[invocationDescriptor.invocationId];
            });
            _this.launchStreams(streams, promiseQueue);
        });
        return p;
    };
    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.
     *
     * @param {string} methodName The name of the hub method to define.
     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.
     */
    HubConnection.prototype.on = function (methodName, newMethod) {
        if (!methodName || !newMethod) {
            return;
        }
        methodName = methodName.toLowerCase();
        if (!this.methods[methodName]) {
            this.methods[methodName] = [];
        }
        // Preventing adding the same handler multiple times.
        if (this.methods[methodName].indexOf(newMethod) !== -1) {
            return;
        }
        this.methods[methodName].push(newMethod);
    };
    HubConnection.prototype.off = function (methodName, method) {
        if (!methodName) {
            return;
        }
        methodName = methodName.toLowerCase();
        var handlers = this.methods[methodName];
        if (!handlers) {
            return;
        }
        if (method) {
            var removeIdx = handlers.indexOf(method);
            if (removeIdx !== -1) {
                handlers.splice(removeIdx, 1);
                if (handlers.length === 0) {
                    delete this.methods[methodName];
                }
            }
        }
        else {
            delete this.methods[methodName];
        }
    };
    /** Registers a handler that will be invoked when the connection is closed.
     *
     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).
     */
    HubConnection.prototype.onclose = function (callback) {
        if (callback) {
            this.closedCallbacks.push(callback);
        }
    };
    /** Registers a handler that will be invoked when the connection starts reconnecting.
     *
     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).
     */
    HubConnection.prototype.onreconnecting = function (callback) {
        if (callback) {
            this.reconnectingCallbacks.push(callback);
        }
    };
    /** Registers a handler that will be invoked when the connection successfully reconnects.
     *
     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.
     */
    HubConnection.prototype.onreconnected = function (callback) {
        if (callback) {
            this.reconnectedCallbacks.push(callback);
        }
    };
    HubConnection.prototype.processIncomingData = function (data) {
        this.cleanupTimeout();
        if (!this.receivedHandshakeResponse) {
            data = this.processHandshakeResponse(data);
            this.receivedHandshakeResponse = true;
        }
        // Data may have all been read when processing handshake response
        if (data) {
            // Parse the messages
            var messages = this.protocol.parseMessages(data, this.logger);
            for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
                var message = messages_1[_i];
                switch (message.type) {
                    case IHubProtocol_1.MessageType.Invocation:
                        this.invokeClientMethod(message);
                        break;
                    case IHubProtocol_1.MessageType.StreamItem:
                    case IHubProtocol_1.MessageType.Completion:
                        var callback = this.callbacks[message.invocationId];
                        if (callback) {
                            if (message.type === IHubProtocol_1.MessageType.Completion) {
                                delete this.callbacks[message.invocationId];
                            }
                            callback(message);
                        }
                        break;
                    case IHubProtocol_1.MessageType.Ping:
                        // Don't care about pings
                        break;
                    case IHubProtocol_1.MessageType.Close:
                        this.logger.log(ILogger_1.LogLevel.Information, "Close message received from server.");
                        var error = message.error ? new Error("Server returned an error on close: " + message.error) : undefined;
                        if (message.allowReconnect === true) {
                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,
                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.
                            // tslint:disable-next-line:no-floating-promises
                            this.connection.stop(error);
                        }
                        else {
                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.
                            this.stopPromise = this.stopInternal(error);
                        }
                        break;
                    default:
                        this.logger.log(ILogger_1.LogLevel.Warning, "Invalid message type: " + message.type + ".");
                        break;
                }
            }
        }
        this.resetTimeoutPeriod();
    };
    HubConnection.prototype.processHandshakeResponse = function (data) {
        var _a;
        var responseMessage;
        var remainingData;
        try {
            _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];
        }
        catch (e) {
            var message = "Error parsing handshake response: " + e;
            this.logger.log(ILogger_1.LogLevel.Error, message);
            var error = new Error(message);
            this.handshakeRejecter(error);
            throw error;
        }
        if (responseMessage.error) {
            var message = "Server returned handshake error: " + responseMessage.error;
            this.logger.log(ILogger_1.LogLevel.Error, message);
            var error = new Error(message);
            this.handshakeRejecter(error);
            throw error;
        }
        else {
            this.logger.log(ILogger_1.LogLevel.Debug, "Server handshake complete.");
        }
        this.handshakeResolver();
        return remainingData;
    };
    HubConnection.prototype.resetKeepAliveInterval = function () {
        var _this = this;
        if (this.connection.features.inherentKeepAlive) {
            return;
        }
        this.cleanupPingTimer();
        this.pingServerHandle = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.connectionState === HubConnectionState.Connected)) return [3 /*break*/, 4];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.sendMessage(this.cachedPingMessage)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        // We don't care about the error. It should be seen elsewhere in the client.
                        // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering
                        this.cleanupPingTimer();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); }, this.keepAliveIntervalInMilliseconds);
    };
    HubConnection.prototype.resetTimeoutPeriod = function () {
        var _this = this;
        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {
            // Set the timeout timer
            this.timeoutHandle = setTimeout(function () { return _this.serverTimeout(); }, this.serverTimeoutInMilliseconds);
        }
    };
    HubConnection.prototype.serverTimeout = function () {
        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(
        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.
        // tslint:disable-next-line:no-floating-promises
        this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."));
    };
    HubConnection.prototype.invokeClientMethod = function (invocationMessage) {
        var _this = this;
        var methods = this.methods[invocationMessage.target.toLowerCase()];
        if (methods) {
            try {
                methods.forEach(function (m) { return m.apply(_this, invocationMessage.arguments); });
            }
            catch (e) {
                this.logger.log(ILogger_1.LogLevel.Error, "A callback for the method " + invocationMessage.target.toLowerCase() + " threw error '" + e + "'.");
            }
            if (invocationMessage.invocationId) {
                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.
                var message = "Server requested a response, which is not supported in this version of the client.";
                this.logger.log(ILogger_1.LogLevel.Error, message);
                // We don't want to wait on the stop itself.
                this.stopPromise = this.stopInternal(new Error(message));
            }
        }
        else {
            this.logger.log(ILogger_1.LogLevel.Warning, "No client method with the name '" + invocationMessage.target + "' found.");
        }
    };
    HubConnection.prototype.connectionClosed = function (error) {
        this.logger.log(ILogger_1.LogLevel.Debug, "HubConnection.connectionClosed(" + error + ") called while in state " + this.connectionState + ".");
        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.
        this.stopDuringStartError = this.stopDuringStartError || error || new Error("The underlying connection was closed before the hub handshake could complete.");
        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.
        // If it has already completed, this should just noop.
        if (this.handshakeResolver) {
            this.handshakeResolver();
        }
        this.cancelCallbacksWithError(error || new Error("Invocation canceled due to the underlying connection being closed."));
        this.cleanupTimeout();
        this.cleanupPingTimer();
        if (this.connectionState === HubConnectionState.Disconnecting) {
            this.completeClose(error);
        }
        else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {
            // tslint:disable-next-line:no-floating-promises
            this.reconnect(error);
        }
        else if (this.connectionState === HubConnectionState.Connected) {
            this.completeClose(error);
        }
        // If none of the above if conditions were true were called the HubConnection must be in either:
        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.
        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt
        //    and potentially continue the reconnect() loop.
        // 3. The Disconnected state in which case we're already done.
    };
    HubConnection.prototype.completeClose = function (error) {
        var _this = this;
        if (this.connectionStarted) {
            this.connectionState = HubConnectionState.Disconnected;
            this.connectionStarted = false;
            try {
                this.closedCallbacks.forEach(function (c) { return c.apply(_this, [error]); });
            }
            catch (e) {
                this.logger.log(ILogger_1.LogLevel.Error, "An onclose callback called with error '" + error + "' threw error '" + e + "'.");
            }
        }
    };
    HubConnection.prototype.reconnect = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var reconnectStartTime, previousReconnectAttempts, retryError, nextRetryDelay, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reconnectStartTime = Date.now();
                        previousReconnectAttempts = 0;
                        retryError = error !== undefined ? error : new Error("Attempting to reconnect due to a unknown error.");
                        nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);
                        if (nextRetryDelay === null) {
                            this.logger.log(ILogger_1.LogLevel.Debug, "Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.");
                            this.completeClose(error);
                            return [2 /*return*/];
                        }
                        this.connectionState = HubConnectionState.Reconnecting;
                        if (error) {
                            this.logger.log(ILogger_1.LogLevel.Information, "Connection reconnecting because of error '" + error + "'.");
                        }
                        else {
                            this.logger.log(ILogger_1.LogLevel.Information, "Connection reconnecting.");
                        }
                        if (this.onreconnecting) {
                            try {
                                this.reconnectingCallbacks.forEach(function (c) { return c.apply(_this, [error]); });
                            }
                            catch (e) {
                                this.logger.log(ILogger_1.LogLevel.Error, "An onreconnecting callback called with error '" + error + "' threw error '" + e + "'.");
                            }
                            // Exit early if an onreconnecting callback called connection.stop().
                            if (this.connectionState !== HubConnectionState.Reconnecting) {
                                this.logger.log(ILogger_1.LogLevel.Debug, "Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");
                                return [2 /*return*/];
                            }
                        }
                        _a.label = 1;
                    case 1:
                        if (!(nextRetryDelay !== null)) return [3 /*break*/, 7];
                        this.logger.log(ILogger_1.LogLevel.Information, "Reconnect attempt number " + previousReconnectAttempts + " will start in " + nextRetryDelay + " ms.");
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);
                            })];
                    case 2:
                        _a.sent();
                        this.reconnectDelayHandle = undefined;
                        if (this.connectionState !== HubConnectionState.Reconnecting) {
                            this.logger.log(ILogger_1.LogLevel.Debug, "Connection left the reconnecting state during reconnect delay. Done reconnecting.");
                            return [2 /*return*/];
                        }
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.startInternal()];
                    case 4:
                        _a.sent();
                        this.connectionState = HubConnectionState.Connected;
                        this.logger.log(ILogger_1.LogLevel.Information, "HubConnection reconnected successfully.");
                        if (this.onreconnected) {
                            try {
                                this.reconnectedCallbacks.forEach(function (c) { return c.apply(_this, [_this.connection.connectionId]); });
                            }
                            catch (e) {
                                this.logger.log(ILogger_1.LogLevel.Error, "An onreconnected callback called with connectionId '" + this.connection.connectionId + "; threw error '" + e + "'.");
                            }
                        }
                        return [2 /*return*/];
                    case 5:
                        e_4 = _a.sent();
                        this.logger.log(ILogger_1.LogLevel.Information, "Reconnect attempt failed because of error '" + e_4 + "'.");
                        if (this.connectionState !== HubConnectionState.Reconnecting) {
                            this.logger.log(ILogger_1.LogLevel.Debug, "Connection left the reconnecting state during reconnect attempt. Done reconnecting.");
                            return [2 /*return*/];
                        }
                        retryError = e_4 instanceof Error ? e_4 : new Error(e_4.toString());
                        nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 1];
                    case 7:
                        this.logger.log(ILogger_1.LogLevel.Information, "Reconnect retries have been exhausted after " + (Date.now() - reconnectStartTime) + " ms and " + previousReconnectAttempts + " failed attempts. Connection disconnecting.");
                        this.completeClose();
                        return [2 /*return*/];
                }
            });
        });
    };
    HubConnection.prototype.getNextRetryDelay = function (previousRetryCount, elapsedMilliseconds, retryReason) {
        try {
            return this.reconnectPolicy.nextRetryDelayInMilliseconds({
                elapsedMilliseconds: elapsedMilliseconds,
                previousRetryCount: previousRetryCount,
                retryReason: retryReason,
            });
        }
        catch (e) {
            this.logger.log(ILogger_1.LogLevel.Error, "IRetryPolicy.nextRetryDelayInMilliseconds(" + previousRetryCount + ", " + elapsedMilliseconds + ") threw error '" + e + "'.");
            return null;
        }
    };
    HubConnection.prototype.cancelCallbacksWithError = function (error) {
        var callbacks = this.callbacks;
        this.callbacks = {};
        Object.keys(callbacks)
            .forEach(function (key) {
            var callback = callbacks[key];
            callback(null, error);
        });
    };
    HubConnection.prototype.cleanupPingTimer = function () {
        if (this.pingServerHandle) {
            clearTimeout(this.pingServerHandle);
        }
    };
    HubConnection.prototype.cleanupTimeout = function () {
        if (this.timeoutHandle) {
            clearTimeout(this.timeoutHandle);
        }
    };
    HubConnection.prototype.createInvocation = function (methodName, args, nonblocking, streamIds) {
        if (nonblocking) {
            if (streamIds.length !== 0) {
                return {
                    arguments: args,
                    streamIds: streamIds,
                    target: methodName,
                    type: IHubProtocol_1.MessageType.Invocation,
                };
            }
            else {
                return {
                    arguments: args,
                    target: methodName,
                    type: IHubProtocol_1.MessageType.Invocation,
                };
            }
        }
        else {
            var invocationId = this.invocationId;
            this.invocationId++;
            if (streamIds.length !== 0) {
                return {
                    arguments: args,
                    invocationId: invocationId.toString(),
                    streamIds: streamIds,
                    target: methodName,
                    type: IHubProtocol_1.MessageType.Invocation,
                };
            }
            else {
                return {
                    arguments: args,
                    invocationId: invocationId.toString(),
                    target: methodName,
                    type: IHubProtocol_1.MessageType.Invocation,
                };
            }
        }
    };
    HubConnection.prototype.launchStreams = function (streams, promiseQueue) {
        var _this = this;
        if (streams.length === 0) {
            return;
        }
        // Synchronize stream data so they arrive in-order on the server
        if (!promiseQueue) {
            promiseQueue = Promise.resolve();
        }
        var _loop_1 = function (streamId) {
            streams[streamId].subscribe({
                complete: function () {
                    promiseQueue = promiseQueue.then(function () { return _this.sendWithProtocol(_this.createCompletionMessage(streamId)); });
                },
                error: function (err) {
                    var message;
                    if (err instanceof Error) {
                        message = err.message;
                    }
                    else if (err && err.toString) {
                        message = err.toString();
                    }
                    else {
                        message = "Unknown error";
                    }
                    promiseQueue = promiseQueue.then(function () { return _this.sendWithProtocol(_this.createCompletionMessage(streamId, message)); });
                },
                next: function (item) {
                    promiseQueue = promiseQueue.then(function () { return _this.sendWithProtocol(_this.createStreamItemMessage(streamId, item)); });
                },
            });
        };
        // We want to iterate over the keys, since the keys are the stream ids
        // tslint:disable-next-line:forin
        for (var streamId in streams) {
            _loop_1(streamId);
        }
    };
    HubConnection.prototype.replaceStreamingParams = function (args) {
        var streams = [];
        var streamIds = [];
        for (var i = 0; i < args.length; i++) {
            var argument = args[i];
            if (this.isObservable(argument)) {
                var streamId = this.invocationId;
                this.invocationId++;
                // Store the stream for later use
                streams[streamId] = argument;
                streamIds.push(streamId.toString());
                // remove stream from args
                args.splice(i, 1);
            }
        }
        return [streams, streamIds];
    };
    HubConnection.prototype.isObservable = function (arg) {
        // This allows other stream implementations to just work (like rxjs)
        return arg && arg.subscribe && typeof arg.subscribe === "function";
    };
    HubConnection.prototype.createStreamInvocation = function (methodName, args, streamIds) {
        var invocationId = this.invocationId;
        this.invocationId++;
        if (streamIds.length !== 0) {
            return {
                arguments: args,
                invocationId: invocationId.toString(),
                streamIds: streamIds,
                target: methodName,
                type: IHubProtocol_1.MessageType.StreamInvocation,
            };
        }
        else {
            return {
                arguments: args,
                invocationId: invocationId.toString(),
                target: methodName,
                type: IHubProtocol_1.MessageType.StreamInvocation,
            };
        }
    };
    HubConnection.prototype.createCancelInvocation = function (id) {
        return {
            invocationId: id,
            type: IHubProtocol_1.MessageType.CancelInvocation,
        };
    };
    HubConnection.prototype.createStreamItemMessage = function (id, item) {
        return {
            invocationId: id,
            item: item,
            type: IHubProtocol_1.MessageType.StreamItem,
        };
    };
    HubConnection.prototype.createCompletionMessage = function (id, error, result) {
        if (error) {
            return {
                error: error,
                invocationId: id,
                type: IHubProtocol_1.MessageType.Completion,
            };
        }
        return {
            invocationId: id,
            result: result,
            type: IHubProtocol_1.MessageType.Completion,
        };
    };
    return HubConnection;
}());
exports.HubConnection = HubConnection;
//# sourceMappingURL=HubConnection.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\HubConnection.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./HandshakeProtocol":6,"./IHubProtocol":11,"./ILogger":12,"./Subject":18,"./Utils":20,"buffer":25,"e/U+97":27}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DefaultReconnectPolicy_1 = require("./DefaultReconnectPolicy");
var HttpConnection_1 = require("./HttpConnection");
var HubConnection_1 = require("./HubConnection");
var ILogger_1 = require("./ILogger");
var JsonHubProtocol_1 = require("./JsonHubProtocol");
var Loggers_1 = require("./Loggers");
var Utils_1 = require("./Utils");
// tslint:disable:object-literal-sort-keys
var LogLevelNameMapping = {
    trace: ILogger_1.LogLevel.Trace,
    debug: ILogger_1.LogLevel.Debug,
    info: ILogger_1.LogLevel.Information,
    information: ILogger_1.LogLevel.Information,
    warn: ILogger_1.LogLevel.Warning,
    warning: ILogger_1.LogLevel.Warning,
    error: ILogger_1.LogLevel.Error,
    critical: ILogger_1.LogLevel.Critical,
    none: ILogger_1.LogLevel.None,
};
function parseLogLevel(name) {
    // Case-insensitive matching via lower-casing
    // Yes, I know case-folding is a complicated problem in Unicode, but we only support
    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.
    var mapping = LogLevelNameMapping[name.toLowerCase()];
    if (typeof mapping !== "undefined") {
        return mapping;
    }
    else {
        throw new Error("Unknown log level: " + name);
    }
}
/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */
var HubConnectionBuilder = /** @class */ (function () {
    function HubConnectionBuilder() {
    }
    HubConnectionBuilder.prototype.configureLogging = function (logging) {
        Utils_1.Arg.isRequired(logging, "logging");
        if (isLogger(logging)) {
            this.logger = logging;
        }
        else if (typeof logging === "string") {
            var logLevel = parseLogLevel(logging);
            this.logger = new Utils_1.ConsoleLogger(logLevel);
        }
        else {
            this.logger = new Utils_1.ConsoleLogger(logging);
        }
        return this;
    };
    HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {
        Utils_1.Arg.isRequired(url, "url");
        Utils_1.Arg.isNotEmpty(url, "url");
        this.url = url;
        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed
        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.
        if (typeof transportTypeOrOptions === "object") {
            this.httpConnectionOptions = __assign({}, this.httpConnectionOptions, transportTypeOrOptions);
        }
        else {
            this.httpConnectionOptions = __assign({}, this.httpConnectionOptions, { transport: transportTypeOrOptions });
        }
        return this;
    };
    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.
     *
     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.
     */
    HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {
        Utils_1.Arg.isRequired(protocol, "protocol");
        this.protocol = protocol;
        return this;
    };
    HubConnectionBuilder.prototype.withAutomaticReconnect = function (retryDelaysOrReconnectPolicy) {
        if (this.reconnectPolicy) {
            throw new Error("A reconnectPolicy has already been set.");
        }
        if (!retryDelaysOrReconnectPolicy) {
            this.reconnectPolicy = new DefaultReconnectPolicy_1.DefaultReconnectPolicy();
        }
        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {
            this.reconnectPolicy = new DefaultReconnectPolicy_1.DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);
        }
        else {
            this.reconnectPolicy = retryDelaysOrReconnectPolicy;
        }
        return this;
    };
    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.
     *
     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.
     */
    HubConnectionBuilder.prototype.build = function () {
        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one
        // provided to configureLogger
        var httpConnectionOptions = this.httpConnectionOptions || {};
        // If it's 'null', the user **explicitly** asked for null, don't mess with it.
        if (httpConnectionOptions.logger === undefined) {
            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.
            httpConnectionOptions.logger = this.logger;
        }
        // Now create the connection
        if (!this.url) {
            throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");
        }
        var connection = new HttpConnection_1.HttpConnection(this.url, httpConnectionOptions);
        return HubConnection_1.HubConnection.create(connection, this.logger || Loggers_1.NullLogger.instance, this.protocol || new JsonHubProtocol_1.JsonHubProtocol(), this.reconnectPolicy);
    };
    return HubConnectionBuilder;
}());
exports.HubConnectionBuilder = HubConnectionBuilder;
function isLogger(logger) {
    return logger.log !== undefined;
}
//# sourceMappingURL=HubConnectionBuilder.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\HubConnectionBuilder.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./DefaultReconnectPolicy":3,"./HttpConnection":8,"./HubConnection":9,"./ILogger":12,"./JsonHubProtocol":14,"./Loggers":15,"./Utils":20,"buffer":25,"e/U+97":27}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/** Defines the type of a Hub Message. */
var MessageType;
(function (MessageType) {
    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */
    MessageType[MessageType["Invocation"] = 1] = "Invocation";
    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */
    MessageType[MessageType["StreamItem"] = 2] = "StreamItem";
    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */
    MessageType[MessageType["Completion"] = 3] = "Completion";
    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */
    MessageType[MessageType["StreamInvocation"] = 4] = "StreamInvocation";
    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */
    MessageType[MessageType["CancelInvocation"] = 5] = "CancelInvocation";
    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */
    MessageType[MessageType["Ping"] = 6] = "Ping";
    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */
    MessageType[MessageType["Close"] = 7] = "Close";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
//# sourceMappingURL=IHubProtocol.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\IHubProtocol.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.
/** Indicates the severity of a log message.
 *
 * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.
 */
var LogLevel;
(function (LogLevel) {
    /** Log level for very low severity diagnostic messages. */
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    /** Log level for low severity diagnostic messages. */
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    /** Log level for informational diagnostic messages. */
    LogLevel[LogLevel["Information"] = 2] = "Information";
    /** Log level for diagnostic messages that indicate a non-fatal problem. */
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    /** Log level for diagnostic messages that indicate a failure in the current operation. */
    LogLevel[LogLevel["Error"] = 4] = "Error";
    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */
    LogLevel[LogLevel["Critical"] = 5] = "Critical";
    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */
    LogLevel[LogLevel["None"] = 6] = "None";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=ILogger.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\ILogger.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// This will be treated as a bit flag in the future, so we keep it using power-of-two values.
/** Specifies a specific HTTP transport type. */
var HttpTransportType;
(function (HttpTransportType) {
    /** Specifies no transport preference. */
    HttpTransportType[HttpTransportType["None"] = 0] = "None";
    /** Specifies the WebSockets transport. */
    HttpTransportType[HttpTransportType["WebSockets"] = 1] = "WebSockets";
    /** Specifies the Server-Sent Events transport. */
    HttpTransportType[HttpTransportType["ServerSentEvents"] = 2] = "ServerSentEvents";
    /** Specifies the Long Polling transport. */
    HttpTransportType[HttpTransportType["LongPolling"] = 4] = "LongPolling";
})(HttpTransportType = exports.HttpTransportType || (exports.HttpTransportType = {}));
/** Specifies the transfer format for a connection. */
var TransferFormat;
(function (TransferFormat) {
    /** Specifies that only text data will be transmitted over the connection. */
    TransferFormat[TransferFormat["Text"] = 1] = "Text";
    /** Specifies that binary data will be transmitted over the connection. */
    TransferFormat[TransferFormat["Binary"] = 2] = "Binary";
})(TransferFormat = exports.TransferFormat || (exports.TransferFormat = {}));
//# sourceMappingURL=ITransport.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\ITransport.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var IHubProtocol_1 = require("./IHubProtocol");
var ILogger_1 = require("./ILogger");
var ITransport_1 = require("./ITransport");
var Loggers_1 = require("./Loggers");
var TextMessageFormat_1 = require("./TextMessageFormat");
var JSON_HUB_PROTOCOL_NAME = "json";
/** Implements the JSON Hub Protocol. */
var JsonHubProtocol = /** @class */ (function () {
    function JsonHubProtocol() {
        /** @inheritDoc */
        this.name = JSON_HUB_PROTOCOL_NAME;
        /** @inheritDoc */
        this.version = 1;
        /** @inheritDoc */
        this.transferFormat = ITransport_1.TransferFormat.Text;
    }
    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.
     *
     * @param {string} input A string containing the serialized representation.
     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.
     */
    JsonHubProtocol.prototype.parseMessages = function (input, logger) {
        // The interface does allow "ArrayBuffer" to be passed in, but this implementation does not. So let's throw a useful error.
        if (typeof input !== "string") {
            throw new Error("Invalid input for JSON hub protocol. Expected a string.");
        }
        if (!input) {
            return [];
        }
        if (logger === null) {
            logger = Loggers_1.NullLogger.instance;
        }
        // Parse the messages
        var messages = TextMessageFormat_1.TextMessageFormat.parse(input);
        var hubMessages = [];
        for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
            var message = messages_1[_i];
            var parsedMessage = JSON.parse(message);
            if (typeof parsedMessage.type !== "number") {
                throw new Error("Invalid payload.");
            }
            switch (parsedMessage.type) {
                case IHubProtocol_1.MessageType.Invocation:
                    this.isInvocationMessage(parsedMessage);
                    break;
                case IHubProtocol_1.MessageType.StreamItem:
                    this.isStreamItemMessage(parsedMessage);
                    break;
                case IHubProtocol_1.MessageType.Completion:
                    this.isCompletionMessage(parsedMessage);
                    break;
                case IHubProtocol_1.MessageType.Ping:
                    // Single value, no need to validate
                    break;
                case IHubProtocol_1.MessageType.Close:
                    // All optional values, no need to validate
                    break;
                default:
                    // Future protocol changes can add message types, old clients can ignore them
                    logger.log(ILogger_1.LogLevel.Information, "Unknown message type '" + parsedMessage.type + "' ignored.");
                    continue;
            }
            hubMessages.push(parsedMessage);
        }
        return hubMessages;
    };
    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.
     *
     * @param {HubMessage} message The message to write.
     * @returns {string} A string containing the serialized representation of the message.
     */
    JsonHubProtocol.prototype.writeMessage = function (message) {
        return TextMessageFormat_1.TextMessageFormat.write(JSON.stringify(message));
    };
    JsonHubProtocol.prototype.isInvocationMessage = function (message) {
        this.assertNotEmptyString(message.target, "Invalid payload for Invocation message.");
        if (message.invocationId !== undefined) {
            this.assertNotEmptyString(message.invocationId, "Invalid payload for Invocation message.");
        }
    };
    JsonHubProtocol.prototype.isStreamItemMessage = function (message) {
        this.assertNotEmptyString(message.invocationId, "Invalid payload for StreamItem message.");
        if (message.item === undefined) {
            throw new Error("Invalid payload for StreamItem message.");
        }
    };
    JsonHubProtocol.prototype.isCompletionMessage = function (message) {
        if (message.result && message.error) {
            throw new Error("Invalid payload for Completion message.");
        }
        if (!message.result && message.error) {
            this.assertNotEmptyString(message.error, "Invalid payload for Completion message.");
        }
        this.assertNotEmptyString(message.invocationId, "Invalid payload for Completion message.");
    };
    JsonHubProtocol.prototype.assertNotEmptyString = function (value, errorMessage) {
        if (typeof value !== "string" || value === "") {
            throw new Error(errorMessage);
        }
    };
    return JsonHubProtocol;
}());
exports.JsonHubProtocol = JsonHubProtocol;
//# sourceMappingURL=JsonHubProtocol.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\JsonHubProtocol.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./Loggers":15,"./TextMessageFormat":19,"buffer":25,"e/U+97":27}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/** A logger that does nothing when log messages are sent to it. */
var NullLogger = /** @class */ (function () {
    function NullLogger() {
    }
    /** @inheritDoc */
    // tslint:disable-next-line
    NullLogger.prototype.log = function (_logLevel, _message) {
    };
    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */
    NullLogger.instance = new NullLogger();
    return NullLogger;
}());
exports.NullLogger = NullLogger;
//# sourceMappingURL=Loggers.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\Loggers.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var AbortController_1 = require("./AbortController");
var Errors_1 = require("./Errors");
var ILogger_1 = require("./ILogger");
var ITransport_1 = require("./ITransport");
var Utils_1 = require("./Utils");
// Not exported from 'index', this type is internal.
/** @private */
var LongPollingTransport = /** @class */ (function () {
    function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent, withCredentials, headers) {
        this.httpClient = httpClient;
        this.accessTokenFactory = accessTokenFactory;
        this.logger = logger;
        this.pollAbort = new AbortController_1.AbortController();
        this.logMessageContent = logMessageContent;
        this.withCredentials = withCredentials;
        this.headers = headers;
        this.running = false;
        this.onreceive = null;
        this.onclose = null;
    }
    Object.defineProperty(LongPollingTransport.prototype, "pollAborted", {
        // This is an internal type, not exported from 'index' so this is really just internal.
        get: function () {
            return this.pollAbort.aborted;
        },
        enumerable: true,
        configurable: true
    });
    LongPollingTransport.prototype.connect = function (url, transferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, name, value, headers, pollOptions, token, pollUrl, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        Utils_1.Arg.isRequired(url, "url");
                        Utils_1.Arg.isRequired(transferFormat, "transferFormat");
                        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, "transferFormat");
                        this.url = url;
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Connecting.");
                        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)
                        if (transferFormat === ITransport_1.TransferFormat.Binary &&
                            (typeof XMLHttpRequest !== "undefined" && typeof new XMLHttpRequest().responseType !== "string")) {
                            throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");
                        }
                        _b = Utils_1.getUserAgentHeader(), name = _b[0], value = _b[1];
                        headers = __assign((_a = {}, _a[name] = value, _a), this.headers);
                        pollOptions = {
                            abortSignal: this.pollAbort.signal,
                            headers: headers,
                            timeout: 100000,
                            withCredentials: this.withCredentials,
                        };
                        if (transferFormat === ITransport_1.TransferFormat.Binary) {
                            pollOptions.responseType = "arraybuffer";
                        }
                        return [4 /*yield*/, this.getAccessToken()];
                    case 1:
                        token = _c.sent();
                        this.updateHeaderToken(pollOptions, token);
                        pollUrl = url + "&_=" + Date.now();
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) polling: " + pollUrl + ".");
                        return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];
                    case 2:
                        response = _c.sent();
                        if (response.statusCode !== 200) {
                            this.logger.log(ILogger_1.LogLevel.Error, "(LongPolling transport) Unexpected response code: " + response.statusCode + ".");
                            // Mark running as false so that the poll immediately ends and runs the close logic
                            this.closeError = new Errors_1.HttpError(response.statusText || "", response.statusCode);
                            this.running = false;
                        }
                        else {
                            this.running = true;
                        }
                        this.receiving = this.poll(this.url, pollOptions);
                        return [2 /*return*/];
                }
            });
        });
    };
    LongPollingTransport.prototype.getAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accessTokenFactory) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.accessTokenFactory()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    };
    LongPollingTransport.prototype.updateHeaderToken = function (request, token) {
        if (!request.headers) {
            request.headers = {};
        }
        if (token) {
            // tslint:disable-next-line:no-string-literal
            request.headers["Authorization"] = "Bearer " + token;
            return;
        }
        // tslint:disable-next-line:no-string-literal
        if (request.headers["Authorization"]) {
            // tslint:disable-next-line:no-string-literal
            delete request.headers["Authorization"];
        }
    };
    LongPollingTransport.prototype.poll = function (url, pollOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var token, pollUrl, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 8, 9]);
                        _a.label = 1;
                    case 1:
                        if (!this.running) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getAccessToken()];
                    case 2:
                        token = _a.sent();
                        this.updateHeaderToken(pollOptions, token);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        pollUrl = url + "&_=" + Date.now();
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) polling: " + pollUrl + ".");
                        return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];
                    case 4:
                        response = _a.sent();
                        if (response.statusCode === 204) {
                            this.logger.log(ILogger_1.LogLevel.Information, "(LongPolling transport) Poll terminated by server.");
                            this.running = false;
                        }
                        else if (response.statusCode !== 200) {
                            this.logger.log(ILogger_1.LogLevel.Error, "(LongPolling transport) Unexpected response code: " + response.statusCode + ".");
                            // Unexpected status code
                            this.closeError = new Errors_1.HttpError(response.statusText || "", response.statusCode);
                            this.running = false;
                        }
                        else {
                            // Process the response
                            if (response.content) {
                                this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) data received. " + Utils_1.getDataDetail(response.content, this.logMessageContent) + ".");
                                if (this.onreceive) {
                                    this.onreceive(response.content);
                                }
                            }
                            else {
                                // This is another way timeout manifest.
                                this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Poll timed out, reissuing.");
                            }
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        if (!this.running) {
                            // Log but disregard errors that occur after stopping
                            this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Poll errored after shutdown: " + e_1.message);
                        }
                        else {
                            if (e_1 instanceof Errors_1.TimeoutError) {
                                // Ignore timeouts and reissue the poll.
                                this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Poll timed out, reissuing.");
                            }
                            else {
                                // Close the connection with the error as the result.
                                this.closeError = e_1;
                                this.running = false;
                            }
                        }
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Polling complete.");
                        // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.
                        // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.
                        if (!this.pollAborted) {
                            this.raiseOnClose();
                        }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    LongPollingTransport.prototype.send = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.running) {
                    return [2 /*return*/, Promise.reject(new Error("Cannot send until the transport is connected"))];
                }
                return [2 /*return*/, Utils_1.sendMessage(this.logger, "LongPolling", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers)];
            });
        });
    };
    LongPollingTransport.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var headers, _a, name_1, value, deleteOptions, token;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Stopping polling.");
                        // Tell receiving loop to stop, abort any current request, and then wait for it to finish
                        this.running = false;
                        this.pollAbort.abort();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, , 5, 6]);
                        return [4 /*yield*/, this.receiving];
                    case 2:
                        _b.sent();
                        // Send DELETE to clean up long polling on the server
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) sending DELETE request to " + this.url + ".");
                        headers = {};
                        _a = Utils_1.getUserAgentHeader(), name_1 = _a[0], value = _a[1];
                        headers[name_1] = value;
                        deleteOptions = {
                            headers: __assign({}, headers, this.headers),
                            withCredentials: this.withCredentials,
                        };
                        return [4 /*yield*/, this.getAccessToken()];
                    case 3:
                        token = _b.sent();
                        this.updateHeaderToken(deleteOptions, token);
                        return [4 /*yield*/, this.httpClient.delete(this.url, deleteOptions)];
                    case 4:
                        _b.sent();
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) DELETE request sent.");
                        return [3 /*break*/, 6];
                    case 5:
                        this.logger.log(ILogger_1.LogLevel.Trace, "(LongPolling transport) Stop finished.");
                        // Raise close event here instead of in polling
                        // It needs to happen after the DELETE request is sent
                        this.raiseOnClose();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    LongPollingTransport.prototype.raiseOnClose = function () {
        if (this.onclose) {
            var logMessage = "(LongPolling transport) Firing onclose event.";
            if (this.closeError) {
                logMessage += " Error: " + this.closeError;
            }
            this.logger.log(ILogger_1.LogLevel.Trace, logMessage);
            this.onclose(this.closeError);
        }
    };
    return LongPollingTransport;
}());
exports.LongPollingTransport = LongPollingTransport;
//# sourceMappingURL=LongPollingTransport.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\LongPollingTransport.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./AbortController":1,"./Errors":4,"./ILogger":12,"./ITransport":13,"./Utils":20,"buffer":25,"e/U+97":27}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ILogger_1 = require("./ILogger");
var ITransport_1 = require("./ITransport");
var Utils_1 = require("./Utils");
/** @private */
var ServerSentEventsTransport = /** @class */ (function () {
    function ServerSentEventsTransport(httpClient, accessTokenFactory, logger, logMessageContent, eventSourceConstructor, withCredentials, headers) {
        this.httpClient = httpClient;
        this.accessTokenFactory = accessTokenFactory;
        this.logger = logger;
        this.logMessageContent = logMessageContent;
        this.withCredentials = withCredentials;
        this.eventSourceConstructor = eventSourceConstructor;
        this.headers = headers;
        this.onreceive = null;
        this.onclose = null;
    }
    ServerSentEventsTransport.prototype.connect = function (url, transferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Utils_1.Arg.isRequired(url, "url");
                        Utils_1.Arg.isRequired(transferFormat, "transferFormat");
                        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, "transferFormat");
                        this.logger.log(ILogger_1.LogLevel.Trace, "(SSE transport) Connecting.");
                        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send
                        this.url = url;
                        if (!this.accessTokenFactory) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.accessTokenFactory()];
                    case 1:
                        token = _a.sent();
                        if (token) {
                            url += (url.indexOf("?") < 0 ? "?" : "&") + ("access_token=" + encodeURIComponent(token));
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            var opened = false;
                            if (transferFormat !== ITransport_1.TransferFormat.Text) {
                                reject(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));
                                return;
                            }
                            var eventSource;
                            if (Utils_1.Platform.isBrowser || Utils_1.Platform.isWebWorker) {
                                eventSource = new _this.eventSourceConstructor(url, { withCredentials: _this.withCredentials });
                            }
                            else {
                                // Non-browser passes cookies via the dictionary
                                var cookies = _this.httpClient.getCookieString(url);
                                var headers = {};
                                headers.Cookie = cookies;
                                var _a = Utils_1.getUserAgentHeader(), name_1 = _a[0], value = _a[1];
                                headers[name_1] = value;
                                eventSource = new _this.eventSourceConstructor(url, { withCredentials: _this.withCredentials, headers: __assign({}, headers, _this.headers) });
                            }
                            try {
                                eventSource.onmessage = function (e) {
                                    if (_this.onreceive) {
                                        try {
                                            _this.logger.log(ILogger_1.LogLevel.Trace, "(SSE transport) data received. " + Utils_1.getDataDetail(e.data, _this.logMessageContent) + ".");
                                            _this.onreceive(e.data);
                                        }
                                        catch (error) {
                                            _this.close(error);
                                            return;
                                        }
                                    }
                                };
                                eventSource.onerror = function (e) {
                                    var error = new Error(e.data || "Error occurred");
                                    if (opened) {
                                        _this.close(error);
                                    }
                                    else {
                                        reject(error);
                                    }
                                };
                                eventSource.onopen = function () {
                                    _this.logger.log(ILogger_1.LogLevel.Information, "SSE connected to " + _this.url);
                                    _this.eventSource = eventSource;
                                    opened = true;
                                    resolve();
                                };
                            }
                            catch (e) {
                                reject(e);
                                return;
                            }
                        })];
                }
            });
        });
    };
    ServerSentEventsTransport.prototype.send = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.eventSource) {
                    return [2 /*return*/, Promise.reject(new Error("Cannot send until the transport is connected"))];
                }
                return [2 /*return*/, Utils_1.sendMessage(this.logger, "SSE", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers)];
            });
        });
    };
    ServerSentEventsTransport.prototype.stop = function () {
        this.close();
        return Promise.resolve();
    };
    ServerSentEventsTransport.prototype.close = function (e) {
        if (this.eventSource) {
            this.eventSource.close();
            this.eventSource = undefined;
            if (this.onclose) {
                this.onclose(e);
            }
        }
    };
    return ServerSentEventsTransport;
}());
exports.ServerSentEventsTransport = ServerSentEventsTransport;
//# sourceMappingURL=ServerSentEventsTransport.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\ServerSentEventsTransport.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./ILogger":12,"./ITransport":13,"./Utils":20,"buffer":25,"e/U+97":27}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("./Utils");
/** Stream implementation to stream items to the server. */
var Subject = /** @class */ (function () {
    function Subject() {
        this.observers = [];
    }
    Subject.prototype.next = function (item) {
        for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
            var observer = _a[_i];
            observer.next(item);
        }
    };
    Subject.prototype.error = function (err) {
        for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
            var observer = _a[_i];
            if (observer.error) {
                observer.error(err);
            }
        }
    };
    Subject.prototype.complete = function () {
        for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
            var observer = _a[_i];
            if (observer.complete) {
                observer.complete();
            }
        }
    };
    Subject.prototype.subscribe = function (observer) {
        this.observers.push(observer);
        return new Utils_1.SubjectSubscription(this, observer);
    };
    return Subject;
}());
exports.Subject = Subject;
//# sourceMappingURL=Subject.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\Subject.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./Utils":20,"buffer":25,"e/U+97":27}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// Not exported from index
/** @private */
var TextMessageFormat = /** @class */ (function () {
    function TextMessageFormat() {
    }
    TextMessageFormat.write = function (output) {
        return "" + output + TextMessageFormat.RecordSeparator;
    };
    TextMessageFormat.parse = function (input) {
        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {
            throw new Error("Message is incomplete.");
        }
        var messages = input.split(TextMessageFormat.RecordSeparator);
        messages.pop();
        return messages;
    };
    TextMessageFormat.RecordSeparatorCode = 0x1e;
    TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);
    return TextMessageFormat;
}());
exports.TextMessageFormat = TextMessageFormat;
//# sourceMappingURL=TextMessageFormat.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\TextMessageFormat.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"buffer":25,"e/U+97":27}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ILogger_1 = require("./ILogger");
var Loggers_1 = require("./Loggers");
// Version token that will be replaced by the prepack command
/** The version of the SignalR client. */
exports.VERSION = "5.0.5";
/** @private */
var Arg = /** @class */ (function () {
    function Arg() {
    }
    Arg.isRequired = function (val, name) {
        if (val === null || val === undefined) {
            throw new Error("The '" + name + "' argument is required.");
        }
    };
    Arg.isNotEmpty = function (val, name) {
        if (!val || val.match(/^\s*$/)) {
            throw new Error("The '" + name + "' argument should not be empty.");
        }
    };
    Arg.isIn = function (val, values, name) {
        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.
        if (!(val in values)) {
            throw new Error("Unknown " + name + " value: " + val + ".");
        }
    };
    return Arg;
}());
exports.Arg = Arg;
/** @private */
var Platform = /** @class */ (function () {
    function Platform() {
    }
    Object.defineProperty(Platform, "isBrowser", {
        get: function () {
            return typeof window === "object";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Platform, "isWebWorker", {
        get: function () {
            return typeof self === "object" && "importScripts" in self;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Platform, "isNode", {
        get: function () {
            return !this.isBrowser && !this.isWebWorker;
        },
        enumerable: true,
        configurable: true
    });
    return Platform;
}());
exports.Platform = Platform;
/** @private */
function getDataDetail(data, includeContent) {
    var detail = "";
    if (isArrayBuffer(data)) {
        detail = "Binary data of length " + data.byteLength;
        if (includeContent) {
            detail += ". Content: '" + formatArrayBuffer(data) + "'";
        }
    }
    else if (typeof data === "string") {
        detail = "String data of length " + data.length;
        if (includeContent) {
            detail += ". Content: '" + data + "'";
        }
    }
    return detail;
}
exports.getDataDetail = getDataDetail;
/** @private */
function formatArrayBuffer(data) {
    var view = new Uint8Array(data);
    // Uint8Array.map only supports returning another Uint8Array?
    var str = "";
    view.forEach(function (num) {
        var pad = num < 16 ? "0" : "";
        str += "0x" + pad + num.toString(16) + " ";
    });
    // Trim of trailing space.
    return str.substr(0, str.length - 1);
}
exports.formatArrayBuffer = formatArrayBuffer;
// Also in signalr-protocol-msgpack/Utils.ts
/** @private */
function isArrayBuffer(val) {
    return val && typeof ArrayBuffer !== "undefined" &&
        (val instanceof ArrayBuffer ||
            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof
            (val.constructor && val.constructor.name === "ArrayBuffer"));
}
exports.isArrayBuffer = isArrayBuffer;
/** @private */
function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, logMessageContent, withCredentials, defaultHeaders) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, headers, token, _b, name, value, responseType, response;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = {};
                    if (!accessTokenFactory) return [3 /*break*/, 2];
                    return [4 /*yield*/, accessTokenFactory()];
                case 1:
                    token = _c.sent();
                    if (token) {
                        headers = (_a = {},
                            _a["Authorization"] = "Bearer " + token,
                            _a);
                    }
                    _c.label = 2;
                case 2:
                    _b = getUserAgentHeader(), name = _b[0], value = _b[1];
                    headers[name] = value;
                    logger.log(ILogger_1.LogLevel.Trace, "(" + transportName + " transport) sending data. " + getDataDetail(content, logMessageContent) + ".");
                    responseType = isArrayBuffer(content) ? "arraybuffer" : "text";
                    return [4 /*yield*/, httpClient.post(url, {
                            content: content,
                            headers: __assign({}, headers, defaultHeaders),
                            responseType: responseType,
                            withCredentials: withCredentials,
                        })];
                case 3:
                    response = _c.sent();
                    logger.log(ILogger_1.LogLevel.Trace, "(" + transportName + " transport) request complete. Response status: " + response.statusCode + ".");
                    return [2 /*return*/];
            }
        });
    });
}
exports.sendMessage = sendMessage;
/** @private */
function createLogger(logger) {
    if (logger === undefined) {
        return new ConsoleLogger(ILogger_1.LogLevel.Information);
    }
    if (logger === null) {
        return Loggers_1.NullLogger.instance;
    }
    if (logger.log) {
        return logger;
    }
    return new ConsoleLogger(logger);
}
exports.createLogger = createLogger;
/** @private */
var SubjectSubscription = /** @class */ (function () {
    function SubjectSubscription(subject, observer) {
        this.subject = subject;
        this.observer = observer;
    }
    SubjectSubscription.prototype.dispose = function () {
        var index = this.subject.observers.indexOf(this.observer);
        if (index > -1) {
            this.subject.observers.splice(index, 1);
        }
        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {
            this.subject.cancelCallback().catch(function (_) { });
        }
    };
    return SubjectSubscription;
}());
exports.SubjectSubscription = SubjectSubscription;
/** @private */
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger(minimumLogLevel) {
        this.minimumLogLevel = minimumLogLevel;
        this.outputConsole = console;
    }
    ConsoleLogger.prototype.log = function (logLevel, message) {
        if (logLevel >= this.minimumLogLevel) {
            switch (logLevel) {
                case ILogger_1.LogLevel.Critical:
                case ILogger_1.LogLevel.Error:
                    this.outputConsole.error("[" + new Date().toISOString() + "] " + ILogger_1.LogLevel[logLevel] + ": " + message);
                    break;
                case ILogger_1.LogLevel.Warning:
                    this.outputConsole.warn("[" + new Date().toISOString() + "] " + ILogger_1.LogLevel[logLevel] + ": " + message);
                    break;
                case ILogger_1.LogLevel.Information:
                    this.outputConsole.info("[" + new Date().toISOString() + "] " + ILogger_1.LogLevel[logLevel] + ": " + message);
                    break;
                default:
                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug
                    this.outputConsole.log("[" + new Date().toISOString() + "] " + ILogger_1.LogLevel[logLevel] + ": " + message);
                    break;
            }
        }
    };
    return ConsoleLogger;
}());
exports.ConsoleLogger = ConsoleLogger;
/** @private */
function getUserAgentHeader() {
    var userAgentHeaderName = "X-SignalR-User-Agent";
    if (Platform.isNode) {
        userAgentHeaderName = "User-Agent";
    }
    return [userAgentHeaderName, constructUserAgent(exports.VERSION, getOsName(), getRuntime(), getRuntimeVersion())];
}
exports.getUserAgentHeader = getUserAgentHeader;
/** @private */
function constructUserAgent(version, os, runtime, runtimeVersion) {
    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])
    var userAgent = "Microsoft SignalR/";
    var majorAndMinor = version.split(".");
    userAgent += majorAndMinor[0] + "." + majorAndMinor[1];
    userAgent += " (" + version + "; ";
    if (os && os !== "") {
        userAgent += os + "; ";
    }
    else {
        userAgent += "Unknown OS; ";
    }
    userAgent += "" + runtime;
    if (runtimeVersion) {
        userAgent += "; " + runtimeVersion;
    }
    else {
        userAgent += "; Unknown Runtime Version";
    }
    userAgent += ")";
    return userAgent;
}
exports.constructUserAgent = constructUserAgent;
function getOsName() {
    if (Platform.isNode) {
        switch (process.platform) {
            case "win32":
                return "Windows NT";
            case "darwin":
                return "macOS";
            case "linux":
                return "Linux";
            default:
                return process.platform;
        }
    }
    else {
        return "";
    }
}
function getRuntimeVersion() {
    if (Platform.isNode) {
        return process.versions.node;
    }
    return undefined;
}
function getRuntime() {
    if (Platform.isNode) {
        return "NodeJS";
    }
    else {
        return "Browser";
    }
}
//# sourceMappingURL=Utils.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\Utils.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./ILogger":12,"./Loggers":15,"buffer":25,"e/U+97":27}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ILogger_1 = require("./ILogger");
var ITransport_1 = require("./ITransport");
var Utils_1 = require("./Utils");
/** @private */
var WebSocketTransport = /** @class */ (function () {
    function WebSocketTransport(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {
        this.logger = logger;
        this.accessTokenFactory = accessTokenFactory;
        this.logMessageContent = logMessageContent;
        this.webSocketConstructor = webSocketConstructor;
        this.httpClient = httpClient;
        this.onreceive = null;
        this.onclose = null;
        this.headers = headers;
    }
    WebSocketTransport.prototype.connect = function (url, transferFormat) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Utils_1.Arg.isRequired(url, "url");
                        Utils_1.Arg.isRequired(transferFormat, "transferFormat");
                        Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, "transferFormat");
                        this.logger.log(ILogger_1.LogLevel.Trace, "(WebSockets transport) Connecting.");
                        if (!this.accessTokenFactory) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.accessTokenFactory()];
                    case 1:
                        token = _a.sent();
                        if (token) {
                            url += (url.indexOf("?") < 0 ? "?" : "&") + ("access_token=" + encodeURIComponent(token));
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            url = url.replace(/^http/, "ws");
                            var webSocket;
                            var cookies = _this.httpClient.getCookieString(url);
                            var opened = false;
                            if (Utils_1.Platform.isNode) {
                                var headers = {};
                                var _a = Utils_1.getUserAgentHeader(), name_1 = _a[0], value = _a[1];
                                headers[name_1] = value;
                                if (cookies) {
                                    headers["Cookie"] = "" + cookies;
                                }
                                // Only pass headers when in non-browser environments
                                webSocket = new _this.webSocketConstructor(url, undefined, {
                                    headers: __assign({}, headers, _this.headers),
                                });
                            }
                            if (!webSocket) {
                                // Chrome is not happy with passing 'undefined' as protocol
                                webSocket = new _this.webSocketConstructor(url);
                            }
                            if (transferFormat === ITransport_1.TransferFormat.Binary) {
                                webSocket.binaryType = "arraybuffer";
                            }
                            // tslint:disable-next-line:variable-name
                            webSocket.onopen = function (_event) {
                                _this.logger.log(ILogger_1.LogLevel.Information, "WebSocket connected to " + url + ".");
                                _this.webSocket = webSocket;
                                opened = true;
                                resolve();
                            };
                            webSocket.onerror = function (event) {
                                var error = null;
                                // ErrorEvent is a browser only type we need to check if the type exists before using it
                                if (typeof ErrorEvent !== "undefined" && event instanceof ErrorEvent) {
                                    error = event.error;
                                }
                                else {
                                    error = new Error("There was an error with the transport.");
                                }
                                reject(error);
                            };
                            webSocket.onmessage = function (message) {
                                _this.logger.log(ILogger_1.LogLevel.Trace, "(WebSockets transport) data received. " + Utils_1.getDataDetail(message.data, _this.logMessageContent) + ".");
                                if (_this.onreceive) {
                                    try {
                                        _this.onreceive(message.data);
                                    }
                                    catch (error) {
                                        _this.close(error);
                                        return;
                                    }
                                }
                            };
                            webSocket.onclose = function (event) {
                                // Don't call close handler if connection was never established
                                // We'll reject the connect call instead
                                if (opened) {
                                    _this.close(event);
                                }
                                else {
                                    var error = null;
                                    // ErrorEvent is a browser only type we need to check if the type exists before using it
                                    if (typeof ErrorEvent !== "undefined" && event instanceof ErrorEvent) {
                                        error = event.error;
                                    }
                                    else {
                                        error = new Error("There was an error with the transport.");
                                    }
                                    reject(error);
                                }
                            };
                        })];
                }
            });
        });
    };
    WebSocketTransport.prototype.send = function (data) {
        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {
            this.logger.log(ILogger_1.LogLevel.Trace, "(WebSockets transport) sending data. " + Utils_1.getDataDetail(data, this.logMessageContent) + ".");
            this.webSocket.send(data);
            return Promise.resolve();
        }
        return Promise.reject("WebSocket is not in the OPEN state");
    };
    WebSocketTransport.prototype.stop = function () {
        if (this.webSocket) {
            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning
            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects
            this.close(undefined);
        }
        return Promise.resolve();
    };
    WebSocketTransport.prototype.close = function (event) {
        // webSocket will be null if the transport did not start successfully
        if (this.webSocket) {
            // Clear websocket handlers because we are considering the socket closed now
            this.webSocket.onclose = function () { };
            this.webSocket.onmessage = function () { };
            this.webSocket.onerror = function () { };
            this.webSocket.close();
            this.webSocket = undefined;
        }
        this.logger.log(ILogger_1.LogLevel.Trace, "(WebSockets transport) socket closed.");
        if (this.onclose) {
            if (this.isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {
                this.onclose(new Error("WebSocket closed with status code: " + event.code + " (" + event.reason + ")."));
            }
            else if (event instanceof Error) {
                this.onclose(event);
            }
            else {
                this.onclose();
            }
        }
    };
    WebSocketTransport.prototype.isCloseEvent = function (event) {
        return event && typeof event.wasClean === "boolean" && typeof event.code === "number";
    };
    return WebSocketTransport;
}());
exports.WebSocketTransport = WebSocketTransport;
//# sourceMappingURL=WebSocketTransport.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\WebSocketTransport.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./ILogger":12,"./ITransport":13,"./Utils":20,"buffer":25,"e/U+97":27}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Errors_1 = require("./Errors");
var HttpClient_1 = require("./HttpClient");
var ILogger_1 = require("./ILogger");
var XhrHttpClient = /** @class */ (function (_super) {
    __extends(XhrHttpClient, _super);
    function XhrHttpClient(logger) {
        var _this = _super.call(this) || this;
        _this.logger = logger;
        return _this;
    }
    /** @inheritDoc */
    XhrHttpClient.prototype.send = function (request) {
        var _this = this;
        // Check that abort was not signaled before calling send
        if (request.abortSignal && request.abortSignal.aborted) {
            return Promise.reject(new Errors_1.AbortError());
        }
        if (!request.method) {
            return Promise.reject(new Error("No method defined."));
        }
        if (!request.url) {
            return Promise.reject(new Error("No url defined."));
        }
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(request.method, request.url, true);
            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;
            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            // Explicitly setting the Content-Type header for React Native on Android platform.
            xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
            var headers = request.headers;
            if (headers) {
                Object.keys(headers)
                    .forEach(function (header) {
                    xhr.setRequestHeader(header, headers[header]);
                });
            }
            if (request.responseType) {
                xhr.responseType = request.responseType;
            }
            if (request.abortSignal) {
                request.abortSignal.onabort = function () {
                    xhr.abort();
                    reject(new Errors_1.AbortError());
                };
            }
            if (request.timeout) {
                xhr.timeout = request.timeout;
            }
            xhr.onload = function () {
                if (request.abortSignal) {
                    request.abortSignal.onabort = null;
                }
                if (xhr.status >= 200 && xhr.status < 300) {
                    resolve(new HttpClient_1.HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));
                }
                else {
                    reject(new Errors_1.HttpError(xhr.statusText, xhr.status));
                }
            };
            xhr.onerror = function () {
                _this.logger.log(ILogger_1.LogLevel.Warning, "Error from HTTP request. " + xhr.status + ": " + xhr.statusText + ".");
                reject(new Errors_1.HttpError(xhr.statusText, xhr.status));
            };
            xhr.ontimeout = function () {
                _this.logger.log(ILogger_1.LogLevel.Warning, "Timeout from HTTP request.");
                reject(new Errors_1.TimeoutError());
            };
            xhr.send(request.content || "");
        });
    };
    return XhrHttpClient;
}(HttpClient_1.HttpClient));
exports.XhrHttpClient = XhrHttpClient;
//# sourceMappingURL=XhrHttpClient.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\XhrHttpClient.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./Errors":4,"./HttpClient":7,"./ILogger":12,"buffer":25,"e/U+97":27}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var Errors_1 = require("./Errors");
exports.AbortError = Errors_1.AbortError;
exports.HttpError = Errors_1.HttpError;
exports.TimeoutError = Errors_1.TimeoutError;
var HttpClient_1 = require("./HttpClient");
exports.HttpClient = HttpClient_1.HttpClient;
exports.HttpResponse = HttpClient_1.HttpResponse;
var DefaultHttpClient_1 = require("./DefaultHttpClient");
exports.DefaultHttpClient = DefaultHttpClient_1.DefaultHttpClient;
var HubConnection_1 = require("./HubConnection");
exports.HubConnection = HubConnection_1.HubConnection;
exports.HubConnectionState = HubConnection_1.HubConnectionState;
var HubConnectionBuilder_1 = require("./HubConnectionBuilder");
exports.HubConnectionBuilder = HubConnectionBuilder_1.HubConnectionBuilder;
var IHubProtocol_1 = require("./IHubProtocol");
exports.MessageType = IHubProtocol_1.MessageType;
var ILogger_1 = require("./ILogger");
exports.LogLevel = ILogger_1.LogLevel;
var ITransport_1 = require("./ITransport");
exports.HttpTransportType = ITransport_1.HttpTransportType;
exports.TransferFormat = ITransport_1.TransferFormat;
var Loggers_1 = require("./Loggers");
exports.NullLogger = Loggers_1.NullLogger;
var JsonHubProtocol_1 = require("./JsonHubProtocol");
exports.JsonHubProtocol = JsonHubProtocol_1.JsonHubProtocol;
var Subject_1 = require("./Subject");
exports.Subject = Subject_1.Subject;
var Utils_1 = require("./Utils");
exports.VERSION = Utils_1.VERSION;
//# sourceMappingURL=index.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs\\index.js","/..\\..\\node_modules\\@microsoft\\signalr\\dist\\cjs")
},{"./DefaultHttpClient":2,"./Errors":4,"./HttpClient":7,"./HubConnection":9,"./HubConnectionBuilder":10,"./IHubProtocol":11,"./ILogger":12,"./ITransport":13,"./JsonHubProtocol":14,"./Loggers":15,"./Subject":18,"./Utils":20,"buffer":25,"e/U+97":27}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")
},{"buffer":25,"e/U+97":27}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")
},{"base64-js":24,"buffer":25,"e/U+97":27,"ieee754":26}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")
},{"buffer":25,"e/U+97":27}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")
},{"buffer":25,"e/U+97":27}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AskDialog = exports.AskDialogProps = void 0;
var random_1 = require("../util/random");
var AskDialogProps = /** @class */ (function () {
    function AskDialogProps() {
    }
    return AskDialogProps;
}());
exports.AskDialogProps = AskDialogProps;
var AskDialog = /** @class */ (function () {
    function AskDialog(props) {
        this.props = props;
    }
    AskDialog.prototype.show = function () {
        var _this = this;
        var allowButtonId = "allow-" + random_1.randomSessonId();
        var denyButtonId = "deny-" + random_1.randomSessonId();
        var content = this.props.message + "\n            <p>\n                <a href=\"#\" id=\"" + allowButtonId + "\" class=\"btn btn-sm\">Accept</button>\n                <a href=\"#\" id=\"" + denyButtonId + "\" class=\"btn btn-sm\">Deny</button>\n            </p>";
        $.toast({
            heading: this.props.title,
            text: content,
            showHideTransition: 'slide',
            hideAfter: false,
            bgColor: this.props.isWarning ? "#800000" : "#164157",
            icon: this.props.icon,
            stack: 5,
            loader: false,
            afterShown: function () {
                _this.allowButtonElement = document.getElementById(allowButtonId);
                _this.denyButtonElement = document.getElementById(denyButtonId);
                _this.root = $(_this.allowButtonElement).closest(".jq-toast-single")[0];
                _this.attachHandlers();
            }
        });
    };
    AskDialog.prototype.attachHandlers = function () {
        var _this = this;
        this.allowButtonElement.addEventListener('click', function () {
            if (typeof _this.props.allowCallback === "function")
                _this.props.allowCallback(_this.props.param);
            (_this.root).remove();
        });
        this.denyButtonElement.addEventListener('click', function () {
            if (typeof _this.props.denyCallback === "function") {
                _this.props.denyCallback(_this.props.param);
            }
            $(_this.root).remove();
        });
    };
    return AskDialog;
}());
exports.AskDialog = AskDialog;
//# sourceMappingURL=AskDialog.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\AskDialog.js","/components")
},{"../util/random":54,"buffer":25,"e/U+97":27}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChattingWidget = exports.ChattingPanelProps = void 0;
var FileReceiver_1 = require("../file/FileReceiver");
var FileSender_1 = require("../file/FileSender");
var random_1 = require("../util/random");
var snippet_1 = require("../util/snippet");
var TimeUtil_1 = require("../util/TimeUtil");
var ChattingPanelProps = /** @class */ (function () {
    function ChattingPanelProps() {
    }
    return ChattingPanelProps;
}());
exports.ChattingPanelProps = ChattingPanelProps;
var ChattingWidget = /** @class */ (function () {
    function ChattingWidget() {
        this.unreadCount = 0;
        this.isPrivate = false;
        this.nameColors = [];
        this.remainColors = [];
        this.fileSendingPool = new Map();
        this.fileReceivingPool = new Map();
    }
    ChattingWidget.prototype.init = function (props) {
        this.props = props;
        this.root = document.getElementById("sideToolbarContainer");
        this.closeButton = document.querySelector(".chat-close-button");
        this.inputField = document.querySelector("#chat-input #usermsg");
        this.sendButton = document.querySelector(".send-button");
        this.filesendButton = document.querySelector(".file-share-button");
        this.fileElement = document.getElementById("file-selector");
        this.fileSendingPanel = document.getElementById("file-sending");
        this.privatePanel = document.querySelector("#chat-recipient");
        this.privateLabelElement = $(this.privatePanel).find(">span")[0];
        this.privateCloseElement = $(this.privatePanel).find(">div")[0];
        this.nameColors.push("#00bfff"); //deepskyblue
        this.nameColors.push("#9acd32"); //yellowgreen
        this.nameColors.push("#d2691e"); //chocolate
        this.nameColors.push("#ee82ee"); //violet
        this.nameColors.push("#6495ed"); //cornflowerblue
        this.nameColors.push("#ffd700"); //gold
        this.nameColors.push("#808000"); //olive
        this.nameColors.push("#cd853f"); //peru
        this.remainColors = __spreadArray([], this.nameColors);
        this.nameColorMap = new Map();
        this.attachEventHandlers();
        this.open(this.opened);
    };
    ChattingWidget.prototype.attachEventHandlers = function () {
        var _this_1 = this;
        $(this.closeButton).on('click', function () {
            _this_1.open(false);
        });
        $(this.inputField).keypress(function (e) {
            if ((e.keyCode || e.which) == 13) { //Enter keycode
                if (!e.shiftKey) {
                    e.preventDefault();
                    _this_1.onSend();
                }
            }
        });
        $(this.sendButton).on('click', function () {
            _this_1.onSend();
        });
        var _this = this;
        $(".smileyContainer").click(function () {
            var id = $(this).attr("id");
            var imoname = _this.idToEmoname(id);
            console.log(imoname);
            var sendel = $("#usermsg");
            var sms = sendel.val();
            sms += imoname;
            sendel.val(sms);
            //var el = $(".smileys-panel");
            //el.removeClass("show-smileys");
            //el.addClass("hide-smileys");
            sendel.focus();
        });
        $("#smileys").click(function () {
            var el = $(".smileys-panel");
            if (el.hasClass("hide-smileys")) {
                el.removeClass("hide-smileys");
                el.addClass("show-smileys");
            }
            else {
                el.removeClass("show-smileys");
                el.addClass("hide-smileys");
            }
        });
        $(this.privateCloseElement).click(function (_) {
            _this_1.clearPrivateState();
        });
        $(this.filesendButton).click(function (_) {
            $(_this_1.fileElement).click();
        });
        $(this.fileElement).on("change", function (_) {
            _this_1.sendFile();
        });
    };
    ChattingWidget.prototype.open = function (opened) {
        if (opened) {
            $("#video-panel").addClass("shift-right");
            $("#new-toolbox").addClass("shift-right");
            $(this.root).removeClass("invisible");
            $(this.inputField).focus();
            //$(".toolbox-icon", this.props.chatOpenButton).addClass("toggled");
        }
        else {
            $("#video-panel").removeClass("shift-right");
            $("#new-toolbox").removeClass("shift-right");
            $(this.root).addClass("invisible");
            //$(".toolbox-icon", this.props.chatOpenButton).removeClass("toggled");
        }
        this.unreadCount = 0;
        this.props.showUnreadBadge(false);
        this.opened = opened;
        this.props.openCallback();
    };
    ChattingWidget.prototype.clearInput = function () {
        $(this.inputField).val('');
    };
    ChattingWidget.prototype.toggleOpen = function () {
        this.opened = !this.opened;
        this.open(this.opened);
    };
    ChattingWidget.prototype.onSend = function () {
        var msg = $(this.inputField).val().toString().trim();
        this.clearInput();
        if (!msg)
            return;
        msg = this.emonameToEmoicon(msg);
        var time = TimeUtil_1.getCurTime();
        var privateClass = this.isPrivate ? "private" : "";
        var privateDetail = "";
        if (this.isPrivate) {
            privateDetail = "<div style=\"color:#778899\">private: " + this.privateSenderName + "</div>";
        }
        var el = $(".smileys-panel");
        el.removeClass("show-smileys");
        el.addClass("hide-smileys");
        var sel = $("#chatconversation div.chat-message-group:last-child");
        if (sel.hasClass("local")) {
            sel.find(".timestamp").remove();
            sel.append("<div class= \"chatmessage-wrapper\" >                            <div class=\"chatmessage " + privateClass + "\">                                <div class=\"replywrapper\">                                    <div class=\"messagecontent\">                                        <div class=\"usermessage\"> " + msg + " </div>                                        " + privateDetail + "\n                                    </div>                                </div>                            </div>                            <div class=\"timestamp\"> " + time + " </div>                        </div >");
        }
        else {
            $("#chatconversation").append("<div class=\"chat-message-group local\">                     <div class= \"chatmessage-wrapper\" >                        <div class=\"chatmessage " + privateClass + "\">                            <div class=\"replywrapper\">                                <div class=\"messagecontent\">                                    <div class=\"usermessage\"> " + msg + " </div>                                    " + privateDetail + "\n                                </div>                            </div>                        </div>                        <div class=\"timestamp\"> " + time + " </div>                    </div >                </div>");
        }
        this.scrollToBottom();
        if (this.isPrivate) {
            this.props.sendPrivateChat(this.privateSenderId, msg);
        }
        else {
            this.props.sendChat(msg);
        }
    };
    //chat
    ChattingWidget.prototype.receiveMessage = function (id, username, message, isPrivate) {
        if (isPrivate === void 0) { isPrivate = false; }
        //update unread count
        if (!this.opened) {
            this.unreadCount++;
            this.props.setUnreadCount(this.unreadCount);
            this.props.showUnreadBadge(true);
        }
        //update ui
        var emoMessage = this.emonameToEmoicon(message);
        var nameColor = this.getNameColor(username);
        var privateClass = isPrivate ? "private" : "";
        var replyElem = "";
        if (isPrivate) {
            replyElem = "\n                <span class=\"jitsi-icon\" jitsi-id=\"" + id + "\" jitsi-name=\"" + username + "\">\n                    <svg height=\"22\" width=\"22\" viewBox=\"0 0 36 36\">\n                        <path d=\"M30,29a1,1,0,0,1-.81-.41l-2.12-2.92A18.66,18.66,0,0,0,15,18.25V22a1,1,0,0,1-1.6.8l-12-9a1,1,0,0,1,0-1.6l12-9A1,1,0,0,1,15,4V8.24A19,19,0,0,1,31,27v1a1,1,0,0,1-.69.95A1.12,1.12,0,0,1,30,29ZM14,16.11h.1A20.68,20.68,0,0,1,28.69,24.5l.16.21a17,17,0,0,0-15-14.6,1,1,0,0,1-.89-1V6L3.67,13,13,20V17.11a1,1,0,0,1,.33-.74A1,1,0,0,1,14,16.11Z\"></path>\n                    </svg>\n                </span>";
        }
        var $chatitem = $("<div class=\"chat-message-group remote\">         <div class= \"chatmessage-wrapper\" >                <div class=\"chatmessage " + privateClass + "\">                    <div class=\"replywrapper\">                        <div class=\"messagecontent\">                            <div class=\"display-name\" style=\"color:" + nameColor + "\">" + username + replyElem + '</div>\
                            <div class="usermessage">' + emoMessage + '</div>\
                        </div>\
                    </div>\
                </div>\
                <div class="timestamp">' + TimeUtil_1.getCurTime() + '</div>\
            </div >\
        </div>');
        $("#chatconversation").append($chatitem);
        if (isPrivate) {
            var _this_2 = this;
            $chatitem.find(".jitsi-icon").click(function (e) {
                var id = $(this).attr("jitsi-id");
                var name = $(this).attr("jitsi-name");
                _this_2.setPrivateState(id, name);
            });
        }
        this.scrollToBottom();
        if (isPrivate)
            this.setPrivateState(id, username);
    };
    ChattingWidget.prototype.scrollToBottom = function () {
        var overheight = 0;
        $(".chat-message-group").each(function () {
            overheight += $(this).height();
        });
        var limit = $('#chatconversation').height();
        var pos = overheight - limit;
        $("#chatconversation").animate({ scrollTop: pos }, 200);
    };
    ChattingWidget.prototype.idToEmoname = function (id) {
        if (id == 'smiley1')
            return ':)';
        if (id == 'smiley2')
            return ':(';
        if (id == 'smiley3')
            return ':D';
        if (id == 'smiley4')
            return ':+1:';
        if (id == 'smiley5')
            return ':P';
        if (id == 'smiley6')
            return ':wave:';
        if (id == 'smiley7')
            return ':blush:';
        if (id == 'smiley8')
            return ':slightly_smiling_face:';
        if (id == 'smiley9')
            return ':scream:';
        if (id == 'smiley10')
            return ':*';
        if (id == 'smiley11')
            return ':-1:';
        if (id == 'smiley12')
            return ':mag:';
        if (id == 'smiley13')
            return ':heart:';
        if (id == 'smiley14')
            return ':innocent:';
        if (id == 'smiley15')
            return ':angry:';
        if (id == 'smiley16')
            return ':angel:';
        if (id == 'smiley17')
            return ';(';
        if (id == 'smiley18')
            return ':clap:';
        if (id == 'smiley19')
            return ';)';
        if (id == 'smiley20')
            return ':beer:';
    };
    ChattingWidget.prototype.emonameToEmoicon = function (sms) {
        var smsout = sms;
        smsout = smsout.replace(':)', '<span class="smiley" style="width: 20px; height:20px;">😃</span>');
        smsout = smsout.replace(':(', '<span class="smiley">😦</span>');
        smsout = smsout.replace(':D', '<span class="smiley">😄</span>');
        smsout = smsout.replace(':+1:', '<span class="smiley">👍</span>');
        smsout = smsout.replace(':P', '<span class="smiley">😛</span>');
        smsout = smsout.replace(':wave:', '<span class="smiley">👋</span>');
        smsout = smsout.replace(':blush:', '<span class="smiley">😊</span>');
        smsout = smsout.replace(':slightly_smiling_face:', '<span class="smiley">🙂</span>');
        smsout = smsout.replace(':scream:', '<span class="smiley">😱</span>');
        smsout = smsout.replace(':*', '<span class="smiley">😗</span>');
        smsout = smsout.replace(':-1:', '<span class="smiley">👎</span>');
        smsout = smsout.replace(':mag:', '<span class="smiley">🔍</span>');
        smsout = smsout.replace(':heart:', '<span class="smiley">❤️</span>');
        smsout = smsout.replace(':innocent:', '<span class="smiley">😇</span>');
        smsout = smsout.replace(':angry:', '<span class="smiley">😠</span>');
        smsout = smsout.replace(':angel:', '<span class="smiley">👼</span>');
        smsout = smsout.replace(';(', '<span class="smiley">😭</span>');
        smsout = smsout.replace(':clap:', '<span class="smiley">👏</span>');
        smsout = smsout.replace(';)', '<span class="smiley">😉</span>');
        smsout = smsout.replace(':beer:', '<span class="smiley">🍺</span>');
        return smsout;
    };
    ChattingWidget.prototype.getNameColor = function (name) {
        if (this.nameColorMap.has(name))
            return this.nameColorMap.get(name);
        if (this.remainColors.length <= 0)
            this.remainColors = __spreadArray([], this.nameColors);
        //[min, max)
        var randIndex = snippet_1.random(0, this.remainColors.length);
        var randomColor = this.remainColors[randIndex];
        this.remainColors.splice(randIndex, 1);
        this.nameColorMap.set(name, randomColor);
        return randomColor;
    };
    ChattingWidget.prototype.setPrivateState = function (jitsiId, name) {
        this.isPrivate = true;
        this.privateSenderId = jitsiId;
        this.privateSenderName = name;
        this.privatePanel.style.display = "flex";
        this.privateLabelElement.innerHTML = "Private message to " + name;
    };
    ChattingWidget.prototype.clearPrivateState = function () {
        this.isPrivate = false;
        this.privateSenderId = null;
        this.privatePanel.style.display = "none";
    };
    ChattingWidget.prototype.sendFile = function () {
        var props = new FileSender_1.FileSenderProps();
        props.fileElement = this.fileElement;
        props.fileSendingPanel = this.fileSendingPanel;
        props.sessionId = random_1.randomSessonId();
        props.onError = this.props.onFileSendErrror;
        props.onFinished = this.props.onFileSendFinished;
        props.sendFileData = this.props.sendFileData;
        props.sendFileMeta = this.props.sendFileMeta;
        var fileSender = new FileSender_1.FileSender(props);
        fileSender.sendFile();
    };
    ChattingWidget.prototype.onFileMeta = function (sessionId, meta, senderId, senderName) {
        var props = new FileReceiver_1.FileReceiverProps();
        props.meta = meta;
        props.senderId = senderId;
        props.senderName = senderName;
        props.onFinished = this.onFileReceiveFinished.bind(this);
        props.onError = this.onFileReceiveError.bind(this);
        props.addChatItem = this.receiveMessage.bind(this);
        var receiver = new FileReceiver_1.FileReceiver(props);
        this.fileReceivingPool.set(sessionId, receiver);
        receiver.show();
    };
    ChattingWidget.prototype.onFileData = function (sessionId, data) {
        var receiver = this.fileReceivingPool.get(sessionId);
        if (receiver)
            receiver.readFileData(data);
    };
    ChattingWidget.prototype.onFileReceiveError = function (sessionId, filename, message) {
        this.fileReceivingPool.delete(sessionId);
        this.props.onFileReceiveError(filename, message);
    };
    ChattingWidget.prototype.onFileReceiveFinished = function (sessionId, filename, message) {
        this.fileReceivingPool.delete(sessionId);
        this.props.onFileReceiveFinished(filename, message);
    };
    ChattingWidget.prototype.openPrivateChat = function (jitsiId, name) {
        this.open(true);
        this.setPrivateState(jitsiId, name);
    };
    return ChattingWidget;
}());
exports.ChattingWidget = ChattingWidget;
//# sourceMappingURL=ChattingPanel.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\ChattingPanel.js","/components")
},{"../file/FileReceiver":42,"../file/FileSender":43,"../util/TimeUtil":53,"../util/random":54,"../util/snippet":55,"buffer":25,"e/U+97":27}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetingDescriptionWidget = void 0;
var MeetingDescriptionWidget = /** @class */ (function () {
    function MeetingDescriptionWidget() {
        //state
        this.firstUpdate = true;
        this.time = "";
        this.subject = "";
        this.root = document.querySelector(".subject");
        this.subjectElement = document.querySelector(".subject-text");
        this.timestampElement = document.querySelector(".subject-timer");
    }
    MeetingDescriptionWidget.prototype.updateTime = function (time) {
        this.time = time.trim();
        this.timestampElement.innerHTML = this.time;
        this.showOnInit();
    };
    MeetingDescriptionWidget.prototype.setSubject = function (subject, hostName) {
        this.subject = subject.trim();
        var subjectLabel = this.subject;
        if (hostName && hostName.trim().length > 0)
            subjectLabel += "(" + hostName.trim() + ")";
        this.subjectElement.innerHTML = subjectLabel;
        this.showOnInit();
    };
    MeetingDescriptionWidget.prototype.showOnInit = function () {
        if (this.firstUpdate && this.time.length > 0 && this.subject.length > 0) {
            this.firstUpdate = false;
            this.fadeIn();
        }
    };
    MeetingDescriptionWidget.prototype.fadeIn = function () {
        $(this.root).addClass("visible");
    };
    MeetingDescriptionWidget.prototype.fadeOut = function () {
        $(this.root).removeClass("visible");
    };
    return MeetingDescriptionWidget;
}());
exports.MeetingDescriptionWidget = MeetingDescriptionWidget;
//# sourceMappingURL=MeetingDescriptionWidget.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\MeetingDescriptionWidget.js","/components")
},{"buffer":25,"e/U+97":27}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParticipantListWidget = exports.ParticipantListPanelProps = void 0;
var snippet_1 = require("../util/snippet");
var vector_icon_1 = require("./vector_icon");
var ParticipantItemProps = /** @class */ (function () {
    function ParticipantItemProps() {
    }
    return ParticipantItemProps;
}());
var ParticipantItem = /** @class */ (function () {
    function ParticipantItem(props) {
        this.props = props;
        this.muteCamera = this.props.muteCamera;
        this.muteMic = this.props.muteMic;
        this.init();
    }
    ParticipantItem.prototype.init = function () {
        var _this = this;
        var body = "\n            <div class=\"jitsi-participant\">\n                <div class=\"participant-avatar\">\n                    <div class=\"avatar  userAvatar w-40px h-40px\" style=\"background-color: rgba(234, 255, 128, 0.4);\">\n                        <svg class=\"avatar-svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                            <text dominant-baseline=\"central\" fill=\"rgba(255,255,255,.6)\" font-size=\"40pt\" text-anchor=\"middle\" x=\"50\" y=\"50\">?</text>\n                        </svg>\n                    </div>\n                </div>\n                <div class=\"participant-content\">\n                    <span class=\"name\" class=\"fs-2 fw-bolder\">?</span>\n                    <span class=\"spacer\"></span>\n                    <div class=\"jitsi-icon camera-toggle-button\">\n                        <svg id=\"camera-disabled\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                            <path d=\"\"></path>\n                        </svg>\n                    </div>\n                    <div class=\"jitsi-icon mic-toggle-button\">\n                        <svg id=\"mic-disabled\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                            <path d=\"\"></path>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n        ";
        var $root = $(body);
        this.rootElement = $root[0];
        this.avatarElement = $root.find(".avatar")[0];
        this.avatarTextElement = $(this.avatarElement).find("text")[0];
        this.nameElement = $root.find(".name")[0];
        this.cameraButtonElement = $root.find(".camera-toggle-button")[0];
        this.micButtonElement = $root.find(".mic-toggle-button")[0];
        this.cameraIconElement = $(this.cameraButtonElement).find("path")[0];
        this.micIconElement = $(this.micButtonElement).find("path")[0];
        //avatar
        this.avatarTextElement.innerHTML = snippet_1.avatarName(this.props.name);
        var avatarColors = [
            "rgba(234, 255, 128, 0.4)",
            "rgba(114, 91, 60, 1.0)",
            "rgba(63, 65, 113, 1.0)",
            "rgba(56, 105, 91, 1.0)"
        ];
        $(this.avatarElement).css("background-color", avatarColors[snippet_1.random(0, avatarColors.length)]);
        //name
        if (this.props.me)
            $(this.nameElement).html(this.props.name + " (Me)");
        else
            $(this.nameElement).html(this.props.name);
        //icon
        this.updateCameraIcon();
        this.updateMicIcon();
        $(this.cameraButtonElement).on('click', function (_) {
            _this.onToggleCamera();
        });
        $(this.micButtonElement).on('click', function (_) {
            _this.onToggleMic();
        });
    };
    ParticipantItem.prototype.element = function () {
        return this.rootElement;
    };
    ParticipantItem.prototype.removeSelf = function () {
        $(this.rootElement).remove();
    };
    ParticipantItem.prototype.onToggleCamera = function () {
        if (!this.isHost)
            return;
        //this.muteCamera = !this.muteCamera;
        //this.updateCameraIcon();
        this.props.onMuteCamera(this.props.jitsiId, !this.muteCamera);
    };
    ParticipantItem.prototype.onToggleMic = function () {
        if (!this.isHost)
            return;
        //this.muteMic = !this.muteMic;
        //this.updateMicIcon();
        this.props.onMuteMic(this.props.jitsiId, !this.muteMic);
    };
    ParticipantItem.prototype.blockMic = function () {
        if (!this.muteMic)
            this.onToggleMic();
    };
    ParticipantItem.prototype.setMuteAudio = function (use) {
        this.muteMic = use;
        this.updateMicIcon();
    };
    ParticipantItem.prototype.setMuteCamera = function (use) {
        this.muteCamera = use;
        this.updateCameraIcon();
    };
    ParticipantItem.prototype.setRole = function (isHost) {
        this.isHost = isHost;
    };
    ParticipantItem.prototype.updateCameraIcon = function () {
        var icon = this.muteCamera ? vector_icon_1.VectorIcon.VIDEO_MUTE_ICON : vector_icon_1.VectorIcon.VIDEO_UNMUTE_ICON;
        $(this.cameraIconElement).attr("d", icon);
    };
    ParticipantItem.prototype.updateMicIcon = function () {
        var icon = this.muteMic ? vector_icon_1.VectorIcon.AUDIO_MUTE_ICON : vector_icon_1.VectorIcon.AUDIO_UNMUTE_ICON;
        $(this.micIconElement).attr("d", icon);
    };
    return ParticipantItem;
}());
var ParticipantListPanelProps = /** @class */ (function () {
    function ParticipantListPanelProps() {
    }
    return ParticipantListPanelProps;
}());
exports.ParticipantListPanelProps = ParticipantListPanelProps;
var ParticipantListWidget = /** @class */ (function () {
    function ParticipantListWidget() {
        //states
        this.participantItemMap = new Map();
        this.isHost = false;
        this.rootElement = document.getElementById("participants-list");
        var $root = $(this.rootElement);
        this.participantCountElement = $root.find("#participant-count")[0];
        this.participantListElement = $root.find("#participants-list-body")[0];
        this.muteAllButtonElement = $root.find("#participants-list-footer>.btn")[0];
        this.toggleCopyJoiningInfoElement = document.querySelector("#copy-joining-info");
        this.joiningInfoElement = document.querySelector("#joining-info");
    }
    ParticipantListWidget.prototype.init = function (props) {
        this.props = props;
        this.updateParticipantCount();
        this.attachHandlers();
    };
    ParticipantListWidget.prototype.attachHandlers = function () {
        var _this = this;
        $(this.muteAllButtonElement).on('click', function () {
            if (_this.isHost)
                _this.participantItemMap.forEach(function (participantItem, key) {
                    participantItem.blockMic();
                });
        });
        $(this.toggleCopyJoiningInfoElement).on('click', function (_) {
            _this.props.toggleCopyJoiningInfo();
        });
    };
    ParticipantListWidget.prototype.addParticipant = function (jitsiId, name, me, muteCamera, muteMic) {
        if (this.participantItemMap.has(jitsiId)) {
            this.removeParticipant(jitsiId);
        }
        var props = new ParticipantItemProps();
        props.jitsiId = jitsiId;
        props.name = name;
        props.me = me;
        props.muteCamera = muteCamera;
        props.muteMic = muteMic;
        props.onMuteCamera = this.props.onMuteCamera;
        props.onMuteMic = this.props.onMuteMic;
        var item = new ParticipantItem(props);
        item.setRole(this.isHost);
        this.participantItemMap.set(jitsiId, item);
        this.updateParticipantCount();
        if (me) {
            $(this.participantListElement).prepend(item.element());
        }
        else {
            $(this.participantListElement).append(item.element());
        }
    };
    ParticipantListWidget.prototype.removeParticipant = function (jitsiId) {
        if (!this.participantItemMap.has(jitsiId))
            return;
        this.participantItemMap.get(jitsiId).removeSelf();
        this.participantItemMap.delete(jitsiId);
        this.updateParticipantCount();
    };
    ParticipantListWidget.prototype.updateJoiningInfo = function (info) {
        this.joiningInfoElement.innerHTML = info;
    };
    ParticipantListWidget.prototype.updateParticipantCount = function () {
        this.participantCountElement.innerHTML = "" + this.participantItemMap.size;
    };
    ParticipantListWidget.prototype.setMuteCamera = function (jitsiId, muteCamera) {
        var item = this.participantItemMap.get(jitsiId);
        if (item)
            item.setMuteCamera(muteCamera);
    };
    ParticipantListWidget.prototype.setMuteMic = function (jitsiId, muteMic) {
        var item = this.participantItemMap.get(jitsiId);
        if (item)
            item.setMuteAudio(muteMic);
    };
    ParticipantListWidget.prototype.updateByRole = function (isHost) {
        this.isHost = isHost;
        if (isHost)
            $(this.rootElement).addClass("is-host");
        else
            $(this.rootElement).removeClass("is-host");
        this.muteAllButtonElement.style.visibility = isHost ? "visible" : "hidden";
        this.participantItemMap.forEach(function (participantItem, key) {
            participantItem.setRole(isHost);
        });
    };
    return ParticipantListWidget;
}());
exports.ParticipantListWidget = ParticipantListWidget;
//# sourceMappingURL=ParticipantListPanel.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\ParticipantListPanel.js","/components")
},{"../util/snippet":55,"./vector_icon":36,"buffer":25,"e/U+97":27}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingDialog = exports.SettingDialogProps = void 0;
var MediaType_1 = require("../enum/MediaType");
var ActiveDevices_1 = require("../model/ActiveDevices");
var SettingDialogProps = /** @class */ (function () {
    function SettingDialogProps() {
    }
    return SettingDialogProps;
}());
exports.SettingDialogProps = SettingDialogProps;
var SettingDialog = /** @class */ (function () {
    function SettingDialog() {
        this.JitsiMeetJS = window.JitsiMeetJS;
        this.audioTrackError = null;
        this.videoTrackError = null;
        this.activeCameraDeviceId = null;
        this.activeMicDeviceId = null;
        this.activeSpeakerDeviceId = null;
        this.localTracks = [];
    }
    SettingDialog.prototype.init = function (props) {
        this.props = props;
        this.dialog = document.querySelector(".setting-dialog-wrapper");
        this.showButton = document.querySelector(".setting-dialog-wrapper>button");
        $(this.dialog).addClass("d-none");
        this.okButton = document.querySelector("#setting-dialog-ok-button");
        this.closeButton = document.querySelector("#setting-dialog-cancel-button");
        this.videoPreviewElem = document.getElementById("camera-preview");
        this.audioPreviewElem = document.getElementById("mic-preview");
        this.cameraListElem = document.getElementById("camera-list");
        this.micListElem = document.getElementById("mic-list");
        this.speakerListElem = document.getElementById("speaker-list");
        this.attachEventHandlers();
        this.refreshDeviceList();
    };
    SettingDialog.prototype.show = function () {
        $(this.dialog).removeClass("d-none");
        $(this.showButton).trigger("click");
    };
    SettingDialog.prototype.attachEventHandlers = function () {
        var _this_1 = this;
        var _this = this;
        $(this.cameraListElem).off('change').on('change', function () {
            _this.onCameraChanged($(this).val());
        });
        $(this.micListElem).off('change').on('change', function () {
            _this.onMicChanged($(this).val());
        });
        $(this.speakerListElem).off('change').on('change', function () {
            _this.onSpeakerChanged($(this).val());
        });
        $(this.okButton).off('click').on('click', function () {
            _this_1.onOK();
        });
    };
    SettingDialog.prototype.refreshDeviceList = function () {
        var _this_1 = this;
        this.JitsiMeetJS.mediaDevices.enumerateDevices(function (devices) {
            _this_1.cameraList = devices.filter(function (d) { return d.kind === 'videoinput'; });
            _this_1.micList = devices.filter(function (d) { return d.kind === 'audioinput'; });
            _this_1.speakerList = devices.filter(function (d) { return d.kind === 'audiooutput'; });
            _this_1.renderDevices();
        });
    };
    SettingDialog.prototype.renderDevices = function () {
        var _this_1 = this;
        this.activeCameraDeviceId = this.props.curDevices.cameraId;
        this.activeMicDeviceId = this.props.curDevices.micId;
        this.activeSpeakerDeviceId = this.props.curDevices.speakerId;
        this.clearDOMElement(this.cameraListElem);
        this.cameraList.forEach(function (camera) {
            var selected = (_this_1.activeCameraDeviceId && camera.deviceId === _this_1.activeCameraDeviceId)
                ? "selected" : "";
            $(_this_1.cameraListElem).append("<option value=\"" + camera.deviceId + "\" " + selected + ">" + camera.label + "</option>");
        });
        this.clearDOMElement(this.micListElem);
        this.micList.forEach(function (mic) {
            var selected = (_this_1.activeMicDeviceId && mic.deviceId === _this_1.activeMicDeviceId)
                ? "selected" : "";
            $(_this_1.micListElem).append("<option value=\"" + mic.deviceId + "\" " + selected + ">" + mic.label + "</option>");
        });
        this.clearDOMElement(this.speakerListElem);
        this.speakerList.forEach(function (speaker) {
            var selected = (_this_1.activeSpeakerDeviceId && speaker.deviceId === _this_1.activeSpeakerDeviceId)
                ? "selected" : "";
            $(_this_1.speakerListElem).append("<option value=\"" + speaker.deviceId + "\" " + selected + ">" + speaker.label + "</option>");
        });
        $(".form-select").select2();
        this.createLocalTracks(this.activeCameraDeviceId, this.activeMicDeviceId)
            .then(function (tracks) {
            tracks.forEach(function (t) {
                if (t.getType() === MediaType_1.MediaType.VIDEO) {
                    t.attach(_this_1.videoPreviewElem);
                }
                else if (t.getType() === MediaType_1.MediaType.AUDIO) {
                    t.attach(_this_1.audioPreviewElem);
                }
            });
            _this_1.localTracks = tracks;
        });
    };
    SettingDialog.prototype.initCurrentDevices = function () {
        var _this_1 = this;
        var _this = this;
        $("option", this.cameraListElem).each(function (_) {
            if ($(_this_1).val() === _this.props.curDevices.micId)
                $(_this_1).attr("selected", "selected");
        });
    };
    SettingDialog.prototype.clearDOMElement = function (elem) {
        while (elem.firstChild) {
            elem.removeChild(elem.firstChild);
        }
    };
    SettingDialog.prototype.createLocalTracks = function (cameraDeviceId, micDeviceId) {
        var _this_1 = this;
        this.videoTrackError = null;
        this.audioTrackError = null;
        if (cameraDeviceId != null && micDeviceId != null) {
            return this.JitsiMeetJS.createLocalTracks({
                devices: ['audio', 'video'],
                cameraDeviceId: cameraDeviceId,
                micDeviceId: micDeviceId
            }).catch(function () { return Promise.all([
                _this_1.createAudioTrack(micDeviceId).then(function (_a) {
                    var stream = _a[0];
                    return stream;
                }),
                _this_1.createVideoTrack(cameraDeviceId).then(function (_a) {
                    var stream = _a[0];
                    return stream;
                })
            ]); }).then(function (tracks) {
                if (_this_1.audioTrackError) {
                    //display error
                }
                if (_this_1.videoTrackError) {
                    //display error
                }
                return tracks.filter(function (t) { return typeof t !== 'undefined'; });
            });
        }
        else if (cameraDeviceId != null) {
            return this.createVideoTrack(cameraDeviceId);
        }
        else if (micDeviceId != null) {
            return this.createAudioTrack(micDeviceId);
        }
        return Promise.resolve([]);
    };
    SettingDialog.prototype.createVideoTrack = function (cameraDeviceId) {
        var _this_1 = this;
        return this.JitsiMeetJS.createLocalTracks({
            devices: ['video'],
            cameraDeviceId: cameraDeviceId,
            micDeviceId: null
        })
            .catch(function (error) {
            _this_1.videoTrackError = error;
            return Promise.resolve([]);
        });
    };
    SettingDialog.prototype.createAudioTrack = function (micDeviceId) {
        var _this_1 = this;
        return (this.JitsiMeetJS.createLocalTracks({
            devices: ['audio'],
            cameraDeviceId: null,
            micDeviceId: micDeviceId
        })
            .catch(function (error) {
            _this_1.audioTrackError = error;
            return Promise.resolve([]);
        }));
    };
    SettingDialog.prototype.onCameraChanged = function (cameraDeviceId) {
        var _this_1 = this;
        this.activeCameraDeviceId = cameraDeviceId;
        this.createLocalTracks(this.activeCameraDeviceId, null)
            .then(function (tracks) {
            var newTrack = tracks.find(function (t) { return t.getType() === MediaType_1.MediaType.VIDEO; });
            //remove existing track
            var oldTrack = _this_1.localTracks.find(function (t) { return t.getType() === MediaType_1.MediaType.VIDEO; });
            if (oldTrack) {
                oldTrack.dispose();
                _this_1.localTracks.splice(_this_1.localTracks.indexOf(oldTrack), 1);
            }
            if (newTrack) {
                _this_1.localTracks.push(newTrack);
                newTrack.attach(_this_1.videoPreviewElem);
            }
        });
    };
    SettingDialog.prototype.onMicChanged = function (micDeviceId) {
        var _this_1 = this;
        this.activeMicDeviceId = micDeviceId;
        this.createLocalTracks(null, this.activeMicDeviceId)
            .then(function (tracks) {
            var newTrack = tracks.find(function (t) { return t.getType() === MediaType_1.MediaType.AUDIO; });
            //remove existing track
            var oldTrack = _this_1.localTracks.find(function (t) { return t.getType() === MediaType_1.MediaType.AUDIO; });
            if (oldTrack) {
                oldTrack.dispose();
                _this_1.localTracks.splice(_this_1.localTracks.indexOf(oldTrack), 1);
            }
            if (newTrack) {
                _this_1.localTracks.push(newTrack);
                newTrack.attach(_this_1.audioPreviewElem);
            }
        });
    };
    SettingDialog.prototype.onSpeakerChanged = function (speakerDeviceId) {
        this.activeSpeakerDeviceId = speakerDeviceId;
        if (this.activeSpeakerDeviceId && this.JitsiMeetJS.mediaDevices.isDeviceChangeAvailable('output')) {
            this.JitsiMeetJS.mediaDevices.setAudioOutputDevice(this.activeSpeakerDeviceId);
        }
        ;
    };
    SettingDialog.prototype.onOK = function () {
        this.closeDialog();
        var newDevices = new ActiveDevices_1.ActiveDevices();
        newDevices.cameraId = this.activeCameraDeviceId;
        newDevices.micId = this.activeMicDeviceId;
        newDevices.speakerId = this.activeSpeakerDeviceId;
        this.props.onDeviceChange(newDevices);
    };
    SettingDialog.prototype.closeDialog = function () {
        $(this.closeButton).trigger("click");
        this.localTracks.forEach(function (track) {
            track.dispose();
        });
    };
    return SettingDialog;
}());
exports.SettingDialog = SettingDialog;
//# sourceMappingURL=SettingDialog.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\SettingDialog.js","/components")
},{"../enum/MediaType":38,"../model/ActiveDevices":47,"buffer":25,"e/U+97":27}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolBar = exports.ToolBarProps = void 0;
var MediaType_1 = require("../enum/MediaType");
var vector_icon_1 = require("./vector_icon");
var ToolBarProps = /** @class */ (function () {
    function ToolBarProps() {
    }
    return ToolBarProps;
}());
exports.ToolBarProps = ToolBarProps;
var ToolBar = /** @class */ (function () {
    function ToolBar(props) {
        this.root = null;
        this.props = props;
        this.root = document.getElementById("new-toolbox");
        this.toolbarTileViewButtonElement = document.querySelector("#tileview");
        this.toolbarMuteAllButtonElement = document.querySelector("#muteall");
        this.toolbarMuteAllVideoButtonElement = document.querySelector("#muteallvideo");
        this.toolbarAudioButtonElement = document.querySelector("#mic-enable");
        this.toolbarVideoButtonElement = document.querySelector("#camera-enable");
        this.toolbarDesktopShareButtonElement = document.querySelector("#share");
        this.toolbarDesktopShareMenuButtonElement = document.querySelector("#sharescreen");
        this.toolbarRecordButtonElement = document.querySelector("#record");
        this.toolbarHandRaiseButtonElement = document.querySelector("#handraise");
        this.toolbarChatButtonElement = document.querySelector("#chat");
        this.toolbarLeaveButtonElement = document.querySelector("#leave");
        this.toolbarSettingButtonElement = document.querySelector("#setting");
        this.chattingUnreadBadge = document.querySelector(".chat-badge");
        this.attachHandlers();
    }
    ToolBar.prototype.attachHandlers = function () {
        var _this = this;
        $(this.toolbarTileViewButtonElement).on('click', function () {
            _this.props.toggleTileView();
        });
        $(this.toolbarMuteAllButtonElement).on('click', function () {
            _this.props.toggleMuteAll();
        });
        $(this.toolbarMuteAllVideoButtonElement).on('click', function () {
            _this.props.toggleMuteAllVideo();
        });
        $(this.toolbarVideoButtonElement).on('click', function () {
            _this.props.toggleVideoMute();
        });
        $(this.toolbarAudioButtonElement).on('click', function () {
            _this.props.toggleAudioMute();
        });
        $(this.toolbarChatButtonElement).on('click', function (_) {
            _this.props.openChatting(true);
        });
        $(this.toolbarDesktopShareButtonElement).on("click", function () {
            _this.props.toggleScreenShare();
        });
        $(this.toolbarDesktopShareMenuButtonElement).on("click", function () {
            _this.props.toggleScreenShare();
        });
        $(this.toolbarRecordButtonElement).on('click', function () {
            _this.props.toggleRecording();
        });
        $(this.toolbarHandRaiseButtonElement).on('click', function () {
            _this.props.toggleHandRaise();
        });
        $(this.toolbarSettingButtonElement).on('click', function () {
            _this.props.openSetting();
        });
        $(this.toolbarLeaveButtonElement).click(function () {
            _this.props.leaveMeeting();
        });
    };
    ToolBar.prototype.update = function (userInfo, localTracks) {
        var audioMuted = false, videoMuted = false;
        var hasAudioTrack = false, hasVideoTrack = false;
        localTracks.forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO) {
                hasVideoTrack = true;
                if (track.isMuted())
                    videoMuted = true;
            }
            else if (track.getType() === MediaType_1.MediaType.AUDIO) {
                hasAudioTrack = true;
                if (track.isMuted())
                    audioMuted = true;
            }
        });
        this.toolbarVideoButtonElement.style.display = hasVideoTrack ? "inline-block" : "";
        this.toolbarDesktopShareButtonElement.style.display = hasVideoTrack ? "inline-block" : "";
        this.toolbarAudioButtonElement.style.display = hasAudioTrack ? "inline-block" : "";
        if (audioMuted) {
            $(this.toolbarAudioButtonElement).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_MUTE_ICON);
            $(this.toolbarAudioButtonElement).addClass("muted");
        }
        else {
            $(this.toolbarAudioButtonElement).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_UNMUTE_ICON);
            $(this.toolbarAudioButtonElement).removeClass("muted");
        }
        if (videoMuted) {
            $(this.toolbarVideoButtonElement).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_MUTE_ICON);
            $(this.toolbarVideoButtonElement).addClass("muted");
        }
        else {
            $(this.toolbarVideoButtonElement).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_UNMUTE_ICON);
            $(this.toolbarVideoButtonElement).removeClass("muted");
        }
    };
    ToolBar.prototype.setScreenShare = function (on) {
        if (on) {
            $(".toolbox-icon", this.toolbarDesktopShareButtonElement).addClass("toggled");
        }
        else {
            $(".toolbox-icon", this.toolbarDesktopShareButtonElement).removeClass("toggled");
        }
    };
    ToolBar.prototype.setRecording = function (on) {
        if (on) {
            $(this.toolbarRecordButtonElement).addClass("live");
        }
        else {
            $(this.toolbarRecordButtonElement).removeClass("live");
        }
    };
    ToolBar.prototype.fadeIn = function () {
        $(this.root).addClass("visible");
    };
    ToolBar.prototype.fadeOut = function () {
        $(this.root).removeClass("visible");
    };
    ToolBar.prototype.showUnreadBadge = function (show) {
        this.chattingUnreadBadge.style.display = !!show ? "flex" : "none";
    };
    ToolBar.prototype.setUnreadCount = function (count) {
        this.chattingUnreadBadge.innerHTML = "" + count;
    };
    ToolBar.prototype.updateByRole = function (isHost) {
        this.toolbarHandRaiseButtonElement.style.display = isHost ? "none" : "inline-block";
        this.toolbarMuteAllButtonElement.style.display = !isHost ? "none" : "block";
        this.toolbarMuteAllVideoButtonElement.style.display = !isHost ? "none" : "block";
    };
    return ToolBar;
}());
exports.ToolBar = ToolBar;
//# sourceMappingURL=ToolBar.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\ToolBar.js","/components")
},{"../enum/MediaType":38,"./vector_icon":36,"buffer":25,"e/U+97":27}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoPanel = exports.VideoPanelProps = void 0;
var MediaType_1 = require("../enum/MediaType");
var UserProperty_1 = require("../enum/UserProperty");
var snippet_1 = require("../util/snippet");
var vector_icon_1 = require("./vector_icon");
var VideoPanelProps = /** @class */ (function () {
    function VideoPanelProps() {
    }
    return VideoPanelProps;
}());
exports.VideoPanelProps = VideoPanelProps;
var VideoPanel = /** @class */ (function () {
    function VideoPanel(props) {
        this.videoElementClass = "video-element";
        this.moderatorClass = "moderator-icon";
        this.audioMuteClass = "audioMuted";
        this.videoMuteClass = "videoMuted";
        this.userNameClass = "displayname";
        this.shortNameClass = "avatar-container";
        this.activeSpeakerClass = "active-speaker";
        this.privateChatClass = "private-chat";
        this.popupMenuButtonClass = "remotevideomenu";
        this.props = props;
        this.panelClass = this.props.panelClass;
        this.fullscreenClass = this.props.fullscreenClass;
        this.popupMenuClass = this.props.popupMenuClass;
        this.Id = ++VideoPanel.nPanelInstanceId;
        this.root = this.create();
        this.videoElem = $("video", this.root)[0];
        this.audioElem = $("audio", this.root)[0];
        this.nameElem = $("." + this.userNameClass, this.root)[0];
        this.avatarNameElem = $("." + this.shortNameClass, this.root)[0];
        //white small icons at the bottom of panel
        this.audioMuteIconElem = $("." + this.audioMuteClass, this.root)[0];
        this.videoMuteIconElem = $("." + this.videoMuteClass, this.root)[0];
        this.moderatorIconElem = $("." + this.moderatorClass, this.root)[0];
        //menu items 
        this.grantModeratorMenuItem = $("li.grant-moderator", this.root)[0];
        this.audioMuteMenuItem = $("li.audio-mute", this.root)[0];
        this.videoMuteMenuItem = $("li.video-mute", this.root)[0];
        this.fullscreenMuteItem = $("li.fullscreen", this.root)[0];
        this.kickParticipantMenuItem = $("li.kick-participant", this.root)[0];
        this.remoteControlMenuItem = $("li.remote-control", this.root)[0];
        //this.attachHandlers();
    }
    VideoPanel.prototype.attachHandlers = function () {
        var _this = this;
        this.tileIcon = document.querySelector("#tileview");
        $(this.root)
            .on('click', "." + _this.popupMenuButtonClass, function (e) {
            $("." + _this.popupMenuClass).removeClass("visible");
            $(this).find("." + _this.popupMenuClass).addClass("visible").focus();
            e.stopPropagation();
        })
            .on('click', 'li.overflow-menu-item', function (e) {
            $(this).closest("." + _this.popupMenuClass).removeClass("visible");
            e.stopPropagation();
        })
            .on('click', '.fullscreen', function (e) {
            $(_this.root).toggleClass(_this.fullscreenClass);
            _this.props.refreshGrid();
            var label = $(this).find(".label");
            if ($(_this.root).hasClass(_this.fullscreenClass)) {
                label.html("Exit full screen");
            }
            else {
                label.html("View full screen");
            }
        })
            .on('mouseover', function () {
            $(this).removeClass("display-video");
            $(this).addClass("display-name-on-video");
        })
            .on('mouseout', function () {
            $(this).removeClass("display-name-on-video");
            $(this).addClass("display-video");
        })
            .on('dblclick', function (e) {
            $(this).find(".fullscreen").trigger("click");
        });
        $(this.tileIcon).on('click', function () {
            $(_this.root).toggleClass(_this.fullscreenClass);
            _this.props.refreshGrid();
        });
    };
    VideoPanel.prototype.setShotnameVisible = function (show) {
        this.avatarNameElem.style.display = show ? "block" : "none";
        this.videoElem.style.visibility = show ? "hidden" : "visible";
    };
    VideoPanel.prototype.setUserName = function (name) {
        this.nameElem.innerHTML = name;
        $("text", this.avatarNameElem).html(snippet_1.avatarName(name));
    };
    VideoPanel.prototype.showModeratorIcon = function (show) {
        this.moderatorIconElem.style.display = show ? "block" : "none";
    };
    VideoPanel.prototype.setHighlight = function (h) {
        if (h)
            $(this.root).addClass(this.activeSpeakerClass);
        else
            $(this.root).removeClass(this.activeSpeakerClass);
    };
    VideoPanel.prototype.updatePanelOnJitsiUser = function (myInfo, jitsiUser) {
        var _this_1 = this;
        //set name
        this.setUserName(jitsiUser.getDisplayName());
        //hide shotname if exist visible video track
        var isVisibleVideo = false;
        jitsiUser.getTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && !track.isMuted()) {
                isVisibleVideo = true;
            }
        });
        this.setShotnameVisible(!isVisibleVideo);
        //bottom small icons
        this.videoMuteIconElem.style.display = jitsiUser.isVideoMuted() ? "block" : "none";
        this.audioMuteIconElem.style.display = jitsiUser.isAudioMuted() ? "block" : "none";
        this.moderatorIconElem.style.display = jitsiUser.getProperty(UserProperty_1.UserProperty.IsHost) ? "block" : "none";
        //popup menu
        if (myInfo.IsHost) {
            var userHaveCamera_1 = false, userHaveMicrophone_1 = false;
            jitsiUser.getTracks().forEach(function (track) {
                if (track.getType() === MediaType_1.MediaType.VIDEO)
                    userHaveCamera_1 = true;
                else if (track.getType() === MediaType_1.MediaType.AUDIO)
                    userHaveMicrophone_1 = true;
            });
            this.videoMuteMenuItem.style.display = userHaveCamera_1 ? "flex" : "none";
            this.audioMuteMenuItem.style.display = userHaveMicrophone_1 ? "flex" : "none";
            this.grantModeratorMenuItem.style.display = "flex";
            this.kickParticipantMenuItem.style.display = "flex";
            this.remoteControlMenuItem.style.display = "flex";
        }
        else {
            this.videoMuteMenuItem.style.display = "none";
            this.audioMuteMenuItem.style.display = "none";
            this.grantModeratorMenuItem.style.display = "none";
            this.kickParticipantMenuItem.style.display = "none";
            this.remoteControlMenuItem.style.display = "none";
        }
        if (jitsiUser.getProperty(UserProperty_1.UserProperty.IsHost)) {
            this.grantModeratorMenuItem.style.display = "none";
            this.kickParticipantMenuItem.style.display = "none";
            this.remoteControlMenuItem.style.display = "none";
        }
        //popup menu audio icon/label change
        if (this.audioMuteMenuItem.style.display === 'flex') {
            if (jitsiUser.isAudioMuted()) {
                $(this.audioMuteMenuItem).find(".label").html("Unmute Audio");
                $(this.audioMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_MUTE_ICON);
            }
            else {
                $(this.audioMuteMenuItem).find(".label").html("Mute Audio");
                $(this.audioMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_UNMUTE_ICON);
            }
        }
        if (this.videoMuteMenuItem.style.display === 'flex') {
            if (jitsiUser.isVideoMuted()) {
                $(this.videoMuteMenuItem).find(".label").html("Unmute Video");
                $(this.videoMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_MUTE_ICON);
            }
            else {
                $(this.videoMuteMenuItem).find(".label").html("Mute Video");
                $(this.videoMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_UNMUTE_ICON);
            }
        }
        //popup menu handlers
        if (myInfo.IsHost) {
            $(this.grantModeratorMenuItem).unbind('click').on('click', function () {
                _this_1.props.grantModeratorRole(jitsiUser.getId());
            });
            $(this.audioMuteMenuItem).unbind('click').on('click', function () {
                _this_1.props.muteUserAudio(jitsiUser.getId(), !jitsiUser.isAudioMuted());
            });
            $(this.videoMuteMenuItem).unbind('click').on('click', function () {
                _this_1.props.muteUserVideo(jitsiUser.getId(), !jitsiUser.isVideoMuted());
            });
            $(this.kickParticipantMenuItem).unbind('click').on('click', function () {
                _this_1.props.kickParticipantOut(jitsiUser.getId());
            });
            $(this.remoteControlMenuItem).unbind('click').on('click', function () {
                _this_1.props.sendRemoteControlReply('permissions', {}, jitsiUser.getId());
            });
        }
        //private chat handler
        $(this.root).find("." + this.privateChatClass).unbind('click').on('click', function () {
            _this_1.props.openPrivateChat(jitsiUser.getId(), jitsiUser.getDisplayName());
        });
        //active speaker(blue border)
        $(this.root).removeClass(this.activeSpeakerClass);
        var _this = this;
        $(this.root).on('mousedown', function (e) {
            //e.preventDefault();
            e.stopPropagation();
            console.log("------------i am here");
            if (e.which === 3) {
                e.preventDefault();
                console.log("------------i am here");
            }
            var ae = {
                button: e.button + 1,
                x: e.offsetX,
                y: e.offsetY
            };
            _this.props.sendRemoteControlReply('mousedown', ae, jitsiUser.getId());
        });
        $(this.root).on('mouseup', function (e) {
            //e.preventDefault();
            e.stopPropagation();
            console.log("------------you are here");
            if (e.which === 3)
                e.preventDefault();
            var ae = {
                button: e.button + 1,
                x: e.offsetX,
                y: e.offsetY
            };
            _this.props.sendRemoteControlReply('mouseup', ae, jitsiUser.getId());
        });
        $(this.root).on('mousemove', function (e) {
            //console.log(`${this.offsetHeight}---${this.offsetWidth}-${this.scrollWidth}-${this.clientHeight}`);
            //e.preventDefault();
            e.stopPropagation();
            console.log("------------he is here");
            var ae = {
                button: e.button + 1,
                x: e.offsetX / this.offsetWidth,
                y: e.offsetY / this.offsetHeight
            };
            _this.props.sendRemoteControlReply('mousemove', ae, jitsiUser.getId());
        });
        /**/
        $(window).unbind().on('keydown', function (e) {
            //console.log(`${this.offsetHeight}---${this.offsetWidth}-${this.scrollWidth}-${this.clientHeight}`);
            var modifiers = [];
            if (e.shiftKey) {
                modifiers.push('shift');
            }
            if (e.ctrlKey) {
                modifiers.push('control');
            }
            if (e.altKey) {
                modifiers.push('alt');
            }
            if (e.metaKey) {
                modifiers.push('command');
            }
            var ae = {
                modifiers: modifiers,
                key: e.keyCode,
            };
            console.log("------------key is here-----" + e.keyCode);
            _this.props.sendRemoteControlReply('keydown', ae, jitsiUser.getId());
        });
        $(window).on('keyup', function (e) {
            //console.log(`${this.offsetHeight}---${this.offsetWidth}-${this.scrollWidth}-${this.clientHeight}`);
            var modifiers = [];
            if (e.shiftKey) {
                modifiers.push('shift');
            }
            if (e.ctrlKey) {
                modifiers.push('control');
            }
            if (e.altKey) {
                modifiers.push('alt');
            }
            if (e.metaKey) {
                modifiers.push('command');
            }
            var ae = {
                modifiers: modifiers,
                key: e.keyCode,
            };
            console.log("------------key is here-----" + e.keyCode);
            _this.props.sendRemoteControlReply('keyup', ae, jitsiUser.getId());
        });
    };
    VideoPanel.prototype.updatePanelOnMyBGUser = function (myInfo, localTracks) {
        var _this_1 = this;
        var audioMuted = true, videoMuted = true;
        localTracks.forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && !track.isMuted())
                videoMuted = false;
            else if (track.getType() === MediaType_1.MediaType.AUDIO && !track.isMuted())
                audioMuted = false;
        });
        //name
        this.setUserName(myInfo.Name);
        var isVisibleVideo = false;
        localTracks.forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && !track.isMuted()) {
                isVisibleVideo = true;
            }
        });
        this.setShotnameVisible(!isVisibleVideo);
        //bottom small icons
        this.videoMuteIconElem.style.display = videoMuted ? "block" : "none";
        this.audioMuteIconElem.style.display = audioMuted ? "block" : "none";
        this.moderatorIconElem.style.display = myInfo.IsHost ? "block" : "none";
        //popup menu
        if (myInfo.IsHost) {
            this.videoMuteMenuItem.style.display = myInfo.mediaPolicy.useCamera ? "flex" : "none";
            this.audioMuteMenuItem.style.display = myInfo.mediaPolicy.useMic ? "flex" : "none";
        }
        else {
            this.videoMuteMenuItem.style.display = "none";
            this.audioMuteMenuItem.style.display = "none";
        }
        this.grantModeratorMenuItem.style.display = "none";
        this.kickParticipantMenuItem.style.display = "none";
        this.remoteControlMenuItem.style.display = "none";
        //popup menu audio icon/label change
        if (this.audioMuteMenuItem.style.display === 'flex') {
            if (audioMuted) {
                $(this.audioMuteMenuItem).find(".label").html("Unmute Audio");
                $(this.audioMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_MUTE_ICON);
            }
            else {
                $(this.audioMuteMenuItem).find(".label").html("Mute Audio");
                $(this.audioMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.AUDIO_UNMUTE_ICON);
            }
        }
        if (this.videoMuteMenuItem.style.display === 'flex') {
            if (videoMuted) {
                $(this.videoMuteMenuItem).find(".label").html("Unmute Video");
                $(this.videoMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_MUTE_ICON);
            }
            else {
                $(this.videoMuteMenuItem).find(".label").html("Mute Video");
                $(this.videoMuteMenuItem).find("path").attr("d", vector_icon_1.VectorIcon.VIDEO_UNMUTE_ICON);
            }
        }
        //popup menu handlers
        if (myInfo.IsHost) {
            $(this.audioMuteMenuItem).unbind('click').on('click', function () {
                _this_1.props.muteMyAudio(!audioMuted);
            });
            $(this.videoMuteMenuItem).unbind('click').on('click', function () {
                _this_1.props.muteMyVideo(!videoMuted);
            });
        }
        //hide private-chat item
        $(this.root).find("." + this.privateChatClass).hide();
        //active speaker(blue border)
        $(this.root).addClass(this.activeSpeakerClass);
    };
    VideoPanel.prototype.create = function () {
        var videoTag = "<video autoplay playsinline  class='" + this.videoElementClass + "' id='remoteVideo_" + this.Id + "'></video>";
        var audioTag = "<audio autoplay=\"\" id=\"remoteAudio_" + this.Id + "\"></audio>";
        var avatarVisible = 'visible';
        var cameraStatus = '<div class="indicator-container videoMuted"> \
                        <div> \
                            <span class="indicator-icon-container  toolbar-icon" id=""> \
                                <div class="jitsi-icon "> \
                                    <svg height="13" id="camera-disabled" width="13" viewBox="0 0 32 32"> \
                                        <path d="M4.375 2.688L28 26.313l-1.688 1.688-4.25-4.25c-.188.125-.5.25-.75.25h-16c-.75 0-1.313-.563-1.313-1.313V9.313c0-.75.563-1.313 1.313-1.313h1L2.687 4.375zm23.625 6v14.25L13.062 8h8.25c.75 0 1.375.563 1.375 1.313v4.688z"></path> \
                                    </svg> \
                                </div> \
                            </span> \
                        </div> \
                    </div>';
        var micStatus = '<div class="indicator-container audioMuted"> \
                            <div> \
                                <span class="indicator-icon-container  toolbar-icon" id=""> \
                                    <div class="jitsi-icon "> \
                                        <svg height="13" id="mic-disabled" width="13" viewBox="0 0 32 32"> \
                                            <path d="M5.688 4l22.313 22.313-1.688 1.688-5.563-5.563c-1 .625-2.25 1-3.438 1.188v4.375h-2.625v-4.375c-4.375-.625-8-4.375-8-8.938h2.25c0 4 3.375 6.75 7.063 6.75 1.063 0 2.125-.25 3.063-.688l-2.188-2.188c-.25.063-.563.125-.875.125-2.188 0-4-1.813-4-4v-1l-8-8zM20 14.875l-8-7.938v-.25c0-2.188 1.813-4 4-4s4 1.813 4 4v8.188zm5.313-.187a8.824 8.824 0 01-1.188 4.375L22.5 17.375c.375-.813.563-1.688.563-2.688h2.25z"></path> \
                                        </svg> \
                                    </div> \
                                </span> \
                            </div> \
                        </div>';
        var moderatorStatus = '<div class="moderator-icon right"> \
                                <div class="indicator-container"> \
                                    <div> \
                                        <span class="indicator-icon-container focusindicator toolbar-icon" id=""> \
                                            <div class="jitsi-icon "> \
                                                <svg height="13" width="13" viewBox="0 0 32 32"> \
                                                    <path d="M16 20.563l5 3-1.313-5.688L24.125 14l-5.875-.5L16 8.125 13.75 13.5l-5.875.5 4.438 3.875L11 23.563zm13.313-8.25l-7.25 6.313 2.188 9.375-8.25-5-8.25 5 2.188-9.375-7.25-6.313 9.563-.813 3.75-8.813 3.75 8.813z"></path> \
                                                </svg> \
                                            </div> \
                                        </span> \
                                    </div> \
                                </div> \
                            </div>';
        var panelHtml = "\n        <span class=\"" + this.panelClass + " display-video\" onContextMenu = \"return false;\">\n            " + videoTag + " \n            " + audioTag + "\n            <div class=\"videocontainer__toolbar\">\n                <div> " + cameraStatus + " " + micStatus + " " + moderatorStatus + "</div>\n            </div>\n            <div class=\"videocontainer__hoverOverlay\"></div>\n            <div class=\"displayNameContainer\"><span class=\"displayname\" id=\"localDisplayName\">Name</span></div>\n            <div class=\"avatar-container " + avatarVisible + "\" style=\"height: 105.5px; width: 105.5px;\">\n                <div class=\"avatar  userAvatar\" style=\"background-color: rgba(234, 255, 128, 0.4); font-size: 180%; height: 100%; width: 100%;\">\n                    <svg class=\"avatar-svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                        <text dominant-baseline=\"central\" fill=\"rgba(255,255,255,.6)\" font-size=\"40pt\" text-anchor=\"middle\" x=\"50\" y=\"50\">Name</text>\n                    </svg>\n                </div>\n            </div >\n            <span class=\"" + this.popupMenuButtonClass + "\">\n                <div class=\"\" id=\"\">\n                    <span class=\"popover-trigger remote-video-menu-trigger\">\n                        <div class=\"jitsi-icon\">\n                            <svg height=\"1em\" width=\"1em\" viewBox=\"0 0 24 24\">\n                                <path d=\"M12 15.984c1.078 0 2.016.938 2.016 2.016s-.938 2.016-2.016 2.016S9.984 19.078 9.984 18s.938-2.016 2.016-2.016zm0-6c1.078 0 2.016.938 2.016 2.016s-.938 2.016-2.016 2.016S9.984 13.078 9.984 12 10.922 9.984 12 9.984zm0-1.968c-1.078 0-2.016-.938-2.016-2.016S10.922 3.984 12 3.984s2.016.938 2.016 2.016S13.078 8.016 12 8.016z\"></path>                             </svg>\n                        </div>\n                    </span>\n                </div>\n                <div class=\"" + this.popupMenuClass + "\" tabIndex=-1 style=\"position: relative; right: 168px;  top: 25px; width: 175px;\">\n                    <ul aria-label=\"More actions menu\" class=\"overflow-menu\">\n                        <li aria-label=\"Grant Moderator\" class=\"overflow-menu-item grant-moderator\" tabindex=\"0\" role=\"button\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg height=\"22\" width=\"22\" viewBox=\"0 0 24 24\">\n                                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14 4a2 2 0 01-1.298 1.873l1.527 4.07.716 1.912c.062.074.126.074.165.035l1.444-1.444 2.032-2.032a2 2 0 111.248.579L19 19a2 2 0 01-2 2H7a2 2 0 01-2-2L4.166 8.993a2 2 0 111.248-.579l2.033 2.033L8.89 11.89c.087.042.145.016.165-.035l.716-1.912 1.527-4.07A2 2 0 1114 4zM6.84 17l-.393-4.725 1.029 1.03a2.1 2.1 0 003.451-.748L12 9.696l1.073 2.86a2.1 2.1 0 003.451.748l1.03-1.03L17.16 17H6.84z\"></path>                                     </svg>\n                                </div>\n                            </span>\n                            <span class=\"label\">Grant Moderator</span>\n                        </li>\n                        <li aria-label=\"Mute\" class=\"overflow-menu-item audio-mute\" tabindex=\"0\" role=\"button\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg fill=\"none\" height=\"22\" width=\"22\" viewBox=\"0 0 22 22\">\n                                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.333 8.65V11a3.668 3.668 0 002.757 3.553.928.928 0 00-.007.114v1.757A5.501 5.501 0 015.5 11a.917.917 0 10-1.833 0c0 3.74 2.799 6.826 6.416 7.277v.973a.917.917 0 001.834 0v-.973a7.297 7.297 0 003.568-1.475l3.091 3.092a.932.932 0 101.318-1.318l-3.091-3.091.01-.013-1.311-1.311-.01.013-1.325-1.325.008-.014-1.395-1.395a1.24 1.24 0 01-.004.018l-3.61-3.609v-.023L7.334 5.993v.023l-3.909-3.91a.932.932 0 10-1.318 1.318L7.333 8.65zm1.834 1.834V11a1.833 1.833 0 002.291 1.776l-2.291-2.292zm3.682 3.683c-.29.17-.606.3-.94.386a.928.928 0 01.008.114v1.757a5.47 5.47 0 002.257-.932l-1.325-1.325zm1.818-3.476l-1.834-1.834V5.5a1.833 1.833 0 00-3.644-.287l-1.43-1.43A3.666 3.666 0 0114.667 5.5v5.19zm1.665 1.665l1.447 1.447c.357-.864.554-1.81.554-2.803a.917.917 0 10-1.833 0c0 .468-.058.922-.168 1.356z\"></path>                                     </svg>\n                                </div>\n                            </span>\n                            <span class=\"label\">Mute</span>\n                        </li>\n                        <li aria-label=\"Disable camera\" class=\"overflow-menu-item video-mute\" tabindex=\"0\" role=\"button\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon\">\n                                    <svg fill=\"none\" height=\"22\" width=\"22\" viewBox=\"0 0 22 22\">\n                                        <path clip-rule=\"evenodd\" d=\"M6.84 5.5h-.022L3.424 2.106a.932.932 0 10-1.318 1.318L4.182 5.5h-.515c-1.013 0-1.834.82-1.834 1.833v7.334c0 1.012.821 1.833 1.834 1.833H13.75c.404 0 .777-.13 1.08-.352l3.746 3.746a.932.932 0 101.318-1.318l-4.31-4.31v-.024L13.75 12.41v.023l-5.1-5.099h.024L6.841 5.5zm6.91 4.274V7.333h-2.44L9.475 5.5h4.274c1.012 0 1.833.82 1.833 1.833v.786l3.212-1.835a.917.917 0 011.372.796v7.84c0 .344-.19.644-.47.8l-3.736-3.735 2.372 1.356V8.659l-2.75 1.571v1.377L13.75 9.774zM3.667 7.334h2.349l7.333 7.333H3.667V7.333z\"></path>                                     </svg>\n                                </div>\n                            </span>\n                            <span class=\"label\">Disable camera</span>\n                        </li>\n                        <li aria-label=\"Toggle full screen\" class=\"overflow-menu-item fullscreen\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg fill=\"none\" height=\"22\" width=\"22\" viewBox=\"0 0 22 22\">\n                                        <path clip-rule=\"evenodd\" d=\"M8.25 2.75H3.667a.917.917 0 00-.917.917V8.25h1.833V4.583H8.25V2.75zm5.5 1.833V2.75h4.583c.507 0 .917.41.917.917V8.25h-1.833V4.583H13.75zm0 12.834h3.667V13.75h1.833v4.583c0 .507-.41.917-.917.917H13.75v-1.833zM4.583 13.75v3.667H8.25v1.833H3.667a.917.917 0 01-.917-.917V13.75h1.833z\"></path>                                     </svg>\n                                </div>\n                            </span>\n                            <span class=\"label overflow-menu-item-text\">View full screen</span>\n                        </li>\n                        <li aria-label=\"\" class=\"overflow-menu-item " + this.privateChatClass + "\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg fill=\"none\" height=\"22\" width=\"22\" viewBox=\"0 0 22 22\">\n                                        <path clip-rule=\"evenodd\" d=\"M19,8H18V5a3,3,0,0,0-3-3H5A3,3,0,0,0,2,5V17a1,1,0,0,0,.62.92A.84.84,0,0,0,3,18a1,1,0,0,0,.71-.29l2.81-2.82H8v1.44a3,3,0,0,0,3,3h6.92l2.37,2.38A1,1,0,0,0,21,22a.84.84,0,0,0,.38-.08A1,1,0,0,0,22,21V11A3,3,0,0,0,19,8ZM8,11v1.89H6.11a1,1,0,0,0-.71.29L4,14.59V5A1,1,0,0,1,5,4H15a1,1,0,0,1,1,1V8H11A3,3,0,0,0,8,11Zm12,7.59-1-1a1,1,0,0,0-.71-.3H11a1,1,0,0,1-1-1V11a1,1,0,0,1,1-1h8a1,1,0,0,1,1,1Z\"></path>                                     </svg>\n                                </div>\n                            </span>\n                            <span class=\"label overflow-menu-item-text\">Private chat</span>\n                        </li>\n                        <li aria-label=\"\" class=\"overflow-menu-item kick-participant\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\n                                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10 16.667a6.667 6.667 0 100-13.334 6.667 6.667 0 000 13.334zm0 1.666a8.333 8.333 0 110-16.666 8.333 8.333 0 010 16.666zm0-9.512l2.357-2.357a.833.833 0 111.179 1.179L11.179 10l2.357 2.357a.833.833 0 11-1.179 1.179L10 11.178l-2.357 2.357a.833.833 0 01-1.178-1.179L8.822 10 6.465 7.643a.833.833 0 111.178-1.179L10 8.821z\"></path>\n                                    </svg>\n                                </div>\n                            </span>\n                            <span class=\"label overflow-menu-item-text\">Kick out</span>\n                        </li>\n                        <li aria-label=\"\" class=\"overflow-menu-item remote-control\">\n                            <span class=\"overflow-menu-item-icon\">\n                                <div class=\"jitsi-icon \">\n                                    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\n                                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10 16.667a6.667 6.667 0 100-13.334 6.667 6.667 0 000 13.334zm0 1.666a8.333 8.333 0 110-16.666 8.333 8.333 0 010 16.666zm0-9.512l2.357-2.357a.833.833 0 111.179 1.179L11.179 10l2.357 2.357a.833.833 0 11-1.179 1.179L10 11.178l-2.357 2.357a.833.833 0 01-1.178-1.179L8.822 10 6.465 7.643a.833.833 0 111.178-1.179L10 8.821z\"></path>\n                                    </svg>\n                                </div>\n                            </span>\n                            <span class=\"label overflow-menu-item-text\">Remote Control</span>\n                        </li>\n                    </ul>\n                </div>\n            </span>\n        </span >";
        return $(panelHtml)[0];
    };
    VideoPanel.nPanelInstanceId = 0; //increased when add new, but not decreased when remove panel
    return VideoPanel;
}());
exports.VideoPanel = VideoPanel;
//# sourceMappingURL=VideoPanel.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\VideoPanel.js","/components")
},{"../enum/MediaType":38,"../enum/UserProperty":40,"../util/snippet":55,"./vector_icon":36,"buffer":25,"e/U+97":27}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoPanelGrid = exports.VideoPanelGridProps = void 0;
var VideoPanel_1 = require("./VideoPanel");
var VideoPanelGridProps = /** @class */ (function () {
    function VideoPanelGridProps() {
    }
    return VideoPanelGridProps;
}());
exports.VideoPanelGridProps = VideoPanelGridProps;
var VideoPanelGrid = /** @class */ (function () {
    function VideoPanelGrid(props) {
        this.root = null;
        this.videoPanelMap = new Map();
        this.panelClass = "videocontainer";
        this.fullscreenClass = "video-fullscreen";
        this.popupMenuClass = "popup-menu";
        this.props = props;
        this.root = document.getElementById("video-grid");
        this.attachHandlers();
    }
    VideoPanelGrid.prototype.attachHandlers = function () {
        var _this = this;
        document.addEventListener('click', function (e) {
            var inside = $(e.target).closest("." + _this.popupMenuClass).length > 0;
            if (!inside) {
                $("." + _this.popupMenuClass).removeClass("visible");
            }
        });
        $(document).ready(function () {
            _this.redrawGrid();
        });
        $(window).resize(function () {
            _this.redrawGrid();
        });
    };
    VideoPanelGrid.prototype.getNewVideoPanel = function () {
        var props = new VideoPanel_1.VideoPanelProps();
        props.refreshGrid = this.redrawGrid.bind(this);
        props.grantModeratorRole = this.props.grantModeratorRole;
        props.kickParticipantOut = this.props.kickParticipantOut;
        props.sendRemoteControlReply = this.props.sendRemoteControlReply;
        props.muteUserVideo = this.props.muteUserVideo;
        props.muteUserAudio = this.props.muteUserAudio;
        props.muteMyVideo = this.props.muteMyVideo;
        props.muteMyAudio = this.props.muteMyAudio;
        props.openPrivateChat = this.props.openPrivateChat;
        props.panelClass = this.panelClass;
        props.fullscreenClass = this.fullscreenClass;
        props.popupMenuClass = this.popupMenuClass;
        var videoPanel = new VideoPanel_1.VideoPanel(props);
        $(this.root).append(videoPanel.root);
        videoPanel.attachHandlers();
        //add to map
        this.videoPanelMap.set(videoPanel.Id, videoPanel);
        //refresh layout
        this.redrawGrid();
        return videoPanel;
    };
    VideoPanelGrid.prototype.freeVideoPanel = function (Id) {
        var videoPanel = this.videoPanelMap.get(Id);
        if (videoPanel) {
            $(videoPanel.root).remove();
            this.videoPanelMap.delete(Id);
            this.redrawGrid();
        }
    };
    VideoPanelGrid.prototype.redrawGrid = function () {
        //margin
        var gutter = 40;
        var width = $("#content").width() - gutter;
        var height = $("#content").height() - gutter;
        //number of video panels
        var panelCount = $("." + this.panelClass).length;
        //chatting dialog
        var chattingWidth = 315;
        if ($(this.root).hasClass("shift-right")) {
            width -= chattingWidth;
        }
        //width, height of each video panel
        var w, h;
        //if fullscreen mode, hide other video panels
        if ($("." + this.panelClass).hasClass(this.fullscreenClass)) {
            $("." + this.panelClass).css("display", "none");
            $("." + this.fullscreenClass).css("display", "inline-block").css("height", height + gutter - 6).css("width", width + gutter);
            return;
        }
        //show all video panels
        $("." + this.panelClass).css("display", "inline-block");
        var columnCount = 1;
        var rowCount = 1;
        var SM = 576;
        var MD = 768;
        var LG = 992;
        var XL = 1200;
        var XXL = 1400;
        if (width < SM) {
            columnCount = 1;
        }
        else if (width < LG) {
            if (panelCount <= 1)
                columnCount = 1;
            else
                columnCount = 2;
        }
        else {
            if (panelCount == 1) {
                if (width < XXL)
                    columnCount = 1;
                else
                    columnCount = 2;
            }
            else if (panelCount <= 4)
                columnCount = 2;
            else if (panelCount <= 9)
                columnCount = 3;
            else if (panelCount <= 16)
                columnCount = 4;
            else if (panelCount <= 20)
                columnCount = 5;
            else
                columnCount = 6;
        }
        rowCount = Math.floor((panelCount - 1) / columnCount) + 1;
        if (width < 576) {
            w = width;
            h = w * 9 / 16;
        }
        else {
            // 
            if (width * rowCount * 9 > height * columnCount * 16) {
                h = height / rowCount;
                w = h * 16 / 9;
            }
            //
            else {
                w = width / columnCount;
                h = w * 9 / 16;
            }
        }
        $("." + this.panelClass)
            .css("width", w)
            .css("height", h)
            .find(".avatar-container")
            .css("width", h / 2)
            .css("height", h / 2);
    };
    VideoPanelGrid.prototype.hightlightPanel = function (targetId) {
        this.videoPanelMap.forEach(function (panel, Id) {
            panel.setHighlight(targetId === Id);
        });
    };
    return VideoPanelGrid;
}());
exports.VideoPanelGrid = VideoPanelGrid;
//# sourceMappingURL=VideoPanelGrid.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\VideoPanelGrid.js","/components")
},{"./VideoPanel":34,"buffer":25,"e/U+97":27}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorIcon = void 0;
var VectorIcon = /** @class */ (function () {
    function VectorIcon() {
    }
    VectorIcon.AUDIO_MUTE_ICON = "M7.333 8.65V11a3.668 3.668 0 002.757 3.553.928.928 0 00-.007.114v1.757A5.501 5.501 0 015.5 11a.917.917 0 10-1.833 0c0 3.74 2.799 6.826 6.416 7.277v.973a.917.917 0 001.834 0v-.973a7.297 7.297 0 003.568-1.475l3.091 3.092a.932.932 0 101.318-1.318l-3.091-3.091.01-.013-1.311-1.311-.01.013-1.325-1.325.008-.014-1.395-1.395a1.24 1.24 0 01-.004.018l-3.61-3.609v-.023L7.334 5.993v.023l-3.909-3.91a.932.932 0 10-1.318 1.318L7.333 8.65zm1.834 1.834V11a1.833 1.833 0 002.291 1.776l-2.291-2.292zm3.682 3.683c-.29.17-.606.3-.94.386a.928.928 0 01.008.114v1.757a5.47 5.47 0 002.257-.932l-1.325-1.325zm1.818-3.476l-1.834-1.834V5.5a1.833 1.833 0 00-3.644-.287l-1.43-1.43A3.666 3.666 0 0114.667 5.5v5.19zm1.665 1.665l1.447 1.447c.357-.864.554-1.81.554-2.803a.917.917 0 10-1.833 0c0 .468-.058.922-.168 1.356z";
    VectorIcon.AUDIO_UNMUTE_ICON = "M16 6a4 4 0 00-8 0v6a4.002 4.002 0 003.008 3.876c-.005.04-.008.082-.008.124v1.917A6.002 6.002 0 016 12a1 1 0 10-2 0 8.001 8.001 0 007 7.938V21a1 1 0 102 0v-1.062A8.001 8.001 0 0020 12a1 1 0 10-2 0 6.002 6.002 0 01-5 5.917V16c0-.042-.003-.083-.008-.124A4.002 4.002 0 0016 12V6zm-4-2a2 2 0 00-2 2v6a2 2 0 104 0V6a2 2 0 00-2-2z";
    VectorIcon.VIDEO_MUTE_ICON = "M 6.84 5.5 h -0.022 L 3.424 2.106 a 0.932 0.932 0 1 0 -1.318 1.318 L 4.182 5.5 h -0.515 c -1.013 0 -1.834 0.82 -1.834 1.833 v 7.334 c 0 1.012 0.821 1.833 1.834 1.833 H 13.75 c 0.404 0 0.777 -0.13 1.08 -0.352 l 3.746 3.746 a 0.932 0.932 0 1 0 1.318 -1.318 l -4.31 -4.31 v -0.024 L 13.75 12.41 v 0.023 l -5.1 -5.099 h 0.024 L 6.841 5.5 Z m 6.91 4.274 V 7.333 h -2.44 L 9.475 5.5 h 4.274 c 1.012 0 1.833 0.82 1.833 1.833 v 0.786 l 3.212 -1.835 a 0.917 0.917 0 0 1 1.372 0.796 v 7.84 c 0 0.344 -0.19 0.644 -0.47 0.8 l -3.736 -3.735 l 2.372 1.356 V 8.659 l -2.75 1.571 v 1.377 L 13.75 9.774 Z M 3.667 7.334 h 2.349 l 7.333 7.333 H 3.667 V 7.333 Z";
    VectorIcon.VIDEO_UNMUTE_ICON = "M13.75 5.5H3.667c-1.013 0-1.834.82-1.834 1.833v7.334c0 1.012.821 1.833 1.834 1.833H13.75c1.012 0 1.833-.82 1.833-1.833v-.786l3.212 1.835a.916.916 0 001.372-.796V7.08a.917.917 0 00-1.372-.796l-3.212 1.835v-.786c0-1.012-.82-1.833-1.833-1.833zm0 3.667v5.5H3.667V7.333H13.75v1.834zm4.583 4.174l-2.75-1.572v-1.538l2.75-1.572v4.682z";
    VectorIcon.GRANT_MODERATOR_ICON = "M14 4a2 2 0 01-1.298 1.873l1.527 4.07.716 1.912c.062.074.126.074.165.035l1.444-1.444 2.032-2.032a2 2 0 111.248.579L19 19a2 2 0 01-2 2H7a2 2 0 01-2-2L4.166 8.993a2 2 0 111.248-.579l2.033 2.033L8.89 11.89c.087.042.145.016.165-.035l.716-1.912 1.527-4.07A2 2 0 1114 4zM6.84 17l-.393-4.725 1.029 1.03a2.1 2.1 0 003.451-.748L12 9.696l1.073 2.86a2.1 2.1 0 003.451.748l1.03-1.03L17.16 17H6.84z";
    VectorIcon.AUDIO_MUTE_SMALL_ICON = "M5.688 4l22.313 22.313-1.688 1.688-5.563-5.563c-1 .625-2.25 1-3.438 1.188v4.375h-2.625v-4.375c-4.375-.625-8-4.375-8-8.938h2.25c0 4 3.375 6.75 7.063 6.75 1.063 0 2.125-.25 3.063-.688l-2.188-2.188c-.25.063-.563.125-.875.125-2.188 0-4-1.813-4-4v-1l-8-8zM20 14.875l-8-7.938v-.25c0-2.188 1.813-4 4-4s4 1.813 4 4v8.188zm5.313-.187a8.824 8.824 0 01-1.188 4.375L22.5 17.375c.375-.813.563-1.688.563-2.688h2.25z";
    VectorIcon.VIDEO_MUTE_SMALL_ICON = "M4.375 2.688L28 26.313l-1.688 1.688-4.25-4.25c-.188.125-.5.25-.75.25h-16c-.75 0-1.313-.563-1.313-1.313V9.313c0-.75.563-1.313 1.313-1.313h1L2.687 4.375zm23.625 6v14.25L13.062 8h8.25c.75 0 1.375.563 1.375 1.313v4.688z";
    VectorIcon.MODERATOR_SMALL_ICON = "M16 20.563l5 3-1.313-5.688L24.125 14l-5.875-.5L16 8.125 13.75 13.5l-5.875.5 4.438 3.875L11 23.563zm13.313-8.25l-7.25 6.313 2.188 9.375-8.25-5-8.25 5 2.188-9.375-7.25-6.313 9.563-.813 3.75-8.813 3.75 8.813z";
    VectorIcon.SETTING_ICON = "M9.005 2.17l-.576 1.727-.634.262-1.628-.813a1.833 1.833 0 00-2.116.343l-.362.362a1.833 1.833 0 00-.343 2.116l.816 1.624-.265.638-1.727.576c-.748.25-1.253.95-1.253 1.739v.512c0 .79.505 1.49 1.253 1.74l1.727.575.262.634-.813 1.628a1.833 1.833 0 00.343 2.116l.362.362c.558.558 1.41.696 2.116.343l1.624-.816.638.265.576 1.727c.25.748.95 1.253 1.739 1.253h.512c.79 0 1.49-.505 1.74-1.253l.575-1.726.634-.263 1.628.813a1.833 1.833 0 002.116-.343l.362-.362c.558-.558.696-1.41.343-2.116l-.816-1.624.265-.638 1.727-.576a1.833 1.833 0 001.253-1.739v-.512c0-.79-.505-1.49-1.253-1.74l-1.726-.572-.264-.637.814-1.628a1.833 1.833 0 00-.343-2.116l-.362-.362a1.833 1.833 0 00-2.116-.343l-1.624.816-.638-.265-.576-1.727a1.833 1.833 0 00-1.74-1.253h-.511c-.79 0-1.49.505-1.74 1.253zM7.723 6.173l2.181-.903.84-2.52h.512l.84 2.52 2.185.908 2.372-1.193.362.362-1.188 2.376.903 2.185 2.52.836v.512l-2.52.84-.908 2.185 1.193 2.372-.362.362-2.376-1.188-2.181.903-.84 2.52h-.512l-.84-2.52-2.185-.908-2.372 1.193-.362-.362 1.188-2.376-.903-2.181-2.52-.84v-.512l2.52-.84.908-2.185-1.193-2.372.362-.362 2.376 1.188zM11 15.583a4.583 4.583 0 110-9.166 4.583 4.583 0 010 9.166zM13.75 11a2.75 2.75 0 11-5.5 0 2.75 2.75 0 015.5 0z";
    VectorIcon.USER_GROUP_ICON = "M5.33331 2C6.28101 2 7.09675 2.56499 7.46207 3.37651C7.00766 3.45023 6.58406 3.61583 6.21095 3.85361C6.04111 3.54356 5.71176 3.33333 5.33331 3.33333C4.78103 3.33333 4.33331 3.78105 4.33331 4.33333C4.33331 4.75895 4.59921 5.12246 4.97395 5.26682C4.77672 5.69245 4.66665 6.16671 4.66665 6.66667L4.66678 6.6967C3.12249 6.85332 2.66665 7.65415 2.66665 9.83333C2.66665 9.89666 2.66835 9.95222 2.67088 10H3.13441C2.977 10.3982 2.86114 10.8423 2.7841 11.3333H2.33331C1.66665 11.3333 1.33331 10.8333 1.33331 9.83333C1.33331 7.60559 1.88097 6.20498 3.39417 5.63152C3.14521 5.26038 2.99998 4.81382 2.99998 4.33333C2.99998 3.04467 4.04465 2 5.33331 2ZM9.78901 3.85361C9.4159 3.61583 8.9923 3.45023 8.53788 3.37651C8.90321 2.56499 9.71895 2 10.6666 2C11.9553 2 13 3.04467 13 4.33333C13 4.81382 12.8547 5.26038 12.6058 5.63152C14.119 6.20498 14.6666 7.60559 14.6666 9.83333C14.6666 10.8333 14.3333 11.3333 13.6666 11.3333H13.2159C13.1388 10.8423 13.023 10.3982 12.8656 10H13.3291C13.3316 9.95222 13.3333 9.89666 13.3333 9.83333C13.3333 7.65415 12.8775 6.85332 11.3332 6.6967L11.3333 6.66667C11.3333 6.1667 11.2232 5.69245 11.026 5.26682C11.4008 5.12246 11.6666 4.75895 11.6666 4.33333C11.6666 3.78105 11.2189 3.33333 10.6666 3.33333C10.2882 3.33333 9.95885 3.54356 9.78901 3.85361ZM4.49998 14.6667C3.7222 14.6667 3.33331 14.1111 3.33331 13C3.33331 10.4598 4.0062 8.8875 5.87888 8.28308C5.5366 7.83462 5.33331 7.27438 5.33331 6.66667C5.33331 5.19391 6.52722 4 7.99998 4C9.47274 4 10.6666 5.19391 10.6666 6.66667C10.6666 7.27438 10.4634 7.83462 10.1211 8.28308C11.9938 8.8875 12.6666 10.4598 12.6666 13C12.6666 14.1111 12.2778 14.6667 11.5 14.6667H4.49998ZM9.33331 6.66667C9.33331 7.40305 8.73636 8 7.99998 8C7.2636 8 6.66665 7.40305 6.66665 6.66667C6.66665 5.93029 7.2636 5.33333 7.99998 5.33333C8.73636 5.33333 9.33331 5.93029 9.33331 6.66667ZM11.3333 13C11.3333 13.1426 11.3252 13.2536 11.3152 13.3333H4.68477C4.67476 13.2536 4.66665 13.1426 4.66665 13C4.66665 10.1957 5.42021 9.33333 7.99998 9.33333C10.5797 9.33333 11.3333 10.1957 11.3333 13Z";
    VectorIcon.SEND_FILE = "M13.5,12.5a1,1,0,0,0-1-1h-5a1,1,0,0,0,0,2h5A1,1,0,0,0,13.5,12.5Zm5,5a2,2,0,0,0-1.18.39l-1.75-.8,1.91-.88a2,2,0,0,0,1,.29,2,2,0,1,0-2-2l-1.89.87A2,2,0,1,0,13.5,19a1.88,1.88,0,0,0,.92-.24l2.1,1a2,2,0,1,0,2-2.23Zm-8,2h-5a1,1,0,0,1-1-1V4.5a1,1,0,0,1,1-1h5v3a3,3,0,0,0,3,3h3a1,1,0,0,0,2,0v-1s0,0,0-.06a1.31,1.31,0,0,0-.06-.27l0-.09a1.07,1.07,0,0,0-.19-.28h0l-6-6h0a1.07,1.07,0,0,0-.28-.19.29.29,0,0,0-.1,0,1.1,1.1,0,0,0-.26-.06H5.5a3,3,0,0,0-3,3v14a3,3,0,0,0,3,3h5a1,1,0,0,0,0-2Zm2-14.59L15.09,7.5H13.5a1,1,0,0,1-1-1ZM7.5,15.5a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm0-6h1a1,1,0,0,0,0-2h-1a1,1,0,0,0,0,2Z";
    return VectorIcon;
}());
exports.VectorIcon = VectorIcon;
//# sourceMappingURL=vector_icon.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/components\\vector_icon.js","/components")
},{"buffer":25,"e/U+97":27}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelType = void 0;
var ChannelType;
(function (ChannelType) {
    ChannelType["Both"] = "Both";
    ChannelType["AudioOnly"] = "AudioOnly";
    ChannelType["VideoOnly"] = "VideoOnly";
})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));
//# sourceMappingURL=ChannelType.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/enum\\ChannelType.js","/enum")
},{"buffer":25,"e/U+97":27}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaType = void 0;
var MediaType;
(function (MediaType) {
    MediaType["VIDEO"] = "video";
    MediaType["AUDIO"] = "audio";
    MediaType["PRESENTER"] = "presenter";
})(MediaType = exports.MediaType || (exports.MediaType = {}));
//# sourceMappingURL=MediaType.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/enum\\MediaType.js","/enum")
},{"buffer":25,"e/U+97":27}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationDuration = exports.NotificationType = void 0;
var NotificationType;
(function (NotificationType) {
    NotificationType["User"] = "user";
    NotificationType["GrantHost"] = "host";
    NotificationType["Video"] = "video";
    NotificationType["VideoMute"] = "video-mute";
    NotificationType["Audio"] = "audio";
    NotificationType["AudioMute"] = "audio-mute";
    NotificationType["Recording"] = "recording";
    NotificationType["Screensharing"] = "screensharing";
    NotificationType["HandRaise"] = "handraise";
    NotificationType["Chat"] = "chat";
    NotificationType["FileTransfer"] = "file-tranfer";
    NotificationType["FileReceive"] = "file-receive";
    NotificationType["Info"] = "info";
    NotificationType["Warning"] = "warning";
})(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
;
var NotificationDuration;
(function (NotificationDuration) {
    NotificationDuration["Permanent"] = "permanent";
    NotificationDuration["HideAuto"] = "hide-auto";
})(NotificationDuration = exports.NotificationDuration || (exports.NotificationDuration = {}));
//# sourceMappingURL=NotificationType.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/enum\\NotificationType.js","/enum")
},{"buffer":25,"e/U+97":27}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProperty = void 0;
var UserProperty;
(function (UserProperty) {
    UserProperty["videoPanel"] = "videoPanel";
    UserProperty["IsHost"] = "IsHost";
    UserProperty["useCamera"] = "useCamera";
    UserProperty["useMic"] = "useMic";
})(UserProperty = exports.UserProperty || (exports.UserProperty = {}));
//# sourceMappingURL=UserProperty.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/enum\\UserProperty.js","/enum")
},{"buffer":25,"e/U+97":27}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BizGazeMeeting = void 0;
var signalR = require("@microsoft/signalr");
var bg_1 = require("./protocol/bg");
var meeting_ui_1 = require("./meeting_ui");
var BGUser_1 = require("./model/BGUser");
var BGMeeting_1 = require("./model/BGMeeting");
var MediaType_1 = require("./enum/MediaType");
var JitsiCommandParam_1 = require("./jitsi/JitsiCommandParam");
var UserProperty_1 = require("./enum/UserProperty");
var TimeUtil_1 = require("./util/TimeUtil");
var ActiveDevices_1 = require("./model/ActiveDevices");
var InputDevicePolicy_1 = require("./model/InputDevicePolicy");
var ChannelType_1 = require("./enum/ChannelType");
var jitsi_1 = require("./protocol/jitsi");
var NotificationType_1 = require("./enum/NotificationType");
var JitsiCommandQueue_1 = require("./jitsi/JitsiCommandQueue");
var KEYS = {
    BACKSPACE: 'backspace',
    DELETE: 'delete',
    RETURN: 'enter',
    TAB: 'tab',
    ESCAPE: 'escape',
    UP: 'up',
    DOWN: 'down',
    RIGHT: 'right',
    LEFT: 'left',
    HOME: 'home',
    END: 'end',
    PAGEUP: 'pageup',
    PAGEDOWN: 'pagedown',
    F1: 'f1',
    F2: 'f2',
    F3: 'f3',
    F4: 'f4',
    F5: 'f5',
    F6: 'f6',
    F7: 'f7',
    F8: 'f8',
    F9: 'f9',
    F10: 'f10',
    F11: 'f11',
    F12: 'f12',
    META: 'command',
    CMD_L: 'command',
    CMD_R: 'command',
    ALT: 'alt',
    CONTROL: 'control',
    SHIFT: 'shift',
    CAPS_LOCK: 'caps_lock',
    SPACE: 'space',
    PRINTSCREEN: 'printscreen',
    INSERT: 'insert',
    NUMPAD_0: 'numpad_0',
    NUMPAD_1: 'numpad_1',
    NUMPAD_2: 'numpad_2',
    NUMPAD_3: 'numpad_3',
    NUMPAD_4: 'numpad_4',
    NUMPAD_5: 'numpad_5',
    NUMPAD_6: 'numpad_6',
    NUMPAD_7: 'numpad_7',
    NUMPAD_8: 'numpad_8',
    NUMPAD_9: 'numpad_9',
    COMMA: ',',
    PERIOD: '.',
    SEMICOLON: ';',
    QUOTE: '\'',
    BRACKET_LEFT: '[',
    BRACKET_RIGHT: ']',
    BACKQUOTE: '`',
    BACKSLASH: '\\',
    MINUS: '-',
    EQUAL: '=',
    SLASH: '/'
};
/* eslint-disable max-len */
/**
 * Mapping between the key codes and keys defined in KEYS.
 * The mappings are based on
 * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#Specifications
 */
/* eslint-enable max-len */
var keyCodeToKey = {
    8: KEYS.BACKSPACE,
    9: KEYS.TAB,
    13: KEYS.RETURN,
    16: KEYS.SHIFT,
    17: KEYS.CONTROL,
    18: KEYS.ALT,
    20: KEYS.CAPS_LOCK,
    27: KEYS.ESCAPE,
    32: KEYS.SPACE,
    33: KEYS.PAGEUP,
    34: KEYS.PAGEDOWN,
    35: KEYS.END,
    36: KEYS.HOME,
    37: KEYS.LEFT,
    38: KEYS.UP,
    39: KEYS.RIGHT,
    40: KEYS.DOWN,
    42: KEYS.PRINTSCREEN,
    44: KEYS.PRINTSCREEN,
    45: KEYS.INSERT,
    46: KEYS.DELETE,
    48: '0',
    49: '1',
    50: '2',
    51: '3',
    52: '4',
    53: '5',
    54: '6',
    55: '7',
    56: '8',
    57: '9',
    59: KEYS.SEMICOLON,
    61: KEYS.EQUAL,
    65: '',
    66: '',
    67: '',
    68: '',
    69: '',
    70: '',
    71: '',
    72: '',
    73: '',
    74: '',
    75: '',
    76: '',
    77: '',
    78: '',
    79: '',
    80: '',
    81: '',
    82: '',
    83: '',
    84: '',
    85: '',
    86: '',
    87: '',
    88: '',
    89: '',
    90: '',
    91: KEYS.CMD_L,
    92: KEYS.CMD_R,
    93: KEYS.CMD_R,
    96: KEYS.NUMPAD_0,
    97: KEYS.NUMPAD_1,
    98: KEYS.NUMPAD_2,
    99: KEYS.NUMPAD_3,
    100: KEYS.NUMPAD_4,
    101: KEYS.NUMPAD_5,
    102: KEYS.NUMPAD_6,
    103: KEYS.NUMPAD_7,
    104: KEYS.NUMPAD_8,
    105: KEYS.NUMPAD_9,
    112: KEYS.F1,
    113: KEYS.F2,
    114: KEYS.F3,
    115: KEYS.F4,
    116: KEYS.F5,
    117: KEYS.F6,
    118: KEYS.F7,
    119: KEYS.F8,
    120: KEYS.F9,
    121: KEYS.F10,
    122: KEYS.F11,
    123: KEYS.F12,
    124: KEYS.PRINTSCREEN,
    173: KEYS.MINUS,
    186: KEYS.SEMICOLON,
    187: KEYS.EQUAL,
    188: KEYS.COMMA,
    189: KEYS.MINUS,
    190: KEYS.PERIOD,
    191: KEYS.SLASH,
    192: KEYS.BACKQUOTE,
    219: KEYS.BRACKET_LEFT,
    220: KEYS.BACKSLASH,
    221: KEYS.BRACKET_RIGHT,
    222: KEYS.QUOTE,
    224: KEYS.META,
    229: KEYS.SEMICOLON
};
var keyCodeToKey1 = [];
keyCodeToKey1[8] = KEYS.BACKSPACE;
keyCodeToKey1[9] = KEYS.TAB;
keyCodeToKey1[13] = KEYS.RETURN;
keyCodeToKey1[16] = KEYS.SHIFT;
keyCodeToKey1[17] = KEYS.CONTROL;
keyCodeToKey1[18] = KEYS.ALT;
keyCodeToKey1[20] = KEYS.CAPS_LOCK;
keyCodeToKey1[27] = KEYS.ESCAPE;
keyCodeToKey1[32] = KEYS.SPACE;
keyCodeToKey1[33] = KEYS.PAGEUP;
keyCodeToKey1[34] = KEYS.PAGEDOWN;
keyCodeToKey1[35] = KEYS.END;
keyCodeToKey1[36] = KEYS.HOME;
keyCodeToKey1[37] = KEYS.LEFT;
keyCodeToKey1[38] = KEYS.UP;
keyCodeToKey1[39] = KEYS.RIGHT;
keyCodeToKey1[40] = KEYS.DOWN;
keyCodeToKey1[42] = KEYS.PRINTSCREEN;
keyCodeToKey1[44] = KEYS.PRINTSCREEN;
keyCodeToKey1[45] = KEYS.INSERT;
keyCodeToKey1[46] = KEYS.DELETE;
keyCodeToKey1[59] = KEYS.SEMICOLON;
keyCodeToKey1[61] = KEYS.EQUAL;
keyCodeToKey1[91] = KEYS.CMD_L;
keyCodeToKey1[92] = KEYS.CMD_R;
keyCodeToKey1[93] = KEYS.CMD_R;
keyCodeToKey1[96] = KEYS.NUMPAD_0;
keyCodeToKey1[97] = KEYS.NUMPAD_1;
keyCodeToKey1[98] = KEYS.NUMPAD_2;
keyCodeToKey1[99] = KEYS.NUMPAD_3;
keyCodeToKey1[100] = KEYS.NUMPAD_4;
keyCodeToKey1[101] = KEYS.NUMPAD_5;
keyCodeToKey1[102] = KEYS.NUMPAD_6;
keyCodeToKey1[103] = KEYS.NUMPAD_7;
keyCodeToKey1[104] = KEYS.NUMPAD_8;
keyCodeToKey1[105] = KEYS.NUMPAD_9;
keyCodeToKey1[112] = KEYS.F1;
keyCodeToKey1[113] = KEYS.F2;
keyCodeToKey1[114] = KEYS.F3;
keyCodeToKey1[115] = KEYS.F4;
keyCodeToKey1[116] = KEYS.F5;
keyCodeToKey1[117] = KEYS.F6;
keyCodeToKey1[118] = KEYS.F7;
keyCodeToKey1[119] = KEYS.F8;
keyCodeToKey1[120] = KEYS.F9;
keyCodeToKey1[121] = KEYS.F10;
keyCodeToKey1[122] = KEYS.F11;
keyCodeToKey1[123] = KEYS.F12;
keyCodeToKey1[124] = KEYS.PRINTSCREEN;
keyCodeToKey1[173] = KEYS.MINUS;
keyCodeToKey1[186] = KEYS.SEMICOLON;
keyCodeToKey1[187] = KEYS.EQUAL;
keyCodeToKey1[188] = KEYS.COMMA;
keyCodeToKey1[189] = KEYS.MINUS;
keyCodeToKey1[190] = KEYS.PERIOD;
keyCodeToKey1[191] = KEYS.SLASH;
keyCodeToKey1[192] = KEYS.BACKQUOTE;
keyCodeToKey1[219] = KEYS.BRACKET_LEFT;
keyCodeToKey1[220] = KEYS.BACKSLASH;
keyCodeToKey1[221] = KEYS.BRACKET_RIGHT;
keyCodeToKey1[222] = KEYS.QUOTE;
keyCodeToKey1[224] = KEYS.META;
keyCodeToKey1[229] = KEYS.SEMICOLON;
for (var i = 0; i < 10; i++) {
    keyCodeToKey1[i + 48] = "" + i;
}
for (var i = 0; i < 26; i++) {
    var keyCode = i + 65;
    keyCodeToKey1[keyCode] = String.fromCharCode(keyCode).toLowerCase();
}
function keyboardEventToKey(akey) {
    return keyCodeToKey1[akey];
}
/***********************************************************************************

                       Lifecycle of Bizgaze Meeting

    connectToBG -> joinBGConference -> connectToJitsi -> joinJitsiConference -> ...
    ... -> leaveFromJitsi -> leaveFromBG

************************************************************************************/
var MeetingConfig = /** @class */ (function () {
    function MeetingConfig() {
        this.resetMuteOnDeviceChange = true;
        this.hideToolbarOnMouseOut = true;
    }
    return MeetingConfig;
}());
var BizGazeMeeting = /** @class */ (function () {
    function BizGazeMeeting() {
        this.connection = new signalR.HubConnectionBuilder().withUrl("/BizGazeMeetingServer").build();
        this.joinedBGConference = false;
        this.ui = new meeting_ui_1.MeetingUI(this);
        this.roomInfo = new BGMeeting_1.BGMeetingInfo();
        this.m_BGUserList = new Map();
        this.localVideoPanel = null;
        this.myInfo = new BGUser_1.UserInfo();
        this.JitsiMeetJS = window.JitsiMeetJS;
        //JitsiServerDomain = "idlests.com";
        //JitsiServerDomain = "unimail.in";
        this.JitsiServerDomain = "meetserver.com";
        this.localTracks = [];
        this.screenSharing = false;
        this.recording = false;
        this.downloadRecordFile = false;
        //default devices
        this.activeCameraId = window._camId;
        this.activeMicId = window._micId;
        this.activeSpeakerId = window._speakerId;
        this.config = new MeetingConfig();
        this.commandQueue = new JitsiCommandQueue_1.JitsiCommandQueue();
        this.privateCommandQueue = new JitsiCommandQueue_1.JitsiPrivateCommandQueue();
        this.recordingData = [];
    }
    /**
     * **************************************************************************
     *              START ~ END
     *
     * **************************************************************************
     */
    BizGazeMeeting.prototype.start = function () {
        var _this = this;
        if (!window._roomId) {
            this.leaveBGConference();
            return;
        }
        //jitsi init
        var initOptions = {
            disableAudioLevels: true
        };
        this.JitsiMeetJS.setLogLevel(this.JitsiMeetJS.logLevels.ERROR);
        this.JitsiMeetJS.init(initOptions);
        //device log
        this.JitsiMeetJS.mediaDevices.enumerateDevices(function (devices) {
            devices.forEach(function (d) {
                if (_this.activeCameraId.length > 0 && d.deviceId === _this.activeCameraId) {
                    _this.Log("Camera: " + d.label);
                }
                if (_this.activeMicId.length > 0 && d.deviceId === _this.activeMicId && d.kind === 'audioinput') {
                    _this.Log("Microphone: " + d.label);
                }
            });
        });
        //connect to bg server
        this.connectToBGServer(function () {
            _this.Log("Connected to BizGaze SignalR Server");
            _this.joinBGConference(); // => onBGConferenceJoined
        });
    };
    BizGazeMeeting.prototype.stop = function () {
        //todo 
        //if it was recording, save it before stop
        var _this = this;
        if (this.jitsiRoomJoined()) {
            this.stopAllMediaStreams();
            this.jitsiRoom.leave().then(function () {
                _this.leaveBGConference();
            }).catch(function (error) {
                _this.leaveBGConference();
            });
        }
        else {
            this.leaveBGConference();
        }
    };
    BizGazeMeeting.prototype.forceStop = function () {
        this.stop();
    };
    /**
     * **************************************************************************
     *              BizGaze SignalR Server interaction
     *
     *          Connect
     *          Join/Leave
     *          Control Message
     * **************************************************************************
     */
    BizGazeMeeting.prototype.connectToBGServer = function (callback) {
        var _this = this;
        // Connect to the signaling server
        this.connection.start().then(function () {
            _this.registerBGServerCallbacks();
            callback();
        }).catch(function (err) {
            return console.error(err.toString());
        });
    };
    BizGazeMeeting.prototype.joinBGConference = function () {
        this.connection.invoke("Join", "" + window._roomId, "" + window._userId, "" + window._anonymousUserName).catch(function (err) {
            return console.error("Join Meeting Failed.", err.toString());
        });
    };
    //this is the entry point where we can decide webinar/group chatting
    //                        where we can decide i am host or not
    BizGazeMeeting.prototype.onBGConferenceJoined = function (roomInfo, userInfo) {
        var _this = this;
        this.joinedBGConference = true;
        this.localStartTimestamp = Date.now();
        this.roomInfo = roomInfo;
        this.Log("Meeting Type: " + (roomInfo.IsWebinar ? "Webinar" : "Group Chatting"));
        this.myInfo.Id = userInfo.Id;
        this.myInfo.Name = userInfo.Name;
        this.myInfo.IsHost = userInfo.IsHost;
        var deviceUsePolicy = this.getInitMediaPolicy();
        this.myInfo.mediaPolicy.useCamera = deviceUsePolicy.useCamera;
        this.myInfo.mediaPolicy.useMic = deviceUsePolicy.useMic;
        this.ui.updateByRole(this.myInfo.IsHost);
        this.ui.toolbar.updateByRole(this.myInfo.IsHost);
        this.ui.updateJoiningInfo();
        this.initMediaDevices()
            .then(function (_) {
            //connect to jitsi server and enter room
            _this.connectToJitsiServer();
        });
    };
    BizGazeMeeting.prototype.leaveBGConference = function () {
        this.Log("leaving Meeting " + this.joinedBGConference);
        /*if (this.joinedBGConference) {
            this.connection.invoke("LeaveRoom").catch((err: any) => {
                return console.error("Leave Meeting Failed.", err.toString());
            });
        } else*/ {
            this.stopAllMediaStreams();
            $("form#return").submit();
        }
    };
    BizGazeMeeting.prototype.onBGConferenceLeft = function () {
        this.joinedBGConference = false;
        this.stopAllMediaStreams();
        this.m_BGUserList.clear();
        $("form#return").submit();
    };
    BizGazeMeeting.prototype.onBGUserJoined = function (userInfo) {
        this.m_BGUserList.set(userInfo.Id, userInfo);
    };
    BizGazeMeeting.prototype.onBGUserLeft = function (userId) {
        //self leave
        if (userId == this.myInfo.Id) {
            this.onBGConferenceLeft();
        }
        // participant left
        else {
            if (this.m_BGUserList.has(userId)) {
                var bizUser = this.m_BGUserList.get(userId);
                if (bizUser.Jitsi_Id && this.jitsiRoomJoined()) {
                    var jitsiUser = this.jitsiRoom.getParticipantById(bizUser.Jitsi_Id);
                    if (jitsiUser)
                        this.onJitsiUserLeft(bizUser.Jitsi_Id, jitsiUser);
                }
                this.Log(this.m_BGUserList.get(userId).Name + " has left");
                this.m_BGUserList.delete(userId);
            }
        }
    };
    BizGazeMeeting.prototype.registerBGServerCallbacks = function () {
        var _this = this;
        this.connection.on(bg_1.BGtoUser.ROOM_JOINED, function (strRoomInfo, strMyInfo) {
            var roomInfo = JSON.parse(strRoomInfo);
            var myInfo = JSON.parse(strMyInfo);
            _this.onBGConferenceJoined(roomInfo, myInfo);
        });
        this.connection.on(bg_1.BGtoUser.ROOM_USER_JOINED, function (strUserInfo) {
            var info = JSON.parse(strUserInfo);
            _this.onBGUserJoined(info);
        });
        this.connection.on(bg_1.BGtoUser.ERROR, function (message) {
            _this.forceStop();
        });
        this.connection.on(bg_1.BGtoUser.ROOM_LEFT, function (clientId) {
            _this.onBGUserLeft(clientId);
        });
        this.connection.on(bg_1.BGtoUser.SIGNALING, function (sourceId, strMsg) {
            /*console.log(' received signaling message:', strMsg);
            let msg = JSON.parse(strMsg);
            if (sourceId != this.myInfo.Id && this.connMap.has(sourceId)) {
                let peerConn: BizGazeConnection = this.connMap.get(sourceId);
                peerConn.onSignalingMessage(msg);
            }*/
        });
    };
    BizGazeMeeting.prototype.sendBGSignalingMessage = function (destId, msg) {
        this.connection.invoke(bg_1.BGtoUser.SIGNALING, this.myInfo.Id, destId, JSON.stringify(msg)).catch(function (err) {
            return console.error(err.toString());
        });
    };
    /**
     * **************************************************************************
     *              Local Camera/Microphone init
     *
     * **************************************************************************
     */
    BizGazeMeeting.prototype.initMediaDevices = function () {
        var _this = this;
        this.Log('Getting user media devices ...');
        //set speaker
        if (this.activeSpeakerId && this.JitsiMeetJS.mediaDevices.isDeviceChangeAvailable('output')) {
            this.JitsiMeetJS.mediaDevices.setAudioOutputDevice(this.activeSpeakerId);
        }
        ;
        //set input devices
        var cameraId = this.activeCameraId;
        var micId = this.activeMicId;
        return this.createLocalTracks(cameraId, micId)
            .then(function (tracks) {
            if (tracks.length <= 0) {
                throw new Error("no tracks");
            }
            tracks.forEach(function (track, index) {
                if (track.getType() === MediaType_1.MediaType.VIDEO) {
                    if (!_this.myInfo.mediaPolicy.useCamera)
                        track.mute();
                    else
                        track.unmute();
                }
                else if (track.getType() === MediaType_1.MediaType.AUDIO) {
                    if (!_this.myInfo.mediaPolicy.useMic)
                        track.mute();
                    else
                        track.unmute();
                }
            });
            _this.onLocalTrackAdded(tracks);
            return Promise.resolve();
        }).catch(function (error) {
            _this.ui.toolbar.update(_this.myInfo, _this.getLocalTracks());
            if (!_this.roomInfo.IsWebinar || _this.myInfo.IsHost)
                _this._updateMyPanel();
            return Promise.resolve();
        });
    };
    BizGazeMeeting.prototype.createVideoTrack = function (cameraDeviceId) {
        var _this = this;
        return this.JitsiMeetJS.createLocalTracks({
            devices: ['video'],
            cameraDeviceId: cameraDeviceId,
            micDeviceId: null
        })
            .catch(function (error) {
            _this.Log(error);
            return Promise.resolve([]);
        });
    };
    BizGazeMeeting.prototype.createAudioTrack = function (micDeviceId) {
        var _this = this;
        return (this.JitsiMeetJS.createLocalTracks({
            devices: ['audio'],
            cameraDeviceId: null,
            micDeviceId: micDeviceId
        })
            .catch(function (error) {
            _this.Log(error);
            return Promise.resolve([]);
        }));
    };
    BizGazeMeeting.prototype.createLocalTracks = function (cameraDeviceId, micDeviceId) {
        var _this = this;
        if (cameraDeviceId != null && micDeviceId != null) {
            return this.JitsiMeetJS.createLocalTracks({
                devices: ['audio', 'video'],
                cameraDeviceId: cameraDeviceId,
                micDeviceId: micDeviceId
            }).catch(function () { return Promise.all([
                _this.createAudioTrack(micDeviceId).then(function (_a) {
                    var stream = _a[0];
                    return stream;
                }),
                _this.createVideoTrack(cameraDeviceId).then(function (_a) {
                    var stream = _a[0];
                    return stream;
                })
            ]); }).then(function (tracks) {
                return tracks.filter(function (t) { return typeof t !== 'undefined'; });
            });
        }
        else if (cameraDeviceId != null) {
            return this.createVideoTrack(cameraDeviceId);
        }
        else if (micDeviceId != null) {
            return this.createAudioTrack(micDeviceId);
        }
        return Promise.resolve([]);
    };
    BizGazeMeeting.prototype.onLocalTrackAdded = function (tracks) {
        return __awaiter(this, void 0, void 0, function () {
            var i, localVideoTrack;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (tracks.length <= 0)
                            return [2 /*return*/];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < tracks.length)) return [3 /*break*/, 4];
                        tracks[i].addEventListener(this.JitsiMeetJS.events.track.TRACK_AUDIO_LEVEL_CHANGED, function (audioLevel) { return console.log("Audio Level local: " + audioLevel); });
                        tracks[i].addEventListener(this.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED, function (track) { _this.updateUiOnLocalTrackChange(); });
                        tracks[i].addEventListener(this.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, function (track) { _this.updateUiOnLocalTrackChange(); });
                        tracks[i].addEventListener(this.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED, function (deviceId) {
                            return console.log("track audio output device was changed to " + deviceId);
                        });
                        if (this.jitsiRoomJoined())
                            this.Log("[ OUT ] my track - " + tracks[i].getType());
                        return [4 /*yield*/, this.replaceLocalTrack(tracks[i], tracks[i].getType())];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        //toolbar
                        this.ui.toolbar.update(this.myInfo, this.getLocalTracks());
                        //my video panel
                        this._updateMyPanel();
                        localVideoTrack = this.getLocalTrackByType(MediaType_1.MediaType.VIDEO);
                        if (localVideoTrack && this.localVideoPanel) {
                            localVideoTrack.attach(this.localVideoPanel.videoElem);
                            this.localVideoPanel.videoElem.play();
                            this.localVideoPanel.setShotnameVisible(false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.stopAllMediaStreams = function () {
        var _this = this;
        var localTracks = __spreadArray([], this.getLocalTracks());
        localTracks.forEach(function (track) {
            _this.removeLocalTrack(track).then(function (_) {
                track.dispose();
            });
        });
    };
    BizGazeMeeting.prototype.onDeviceChange = function (newDevices) {
        var _this = this;
        var videoDeviceChanged = this.activeCameraId !== newDevices.cameraId;
        var audioDeviceChanged = this.activeMicId !== newDevices.micId;
        //create new tracks with new devices
        this.createLocalTracks(videoDeviceChanged ? newDevices.cameraId : null, audioDeviceChanged ? newDevices.micId : null)
            .then(function (tracks) {
            _this.onLocalTrackAdded(tracks);
        });
        this.activeCameraId = newDevices.cameraId;
        this.activeMicId = newDevices.micId;
        this.activeSpeakerId = newDevices.speakerId;
    };
    BizGazeMeeting.prototype.getActiveDevices = function () {
        var activeDevices = new ActiveDevices_1.ActiveDevices();
        activeDevices.cameraId = this.activeCameraId;
        activeDevices.micId = this.activeMicId;
        activeDevices.speakerId = this.activeSpeakerId;
        return activeDevices;
    };
    BizGazeMeeting.prototype.getInitMediaPolicy = function () {
        var useCamera = true;
        var useMic = true;
        if (this.roomInfo.IsWebinar) {
            if (!this.myInfo.IsHost) {
                useCamera = false;
                useMic = false;
            }
        }
        if (this.roomInfo.channelType === ChannelType_1.ChannelType.AudioOnly)
            useCamera = false;
        if (this.roomInfo.channelType === ChannelType_1.ChannelType.VideoOnly)
            useMic = false;
        if (window._videoMute !== "true")
            useCamera = false;
        if (window._audioMute !== "true")
            useMic = false;
        var policy = new InputDevicePolicy_1.InputMediaPolicy();
        policy.useCamera = useCamera;
        policy.useMic = useMic;
        this.Log("useCamera " + useCamera);
        this.Log("useMic " + useMic);
        return policy;
    };
    /**
     * **************************************************************************
     *              Local Track Access
     *
     * **************************************************************************
     */
    BizGazeMeeting.prototype.jitsiRoomJoined = function () {
        return this.jitsiRoom && this.jitsiRoom.isJoined();
    };
    BizGazeMeeting.prototype.getLocalTracks = function () {
        if (this.jitsiRoomJoined())
            return this.jitsiRoom.getLocalTracks();
        else
            return this.localTracks;
    };
    BizGazeMeeting.prototype.getLocalTrackByType = function (type) {
        if (this.jitsiRoomJoined()) {
            var tracks = this.jitsiRoom.getLocalTracks(type);
            if (tracks.length > 0)
                return tracks[0];
            return null;
        }
        else {
            var track = this.localTracks.find(function (t) { return t.getType() === type; });
            return track;
        }
    };
    BizGazeMeeting.prototype.removeLocalTrack = function (track) {
        if (this.jitsiRoomJoined()) {
            return this.jitsiRoom.removeTrack(track);
        }
        else {
            var index = this.localTracks.indexOf(track);
            if (index >= 0)
                this.localTracks.splice(index, 1);
            return Promise.resolve();
        }
    };
    //type is neccessray when newTrack is null
    BizGazeMeeting.prototype.replaceLocalTrack = function (newTrack, type) {
        return __awaiter(this, void 0, void 0, function () {
            var oldTrack;
            var _this = this;
            return __generator(this, function (_a) {
                oldTrack = this.getLocalTrackByType(type);
                if (oldTrack === newTrack)
                    return [2 /*return*/, Promise.reject()];
                if (!oldTrack && !newTrack)
                    return [2 /*return*/, Promise.reject()];
                if (this.jitsiRoomJoined()) {
                    return [2 /*return*/, this.jitsiRoom.replaceTrack(oldTrack, newTrack).then(function (_) {
                            if (oldTrack)
                                oldTrack.dispose();
                            _this.updateUiOnLocalTrackChange();
                            return Promise.resolve();
                        })];
                }
                else {
                    return [2 /*return*/, this.removeLocalTrack(oldTrack).then(function (_) {
                            if (oldTrack)
                                oldTrack.dispose();
                            if (newTrack)
                                _this.localTracks.push(newTrack);
                            _this.updateUiOnLocalTrackChange();
                            return Promise.resolve();
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    BizGazeMeeting.prototype.updateUiOnLocalTrackChange = function () {
        if (this.localVideoPanel)
            this._updateMyPanel();
        this.ui.toolbar.update(this.myInfo, this.getLocalTracks());
    };
    /**
     * **************************************************************************
     *              Jitsi Server interaction
     *         Connect
     *         Enter/Leave Room
     *         Send/Receive Track
     *         UserInfo
     * **************************************************************************
     */
    BizGazeMeeting.prototype.connectToJitsiServer = function () {
        var _this = this;
        var serverdomain = this.JitsiServerDomain;
        var connConf = {
            hosts: {
                domain: serverdomain,
                muc: "conference." + serverdomain,
            },
            bosh: "//" + serverdomain + "/http-bind",
            // The name of client node advertised in XEP-0115 'c' stanza
            clientNode: "//" + serverdomain + "/jitsimeet"
        };
        this.jitsiConnection = new this.JitsiMeetJS.JitsiConnection(null, null, connConf);
        this.jitsiConnection.addEventListener(this.JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, function () { _this.onJitsiConnectionSuccess(); });
        this.jitsiConnection.addEventListener(this.JitsiMeetJS.events.connection.CONNECTION_FAILED, function () { _this.onJitsiConnectionFailed(); });
        this.jitsiConnection.addEventListener(this.JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, function () { _this.disconnectFromJitsiServer(); });
        this.jitsiConnection.connect();
    };
    BizGazeMeeting.prototype.onJitsiConnectionSuccess = function () {
        this.Log("Connected to Jitsi Server - " + this.JitsiServerDomain);
        this.joinJitsiConference();
    };
    BizGazeMeeting.prototype.onJitsiConnectionFailed = function () {
        this.Log("Failed to connect Jitsi Server - " + this.JitsiServerDomain);
        this.stop();
    };
    BizGazeMeeting.prototype.disconnectFromJitsiServer = function () {
        this.Log("Disconnected from Jitsi Server - " + this.JitsiServerDomain);
        this.stop();
    };
    BizGazeMeeting.prototype.joinJitsiConference = function () {
        var _this = this;
        var confOptions = {
            openBridgeChannel: true
        };
        this.jitsiRoom = this.jitsiConnection.initJitsiConference("" + this.roomInfo.Id, confOptions);
        //remote track
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.TRACK_ADDED, function (track) {
            _this.onRemoteTrackAdded(track);
        });
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.TRACK_REMOVED, function (track) {
            _this.onRemovedRemoteTrack(track);
        });
        //my join
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.CONFERENCE_JOINED, function () { _this.onJitsiConferenceJoined(); });
        //my left
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.CONFERENCE_LEFT, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            this.onJitsiConferenceLeft();
            return [2 /*return*/];
        }); }); });
        //remote join
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.USER_JOINED, function (id, user) {
            _this.onJitsiUserJoined(id, user);
            console.log("-------------user:");
            console.log(user);
            //remoteTracks[id] = [];
        });
        //remote left
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.USER_LEFT, function (id, user) {
            _this.onJitsiUserLeft(id, user);
        });
        //track mute
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, function (track) {
            if (track.isLocal())
                _this.onLocalTrackMuteChanged(track);
            else
                _this.onRemoteTrackMuteChanged(track);
        });
        //audio level change
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.TRACK_AUDIO_LEVEL_CHANGED, function (userID, audioLevel) {
            _this.Log(userID + " - " + audioLevel);
        });
        //chat
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.MESSAGE_RECEIVED, function (id, message, timestamp) {
            _this.onReceiveChatMessage(id, message, timestamp);
        });
        //private message object
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.ENDPOINT_MESSAGE_RECEIVED, function (peer, message) {
            if (message && message.type === "biz_private") {
                _this.onPrivateCommand(message.senderId, message.subtype, message.message);
            }
        });
        //dominant speaker
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.DOMINANT_SPEAKER_CHANGED, function (id, previousSpeakers) {
            _this.onDominantSpeakerChanged(id);
        });
        //name change
        this.jitsiRoom.on(this.JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, function (userID, displayName) {
            console.log(userID + " - " + displayName);
        });
        //command
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.KICK_OUT, function (param) {
            _this.onKickedOut(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.MUTE_All_AUDIO, function (param) {
            _this.onMuteAllAudio(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.MUTE_All_VIDEO, function (param) {
            _this.onMuteAllVideo(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.GRANT_HOST_ROLE, function (param) {
            _this.onChangedModerator(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.MUTE_AUDIO, function (param) {
            _this.onMutedAudio(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.MUTE_VIDEO, function (param) {
            _this.onMutedVideo(param);
        });
        /*this.jitsiRoom.addCommandListener(JitsiCommand.ALLOW_CAMERA, (param: JitsiCommandParam) => {
            this.onAllowCameraCommand(param)
        });
        this.jitsiRoom.addCommandListener(JitsiCommand.ALLOW_MIC, (param: JitsiCommandParam) => {
            this.onAllowMicCommand(param)
        });*/
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.INIT_MEDIA_POLICY, function (param) {
            _this.onInitMediaPolicy(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.BIZ_ID, function (param) {
            _this.onBizId(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.ASK_RECORDING, function (param) {
            _this.onAskRecording(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.ASK_SCREENSHARE, function (param) {
            _this.onAskScreenShare(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.ASK_HANDRAISE, function (param) {
            _this.onAskHandRaise(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.FILE_META, function (param) {
            _this.onFileMeta(param);
        });
        this.jitsiRoom.addCommandListener(jitsi_1.JitsiCommand.FILE_SLICE, function (param) {
            _this.onFileData(param);
        });
        //set name
        this.jitsiRoom.setDisplayName(this.myInfo.Name);
        for (var i = 0; i < this.localTracks.length; i++) {
            this.Log("[ OUT ] my track - " + this.localTracks[i].getType());
            this.jitsiRoom.addTrack(this.localTracks[i]).catch(function (error) {
                _this.Log(error);
            });
        }
        //joinJitsiConference
        this.jitsiRoom.join(); //callback -  onJitsiUserJoined
    };
    BizGazeMeeting.prototype.leaveJitsiConference = function () {
    };
    //my enter room
    BizGazeMeeting.prototype.onJitsiConferenceJoined = function () {
        var _this = this;
        this.myInfo.Jitsi_Id = this.jitsiRoom.myUserId();
        this.Log("Jitsi_Id : " + this.myInfo.Jitsi_Id);
        //set subject
        this.ui.meetingDescWidget.setSubject(this.roomInfo.conferenceName, this.roomInfo.hostName);
        var audioMute = true;
        var videoMute = true;
        this.getLocalTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && !track.isMuted())
                videoMute = false;
            if (track.getType() === MediaType_1.MediaType.AUDIO && !track.isMuted())
                audioMute = false;
        });
        //add list
        //if (this.myInfo.IsHost) 
        {
            this.ui.addParticipant(this.jitsiRoom.myUserId(), this.myInfo.Name, true, videoMute, audioMute);
        }
        //set time
        setInterval(function () {
            var delta = Date.now() - _this.localStartTimestamp;
            var elapsed = _this.roomInfo.elapsed + delta;
            _this.ui.meetingDescWidget.updateTime(TimeUtil_1.TsToDateFormat(elapsed));
        }, 1000);
        //send media policy
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.INIT_MEDIA_POLICY, this.myInfo.Jitsi_Id, this.myInfo.mediaPolicy);
        //send bizgaze id
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.BIZ_ID, this.myInfo.Id);
    };
    //my leave room
    BizGazeMeeting.prototype.onJitsiConferenceLeft = function () {
        this.myInfo.Jitsi_Id = null;
        this.leaveBGConference();
    };
    //remote-user enter room
    BizGazeMeeting.prototype.onJitsiUserJoined = function (jitsiId, user) {
        var _this = this;
        this.Log("joined user: " + user.getDisplayName());
        this.ui.notification(user.getDisplayName(), "New Participant joined", NotificationType_1.NotificationType.User);
        //if track doesn't arrive for certain time
        //generate new panel for that user
        if (!this.roomInfo.IsWebinar) {
            setTimeout(function () {
                if (!user.getProperty(UserProperty_1.UserProperty.videoPanel)) {
                    var videoPanel = _this.ui.videoPanelGrid.getNewVideoPanel();
                    user.setProperty(UserProperty_1.UserProperty.videoPanel, videoPanel);
                    _this._updateUserPanel(user);
                }
            }, 1000);
        }
        var audioMute = true;
        var videoMute = true;
        user.getTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && !track.isMuted())
                videoMute = false;
            if (track.getType() === MediaType_1.MediaType.AUDIO && !track.isMuted())
                videoMute = false;
        });
        //add list
        //if (this.myInfo.IsHost) 
        {
            this.ui.addParticipant(jitsiId, user.getDisplayName(), false, //me?
            videoMute, //use camera?
            audioMute //use mic?
            );
        }
        //notify him that i am moderator
        if (this.myInfo.IsHost)
            this.grantModeratorRole(this.jitsiRoom.myUserId());
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.MEDIA_POLICY, this.myInfo.mediaPolicy);
        this.commandQueue.executeQueuedCommands(jitsiId);
        this.privateCommandQueue.executeQueuedCommands(jitsiId);
    };
    //remote leave room
    BizGazeMeeting.prototype.onJitsiUserLeft = function (jitsiId, user) {
        var _this = this;
        this.ui.notification_warning(user.getDisplayName(), "Participant left", NotificationType_1.NotificationType.User);
        this.Log("left user: " + user.getDisplayName());
        var videoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
        if (videoPanel) {
            this.ui.videoPanelGrid.freeVideoPanel(videoPanel.Id);
            user.setProperty(UserProperty_1.UserProperty.videoPanel, null);
        }
        //remove list
        this.ui.removeParticipant(jitsiId);
        //remove from list
        this.m_BGUserList.forEach(function (bzUser, bizId) {
            if (bzUser.Jitsi_Id == jitsiId) {
                _this.m_BGUserList.delete(bizId);
            }
        });
    };
    BizGazeMeeting.prototype.onBizId = function (param) {
        var senderJitsiId = param.attributes.senderId;
        if (senderJitsiId === this.myInfo.Jitsi_Id)
            return;
        var user = this.jitsiRoom.getParticipantById(senderJitsiId);
        if (user) {
            var bizId = param.value;
            var bizUser = this.m_BGUserList.get(bizId);
            if (bizUser)
                bizUser.Jitsi_Id = senderJitsiId;
        }
        else {
            this.commandQueue.queueCommand(senderJitsiId, jitsi_1.JitsiCommand.BIZ_ID, param, this.onBizId.bind(this));
        }
    };
    //[ IN ] remote track
    BizGazeMeeting.prototype.onRemoteTrackAdded = function (track) {
        if (track.isLocal()) {
            return;
        }
        this.Log("[ IN ] remote track - " + track.getType());
        if (this.roomInfo.IsWebinar && track.isMuted())
            return;
        //add to ui
        var id = track.getParticipantId();
        var user = this.jitsiRoom.getParticipantById(id);
        if (!user) {
            this.Log(user.getDisplayName() + " not yet added");
            return;
        }
        var videoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
        if (!videoPanel) {
            videoPanel = this.ui.videoPanelGrid.getNewVideoPanel();
            user.setProperty(UserProperty_1.UserProperty.videoPanel, videoPanel);
        }
        if (track.getType() === MediaType_1.MediaType.VIDEO) {
            var videoElem = videoPanel.videoElem;
            track.attach(videoElem);
            videoElem.play();
        }
        else if (track.getType() === MediaType_1.MediaType.AUDIO) {
            var audioElem = videoPanel.audioElem;
            track.attach(audioElem);
            audioElem.play();
        }
        this._updateUserPanel(user);
    };
    // [DEL] remote track
    BizGazeMeeting.prototype.onRemovedRemoteTrack = function (track) {
        if (track.isLocal()) {
            this.Log("[ DEL ] localtrack - " + track.getType());
        }
        else {
            this.Log("[ DEL ] remotetrack - " + track.getType());
        }
        track.removeAllListeners(this.JitsiMeetJS.events.track.TRACK_AUDIO_LEVEL_CHANGED);
        track.removeAllListeners(this.JitsiMeetJS.events.track.TRACK_MUTE_CHANGED);
        track.removeAllListeners(this.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED);
        track.removeAllListeners(this.JitsiMeetJS.events.track.TRACK_VIDEOTYPE_CHANGED);
        track.removeAllListeners(this.JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED);
        track.removeAllListeners(this.JitsiMeetJS.events.track.NO_DATA_FROM_SOURCE);
        if (!track.isLocal()) {
            var jitsiId = track.getParticipantId();
            var user = this.jitsiRoom.getParticipantById(jitsiId);
            if (this.roomInfo.IsWebinar) {
                var IsHost = user.getProperty(UserProperty_1.UserProperty.IsHost);
                var userVideoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
                if (!IsHost && user.getTracks().length <= 0 && userVideoPanel) {
                    this.ui.videoPanelGrid.freeVideoPanel(userVideoPanel.Id);
                    user.setProperty(UserProperty_1.UserProperty.videoPanel, null);
                }
            }
            this._updateUserPanel(user);
        }
        else {
            this.updateUiOnLocalTrackChange();
        }
    };
    BizGazeMeeting.prototype._updateUserPanel = function (user) {
        if (user && user.getProperty(UserProperty_1.UserProperty.videoPanel)) {
            var videoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
            videoPanel.updatePanelOnJitsiUser(this.myInfo, user);
        }
    };
    BizGazeMeeting.prototype._updateMyPanel = function () {
        if (this.localVideoPanel == null) {
            if (this.roomInfo.IsWebinar && !this.myInfo.IsHost) {
                var isAllMuted_1 = true;
                this.getLocalTracks().forEach(function (track) {
                    if (!track.isMuted())
                        isAllMuted_1 = false;
                });
                if (!isAllMuted_1)
                    this.localVideoPanel = this.ui.videoPanelGrid.getNewVideoPanel();
            }
            else {
                this.localVideoPanel = this.ui.videoPanelGrid.getNewVideoPanel();
            }
        }
        if (this.localVideoPanel)
            this.localVideoPanel.updatePanelOnMyBGUser(this.myInfo, this.getLocalTracks());
    };
    /**
     * **************************************************************************
     *                Messaging between Jitsi participants
     *        Broadcast
     *        Private
     *
     * **************************************************************************
     */
    //ATTENTION! attributes = {key1: not object, key2: not object, ...}
    //send as primitive type like boolean, string, number...
    //and decode when use value1, vaule2
    BizGazeMeeting.prototype.sendJitsiBroadcastCommand = function (type, value, attributes) {
        if (attributes === void 0) { attributes = null; }
        var param = new JitsiCommandParam_1.JitsiCommandParam();
        param.value = value;
        if (!!attributes && typeof attributes === "object" && attributes.constructor.name === "Object")
            param.attributes = __assign({}, attributes);
        param.attributes.senderId = this.myInfo.Jitsi_Id;
        param.attributes.senderName = this.myInfo.Name;
        this.jitsiRoom.sendCommandOnce(type, param);
    };
    BizGazeMeeting.prototype.sendJitsiPrivateCommand = function (targetId, type, message) {
        var payload = {
            type: "biz_private",
            subtype: type,
            senderId: this.myInfo.Jitsi_Id,
            message: message
        };
        this.jitsiRoom.sendMessage(payload, targetId);
    };
    BizGazeMeeting.prototype.onPrivateCommand = function (senderId, type, message) {
        var user = this.jitsiRoom.getParticipantById(senderId);
        if (!user) {
            this.privateCommandQueue.queueCommand(senderId, type, message, this.onPrivateCommand.bind(this));
            return;
        }
        if (type === jitsi_1.JitsiPrivateCommand.MEDIA_POLICY) {
            var policy = message;
            this.onUserMediaPolicy(senderId, policy);
        }
        else if (type === jitsi_1.JitsiPrivateCommand.ALLOW_RECORDING) {
            var allow = message.allow;
            this.onAllowRecording(senderId, allow);
        }
        else if (type === jitsi_1.JitsiPrivateCommand.ALLOW_SCREENSHARE) {
            var allow = message.allow;
            this.onAllowScreenshare(senderId, allow);
        }
        else if (type === jitsi_1.JitsiPrivateCommand.ALLOW_HANDRAISE) {
            var allow = message.allow;
            this.onAllowHandRaise(senderId, allow);
        }
        else if (type === jitsi_1.JitsiPrivateCommand.PRIVATE_CAHT) {
            this.onReceivePrivateChatMessage(senderId, message);
        }
    };
    /**
     * **************************************************************************
     *                Meeting Logic
     *        Moderator
     *        Mute/Unmute Audio/Video
     *        ScreenShare
     *        Recording
     *        Chatting
     *        File Sharing
     *
     * **************************************************************************
     */
    BizGazeMeeting.prototype.sendRemoteControlReply = function (type, e, targetId) {
        //this.Log("Sending remoteControl");
        var param = {
            name: 'remote-control',
            type: '',
            action: '',
            button: 0,
            x: 0,
            y: 0,
            modifiers: {},
            key: ''
        };
        switch (type) {
            case 'permissions':
                param.type = 'permissions';
                param.action = 'request';
                break;
            case 'mousemove':
                param.type = 'mousemove';
                param.x = e.x;
                param.y = e.y;
                break;
            case 'mousedown':
                param.type = 'mousedown';
                param.button = e.button;
                break;
            case 'mouseup':
                param.type = 'mouseup';
                param.button = e.button;
                break;
            case 'keydown':
                param.type = 'keydown';
                param.modifiers = e.modifiers;
                param.key = keyboardEventToKey(e.key);
                console.info('--------------------param', param);
                break;
            case 'keyup':
                param.type = 'keyup';
                param.modifiers = e.modifiers;
                param.key = keyboardEventToKey(e.key);
                console.info('--------------------param', param);
                break;
        }
        /*let param = {
            name: 'remote-control',
            type: 'mousedown',
            button: 1
        };*/
        this.jitsiRoom.sendEndpointMessage(targetId, param);
    };
    BizGazeMeeting.prototype.kickParticipantOut = function (targetId) {
        this.Log("Sending kick out");
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.KICK_OUT, targetId);
    };
    BizGazeMeeting.prototype.onKickedOut = function (param) {
        this.Log("received kick out");
        var targetId = param.value;
        if (targetId === this.myInfo.Jitsi_Id) {
            this.forceStop();
        }
    };
    //moderator
    BizGazeMeeting.prototype.grantModeratorRole = function (targetId) {
        this.Log("Sending grant host");
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.GRANT_HOST_ROLE, targetId);
    };
    BizGazeMeeting.prototype.onChangedModerator = function (param) {
        var _this = this;
        this.Log("received grant host");
        var targetId = param.value;
        var senderName = param.attributes.senderName;
        var senderId = param.attributes.senderId;
        if (targetId === this.myInfo.Jitsi_Id) {
            if (senderId !== targetId) {
                this.ui.notification_warning(senderName, "You're granted co-host permission", NotificationType_1.NotificationType.GrantHost);
                this.myInfo.IsHost = true;
                this._updateMyPanel();
                this.jitsiRoom.getParticipants().forEach(function (user) {
                    _this._updateUserPanel(user);
                });
                this.ui.updateByRole(this.myInfo.IsHost);
            }
        }
        else {
            var user = this.jitsiRoom.getParticipantById(targetId);
            if (user) {
                user.setProperty(UserProperty_1.UserProperty.IsHost, true);
                this._updateUserPanel(user);
            }
            else {
                this.commandQueue.queueCommand(targetId, jitsi_1.JitsiCommand.GRANT_HOST_ROLE, param, this.onChangedModerator.bind(this));
            }
        }
    };
    BizGazeMeeting.prototype.onInitMediaPolicy = function (param) {
        var sourceId = param.value;
        if (sourceId === this.myInfo.Jitsi_Id)
            return;
        this.Log("received initMediaPolicy from " + sourceId);
        var user = this.jitsiRoom.getParticipantById(sourceId);
        if (user) {
            var useCamera = param.attributes.useCamera === "true";
            var useMic = param.attributes.useMic === "true";
            this.ui.participantsListWidget.setMuteCamera(sourceId, !useCamera);
            this.ui.participantsListWidget.setMuteMic(sourceId, !useMic);
        }
        else {
            this.Log("delaying initMediaPolicy callback");
            this.commandQueue.queueCommand(sourceId, jitsi_1.JitsiCommand.INIT_MEDIA_POLICY, param, this.onInitMediaPolicy.bind(this));
        }
    };
    BizGazeMeeting.prototype.onUserMediaPolicy = function (senderId, policy) {
        this.ui.participantsListWidget.setMuteCamera(senderId, !policy.useCamera);
        this.ui.participantsListWidget.setMuteMic(senderId, !policy.useMic);
    };
    //mute myself
    //called when user click toolbar buttons
    BizGazeMeeting.prototype.OnToggleMuteMyAudio = function () {
        if (this.roomInfo.IsControlAllowed && !this.myInfo.IsHost)
            return;
        var audioMuted = false;
        this.getLocalTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.AUDIO && track.isMuted())
                audioMuted = true;
        });
        this.muteMyAudio(!audioMuted);
    };
    BizGazeMeeting.prototype.OnToggleMuteMyVideo = function () {
        if (this.roomInfo.IsControlAllowed && !this.myInfo.IsHost)
            return;
        var videoMuted = false;
        this.getLocalTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO && track.isMuted())
                videoMuted = true;
        });
        this.muteMyVideo(!videoMuted);
    };
    BizGazeMeeting.prototype.muteMyAudio = function (mute) {
        this.getLocalTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.AUDIO) {
                if (mute)
                    track.mute();
                else
                    track.unmute();
            }
        });
    };
    BizGazeMeeting.prototype.muteMyVideo = function (mute) {
        this.getLocalTracks().forEach(function (track) {
            if (track.getType() === MediaType_1.MediaType.VIDEO) {
                if (mute)
                    track.mute();
                else
                    track.unmute();
            }
        });
    };
    //mute others
    BizGazeMeeting.prototype.muteUserAudio = function (targetId, mute) {
        if (targetId === this.myInfo.Jitsi_Id)
            this.muteMyAudio(mute);
        else
            this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.MUTE_AUDIO, targetId, { mute: mute });
    };
    BizGazeMeeting.prototype.muteUserVideo = function (targetId, mute) {
        if (targetId === this.myInfo.Jitsi_Id)
            this.muteMyVideo(mute);
        else
            this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.MUTE_VIDEO, targetId, { mute: mute });
    };
    BizGazeMeeting.prototype.onMutedAudio = function (param) {
        var targetId = param.value;
        var senderId = param.attributes.senderId;
        var senderName = param.attributes.senderName;
        var mute = param.attributes.mute === "true";
        if (targetId == this.myInfo.Jitsi_Id) {
            if (senderId !== targetId) {
                if (mute) {
                    this.ui.askDialog(senderName, "Requested to mute your microphone", NotificationType_1.NotificationType.AudioMute, this.muteMyAudio.bind(this), null, mute);
                }
                else {
                    this.ui.askDialog(senderName, "Requested to unmute your microphone", NotificationType_1.NotificationType.Audio, this.muteMyAudio.bind(this), null, mute);
                }
            }
            else {
                this.muteMyAudio(mute);
            }
        }
    };
    BizGazeMeeting.prototype.onMutedVideo = function (param) {
        var targetId = param.value;
        var senderId = param.attributes.senderId;
        var senderName = param.attributes.senderName;
        var mute = param.attributes.mute === "true";
        if (targetId == this.myInfo.Jitsi_Id) {
            if (senderId !== targetId) {
                if (mute) {
                    this.ui.askDialog(senderName, "Requested to mute your camera", NotificationType_1.NotificationType.VideoMute, this.muteMyVideo.bind(this), null, mute);
                }
                else {
                    this.ui.askDialog(senderName, "Requested to unmute your camera", NotificationType_1.NotificationType.Video, this.muteMyVideo.bind(this), null, mute);
                }
            }
            else {
                this.muteMyVideo(mute);
            }
        }
    };
    BizGazeMeeting.prototype.onLocalTrackMuteChanged = function (track) {
        var id = track.getParticipantId();
        if (this.roomInfo.IsWebinar && !this.myInfo.IsHost) {
            var isAllMuted_2 = true;
            this.getLocalTracks().forEach(function (t) {
                if (!t.isMuted())
                    isAllMuted_2 = false;
            });
            if (isAllMuted_2) {
                if (this.localVideoPanel) { //remote it
                    this.ui.videoPanelGrid.freeVideoPanel(this.localVideoPanel.Id);
                    this.localVideoPanel = null;
                }
            }
            else {
                if (!this.localVideoPanel) {
                    this.localVideoPanel = this.ui.videoPanelGrid.getNewVideoPanel();
                }
                if (track.getType() === MediaType_1.MediaType.VIDEO) {
                    var videoElem = this.localVideoPanel.videoElem;
                    track.attach(videoElem);
                    videoElem.play();
                }
                else if (track.getType() === MediaType_1.MediaType.AUDIO) {
                    var audioElem = this.localVideoPanel.audioElem;
                    track.attach(audioElem);
                    audioElem.play();
                }
            }
        }
        this.updateUiOnLocalTrackChange();
        //update list
        if (track.getType() === MediaType_1.MediaType.VIDEO)
            this.ui.participantsListWidget.setMuteCamera(id, track.isMuted());
        else if (track.getType() === MediaType_1.MediaType.AUDIO)
            this.ui.participantsListWidget.setMuteMic(id, track.isMuted());
    };
    BizGazeMeeting.prototype.onRemoteTrackMuteChanged = function (track) {
        var id = track.getParticipantId();
        var user = this.jitsiRoom.getParticipantById(id);
        if (!user)
            return;
        if (this.roomInfo.IsWebinar) {
            var isAllMuted_3 = true;
            user.getTracks().forEach(function (t) {
                if (!t.isMuted())
                    isAllMuted_3 = false;
            });
            var videoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
            if (isAllMuted_3) {
                if (videoPanel) { //remote it
                    this.ui.videoPanelGrid.freeVideoPanel(videoPanel.Id);
                    user.setProperty(UserProperty_1.UserProperty.videoPanel, null);
                }
            }
            else {
                if (!videoPanel) {
                    videoPanel = this.ui.videoPanelGrid.getNewVideoPanel();
                    user.setProperty(UserProperty_1.UserProperty.videoPanel, videoPanel);
                }
                if (track.getType() === MediaType_1.MediaType.VIDEO) {
                    var videoElem = videoPanel.videoElem;
                    track.attach(videoElem);
                    videoElem.play();
                }
                else if (track.getType() === MediaType_1.MediaType.AUDIO) {
                    var audioElem = videoPanel.audioElem;
                    track.attach(audioElem);
                    audioElem.play();
                }
            }
        }
        //update panel
        this._updateUserPanel(user);
        //update list
        if (track.getType() === MediaType_1.MediaType.VIDEO)
            this.ui.participantsListWidget.setMuteCamera(id, track.isMuted());
        else if (track.getType() === MediaType_1.MediaType.AUDIO)
            this.ui.participantsListWidget.setMuteMic(id, track.isMuted());
    };
    //allow of camera, mic 
    /*public allowCamera(jitsiId: string, allow: boolean) {
        if (!this.myInfo.IsHost)
            return;

        this.sendJitsiBroadcastCommand(JitsiCommand.ALLOW_CAMERA, jitsiId, { allow: allow });
    }

    public allowMic(jitsiId: string, allow: boolean) {
        if (!this.myInfo.IsHost)
            return;

        this.sendJitsiBroadcastCommand(JitsiCommand.ALLOW_MIC, jitsiId, { allow: allow });
    }

    private onAllowCameraCommand(param: JitsiCommandParam) {
        const targetId = param.value;
        const allow = param.attributes.allow === "true";

        this.ui.participantsListWidget.setMuteCamera(targetId, allow);

        if (targetId === this.jitsiRoom.myUserId()) {
            if (param.attributes.senderId !== targetId) {
                if (allow) {
                    this.ui.notification(
                        param.attributes.senderName,
                        "Your camera was allowed",
                        NotificationType.Video
                    );
                }
                else {
                    this.ui.notification_warning(
                        param.attributes.senderName,
                        "Your camera was blocked",
                        NotificationType.VideoMute
                    );
                }
            }

            this.onAllowCamera(allow);
        }
    }

    private onAllowCamera(allow: boolean) {
        this.myInfo.mediaPolicy.useCamera = allow;
        if (allow) {
            this.createVideoTrack(this.activeCameraId)
                .then((tracks: JitsiTrack[]) => {
                    this.onLocalTrackAdded(tracks);
                })
        } else {
            //remove track
            const localVideoTrack = this.getLocalTrackByType(MediaType.VIDEO);
            if (localVideoTrack) {
                this.removeLocalTrack(localVideoTrack).then((_: any) => {
                    localVideoTrack.dispose();
                    this.updateUiOnLocalTrackChange();
                });
            }
        }
    }

    private onAllowMicCommand(param: JitsiCommandParam) {
        const targetId = param.value;
        const allow = param.attributes.allow === "true";

        this.ui.participantsListWidget.setMuteMic(targetId, allow);

        if (targetId === this.jitsiRoom.myUserId()) {
            if (param.attributes.senderId !== targetId) {
                if (allow) {
                    this.ui.notification(
                        param.attributes.senderName,
                        "Your microphone was allowed",
                        NotificationType.Audio
                    );
                }
                else {
                    this.ui.notification_warning(
                        param.attributes.senderName,
                        "Your microphone was blocked",
                        NotificationType.AudioMute
                    );
                }
            }

            this.onAllowMic(allow);
        }
    }

    private onAllowMic(allow: boolean) {
        this.myInfo.mediaPolicy.useMic = allow;

        if (allow) {
            this.createAudioTrack(this.activeMicId)
                .then((tracks: JitsiTrack[]) => {
                    this.onLocalTrackAdded(tracks);
                })
        } else {
            //remove track
            const localAudioTrack = this.getLocalTrackByType(MediaType.AUDIO);
            if (localAudioTrack) {
                this.removeLocalTrack(localAudioTrack).then((_: any) => {
                    localAudioTrack.dispose();
                    this.updateUiOnLocalTrackChange();
                });
            }
        }
    }*/
    //screenshare
    BizGazeMeeting.prototype.toggleScreenShare = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.screenSharing) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.turnOnCamera()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 2:
                        if (!this.myInfo.IsHost) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.turnOnScreenShare()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 4:
                        if (!this.roomInfo.IsScreenShareRequired) return [3 /*break*/, 5];
                        //ask permission to host
                        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.ASK_SCREENSHARE, this.myInfo.Jitsi_Id, null);
                        this.ui.notification_warning("Wait a second", "Sent your screen sharing request", NotificationType_1.NotificationType.Screensharing);
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.turnOnScreenShare()];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        this.ui.toolbar.setScreenShare(this.screenSharing);
                        return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.onAskScreenShare = function (param) {
        if (!this.myInfo.IsHost)
            return;
        var senderName = param.attributes.senderName;
        var senderId = param.attributes.senderId;
        this.ui.askDialog(senderName, "Requested screen sharing", NotificationType_1.NotificationType.Screensharing, this.allowScreenshare.bind(this), this.denyScreenshare.bind(this), senderId);
    };
    BizGazeMeeting.prototype.allowScreenshare = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_SCREENSHARE, { allow: true });
    };
    BizGazeMeeting.prototype.denyScreenshare = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_SCREENSHARE, { allow: false });
    };
    BizGazeMeeting.prototype.onAllowScreenshare = function (senderId, allow) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        user = this.jitsiRoom.getParticipantById(senderId);
                        if (!user) return [3 /*break*/, 3];
                        userName = user.getDisplayName();
                        if (!allow) return [3 /*break*/, 2];
                        this.ui.notification(userName, "Screensharing was accepted", NotificationType_1.NotificationType.Screensharing);
                        return [4 /*yield*/, this.turnOnScreenShare()];
                    case 1:
                        _a.sent();
                        this.ui.toolbar.setScreenShare(this.screenSharing);
                        return [3 /*break*/, 3];
                    case 2:
                        this.ui.notification_warning(userName, "Screensharing was denied", NotificationType_1.NotificationType.Screensharing);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    //turn on screen share
    BizGazeMeeting.prototype.turnOnScreenShare = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.JitsiMeetJS.createLocalTracks({
                            devices: ['desktop']
                        })
                            .then(function (tracks) { return __awaiter(_this, void 0, void 0, function () {
                            var screenTrack;
                            var _this = this;
                            return __generator(this, function (_a) {
                                if (tracks.length <= 0) {
                                    throw new Error("No Screen Selected");
                                }
                                screenTrack = tracks[0];
                                this.onLocalTrackAdded([screenTrack]);
                                screenTrack.addEventListener(this.JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, function () {
                                    _this.Log('screen - stopped');
                                    _this.toggleScreenShare();
                                });
                                this.screenSharing = true;
                                return [2 /*return*/];
                            });
                        }); })
                            .catch(function (error) {
                            _this.screenSharing = false;
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.turnOnCamera = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.JitsiMeetJS.createLocalTracks({
                            devices: [MediaType_1.MediaType.VIDEO]
                        })
                            .then(function (tracks) { return __awaiter(_this, void 0, void 0, function () {
                            var cameraTrack;
                            return __generator(this, function (_a) {
                                if (tracks.length <= 0) {
                                    return [2 /*return*/];
                                }
                                cameraTrack = tracks[0];
                                this.onLocalTrackAdded([cameraTrack]);
                                this.screenSharing = false;
                                return [2 /*return*/];
                            });
                        }); })
                            .catch(function (error) {
                            _this.screenSharing = false;
                            console.log(error);
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /*chat*/
    BizGazeMeeting.prototype.sendChatMessage = function (msg) {
        this.jitsiRoom.sendTextMessage(msg);
    };
    BizGazeMeeting.prototype.sendPrivateChatMessage = function (targetId, msg) {
        this.sendJitsiPrivateCommand(targetId, jitsi_1.JitsiPrivateCommand.PRIVATE_CAHT, msg);
    };
    BizGazeMeeting.prototype.onReceiveChatMessage = function (id, msg, timestamp) {
        if (this.myInfo.Jitsi_Id === id)
            return;
        var user = this.jitsiRoom.getParticipantById(id);
        if (user) {
            this.ui.chattingWidget.receiveMessage(id, user.getDisplayName(), msg);
        }
    };
    BizGazeMeeting.prototype.onReceivePrivateChatMessage = function (senderId, msg) {
        if (this.myInfo.Jitsi_Id === senderId)
            return;
        var user = this.jitsiRoom.getParticipantById(senderId);
        if (user) {
            this.ui.chattingWidget.receiveMessage(senderId, user.getDisplayName(), msg, true);
        }
    };
    /*file sharing*/
    BizGazeMeeting.prototype.sendFileMeta = function (meta) {
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.FILE_META, meta.sessionId, { meta: JSON.stringify(meta) });
    };
    BizGazeMeeting.prototype.sendFileData = function (sessionId, data) {
        var binary = '';
        var bytes = new Uint8Array(data);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        var enc = window.btoa(binary);
        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.FILE_SLICE, sessionId, { data: enc });
    };
    BizGazeMeeting.prototype.onFileMeta = function (param) {
        var sessionId = param.value;
        var senderId = param.attributes.senderId;
        var senderName = param.attributes.senderName;
        var meta = JSON.parse(param.attributes.meta);
        if (senderId === this.myInfo.Jitsi_Id)
            return;
        this.ui.chattingWidget.onFileMeta(sessionId, meta, senderId, senderName);
    };
    BizGazeMeeting.prototype.onFileData = function (param) {
        var sessionId = param.value;
        var enc = param.attributes.data;
        var senderId = param.attributes.senderId;
        var senderName = param.attributes.senderName;
        if (senderId === this.myInfo.Jitsi_Id)
            return;
        var binary = window.atob(enc);
        var array = new Uint8Array(binary.length);
        for (var i = 0; i < binary.length; ++i) {
            array[i] = binary.charCodeAt(i);
        }
        this.ui.chattingWidget.onFileData(sessionId, array.buffer);
    };
    BizGazeMeeting.prototype.toggleRecording = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.recording) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.stopRecording()];
                    case 1:
                        _a.sent();
                        this.ui.toolbar.setRecording(this.recording);
                        return [3 /*break*/, 7];
                    case 2:
                        if (!this.myInfo.IsHost) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.startRecording()];
                    case 3:
                        _a.sent();
                        this.ui.toolbar.setRecording(this.recording);
                        return [3 /*break*/, 7];
                    case 4:
                        if (!this.roomInfo.IsRecordingRequired) return [3 /*break*/, 5];
                        //ask permission to host
                        this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.ASK_RECORDING, this.myInfo.Jitsi_Id, null);
                        this.ui.notification_warning("Wait a second", "Sent your recording request", NotificationType_1.NotificationType.Recording);
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.startRecording()];
                    case 6:
                        _a.sent();
                        this.ui.toolbar.setRecording(this.recording);
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.onAskRecording = function (param) {
        if (!this.myInfo.IsHost)
            return;
        var senderName = param.attributes.senderName;
        var senderId = param.attributes.senderId;
        this.ui.askDialog(senderName, "Requested a recording", NotificationType_1.NotificationType.Recording, this.allowRecording.bind(this), this.denyRecording.bind(this), senderId);
    };
    BizGazeMeeting.prototype.allowRecording = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_RECORDING, { allow: true });
    };
    BizGazeMeeting.prototype.denyRecording = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_RECORDING, { allow: false });
    };
    BizGazeMeeting.prototype.onAllowRecording = function (senderId, allow) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        user = this.jitsiRoom.getParticipantById(senderId);
                        if (!user) return [3 /*break*/, 3];
                        userName = user.getDisplayName();
                        if (!allow) return [3 /*break*/, 2];
                        this.ui.notification(userName, "Recording was accepted", NotificationType_1.NotificationType.Recording);
                        return [4 /*yield*/, this.startRecording()];
                    case 1:
                        _a.sent();
                        this.ui.toolbar.setRecording(this.recording);
                        return [3 /*break*/, 3];
                    case 2:
                        this.ui.notification_warning(userName, "Recording was denied", NotificationType_1.NotificationType.Recording);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.startRecording = function () {
        return __awaiter(this, void 0, void 0, function () {
            var gumStream, gdmStream, e_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        gumStream = null;
                        gdmStream = null;
                        debugger;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 9]);
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({ video: false, audio: true })];
                    case 2:
                        gumStream = _a.sent();
                        return [4 /*yield*/, navigator.mediaDevices.getDisplayMedia({
                                video: { displaySurface: "browser" },
                                audio: { channelCount: 2 }
                            })];
                    case 3:
                        gdmStream = _a.sent();
                        gdmStream.addEventListener('inactive', function (event) {
                            if (_this.recording)
                                _this.toggleRecording();
                        });
                        return [3 /*break*/, 9];
                    case 4:
                        e_1 = _a.sent();
                        //seems to has no audio device
                        debugger;
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        gumStream = null;
                        return [4 /*yield*/, navigator.mediaDevices.getDisplayMedia({
                                video: { displaySurface: "browser" },
                                audio: { channelCount: 2 }
                            })];
                    case 6:
                        gdmStream = _a.sent();
                        gdmStream.addEventListener('inactive', function (event) {
                            if (_this.recording)
                                _this.toggleRecording();
                        });
                        return [3 /*break*/, 8];
                    case 7:
                        e_2 = _a.sent();
                        console.error("capture for recording failure");
                        return [2 /*return*/];
                    case 8: return [3 /*break*/, 9];
                    case 9:
                        this.recorderStream = gumStream ? this.mixer(gumStream, gdmStream) : gdmStream;
                        this.mediaRecorder = new MediaRecorder(this.recorderStream, { mimeType: 'video/webm' });
                        this.mediaRecorder.ondataavailable = function (e) {
                            if (e.data && e.data.size > 0) {
                                _this.recordingData.push(e.data);
                                if (!_this.recording && !_this.downloadRecordFile) {
                                    _this.downloadRecordingFile();
                                }
                            }
                        };
                        this.mediaRecorder.onstop = function () {
                            _this.recorderStream.getTracks().forEach(function (track) { return track.stop(); });
                            gumStream.getTracks().forEach(function (track) { return track.stop(); });
                            gdmStream.getTracks().forEach(function (track) { return track.stop(); });
                        };
                        this.recorderStream.addEventListener('inactive', function () {
                            console.log('Capture stream inactive');
                            _this.stopRecording();
                        });
                        this.recordingData = [];
                        this.mediaRecorder.start();
                        this.recording = true;
                        this.downloadRecordFile = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.stopRecording = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.recording)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.mediaRecorder.stop()];
                    case 1:
                        _a.sent();
                        this.downloadRecordingFile();
                        this.recording = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    BizGazeMeeting.prototype.downloadRecordingFile = function () {
        if (this.downloadRecordFile || this.recordingData.length <= 0)
            return;
        var blob = new Blob(this.recordingData, { type: 'video/webm' });
        var url = window.URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = this.getRecordingFilename() + ".webm";
        document.body.appendChild(a);
        a.click();
        setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 5000);
        this.downloadRecordFile = true;
    };
    BizGazeMeeting.prototype.getRecordingFilename = function () {
        var now = new Date();
        var timestamp = now.toISOString();
        return this.roomInfo.conferenceName + "_recording_" + timestamp;
    };
    BizGazeMeeting.prototype.mixer = function (stream1, stream2) {
        var ctx = new AudioContext();
        var dest = ctx.createMediaStreamDestination();
        if (stream1.getAudioTracks().length > 0)
            ctx.createMediaStreamSource(stream1).connect(dest);
        if (stream2.getAudioTracks().length > 0)
            ctx.createMediaStreamSource(stream2).connect(dest);
        var tracks = dest.stream.getTracks();
        tracks = tracks.concat(stream1.getVideoTracks()).concat(stream2.getVideoTracks());
        return new MediaStream(tracks);
    };
    BizGazeMeeting.prototype.toggleMuteAllVideo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.myInfo.IsHost)
                    return [2 /*return*/];
                this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.MUTE_All_VIDEO, this.myInfo.Jitsi_Id, { mute: true });
                this.ui.notification_warning("Wait a second", "Sent your all video disable request", NotificationType_1.NotificationType.VideoMute);
                return [2 /*return*/];
            });
        });
    };
    BizGazeMeeting.prototype.onMuteAllVideo = function (param) {
        var senderId = param.value;
        var senderName = param.attributes.senderName;
        var mute = param.attributes.mute === "true";
        if (senderId !== this.myInfo.Jitsi_Id) {
            this.ui.askDialog(senderName, "Requested to mute your camera", NotificationType_1.NotificationType.VideoMute, this.muteMyVideo.bind(this), null, mute);
        }
    };
    BizGazeMeeting.prototype.toggleMuteAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.myInfo.IsHost)
                    return [2 /*return*/];
                this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.MUTE_All_AUDIO, this.myInfo.Jitsi_Id, { mute: true });
                this.ui.notification_warning("Wait a second", "Sent your mute all request", NotificationType_1.NotificationType.AudioMute);
                return [2 /*return*/];
            });
        });
    };
    BizGazeMeeting.prototype.onMuteAllAudio = function (param) {
        var senderId = param.value;
        var senderName = param.attributes.senderName;
        var mute = param.attributes.mute === "true";
        if (senderId !== this.myInfo.Jitsi_Id) {
            this.ui.askDialog(senderName, "Requested to mute your microphone", NotificationType_1.NotificationType.AudioMute, this.muteMyAudio.bind(this), null, mute);
        }
    };
    // handraise
    BizGazeMeeting.prototype.toggleHandRaise = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.myInfo.IsHost) {
                    //ask handraise to host
                    this.sendJitsiBroadcastCommand(jitsi_1.JitsiCommand.ASK_HANDRAISE, this.myInfo.Jitsi_Id, null);
                    this.ui.notification_warning("Wait a second", "Sent your hand-raise request", NotificationType_1.NotificationType.HandRaise);
                }
                return [2 /*return*/];
            });
        });
    };
    BizGazeMeeting.prototype.onAskHandRaise = function (param) {
        if (!this.myInfo.IsHost)
            return;
        var senderName = param.attributes.senderName;
        var senderId = param.attributes.senderId;
        this.ui.askDialog(senderName, "Requested Hand-Raise", NotificationType_1.NotificationType.HandRaise, this.allowHandRaise.bind(this), this.denyHandRaise.bind(this), senderId);
    };
    BizGazeMeeting.prototype.allowHandRaise = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_HANDRAISE, { allow: true });
    };
    BizGazeMeeting.prototype.denyHandRaise = function (jitsiId) {
        this.sendJitsiPrivateCommand(jitsiId, jitsi_1.JitsiPrivateCommand.ALLOW_HANDRAISE, { allow: false });
    };
    BizGazeMeeting.prototype.onAllowHandRaise = function (senderId, allow) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userName;
            return __generator(this, function (_a) {
                user = this.jitsiRoom.getParticipantById(senderId);
                if (user) {
                    userName = user.getDisplayName();
                    if (allow) {
                        this.ui.notification(userName, "Hand-raise was accepted", NotificationType_1.NotificationType.HandRaise);
                        this.muteMyVideo(false);
                        this.muteMyAudio(false);
                    }
                    else {
                        this.ui.notification_warning(userName, "Hand-raise was denied", NotificationType_1.NotificationType.HandRaise);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    BizGazeMeeting.prototype.toggleCopyJoiningInfo = function () {
        var TempText = document.createElement("input");
        TempText.value = "https://" + window.location.host + "/lobby/" + this.roomInfo.Id; // enter your meeting url here
        document.body.appendChild(TempText);
        TempText.select();
        document.execCommand("copy");
        document.body.removeChild(TempText);
    };
    //highlight speaker
    BizGazeMeeting.prototype.onDominantSpeakerChanged = function (id) {
        if (id === this.myInfo.Jitsi_Id) {
            this.ui.videoPanelGrid.hightlightPanel(this.localVideoPanel.Id);
        }
        else {
            var user = this.jitsiRoom.getParticipantById(id);
            if (user) {
                var videoPanel = user.getProperty(UserProperty_1.UserProperty.videoPanel);
                if (videoPanel)
                    this.ui.videoPanelGrid.hightlightPanel(videoPanel.Id);
            }
        }
    };
    /**
     * **************************************************************************
     *              Log
     * **************************************************************************
     */
    BizGazeMeeting.prototype.Log = function (message) {
        console.log(message);
        if (this.ui != null)
            this.ui.Log(message);
    };
    return BizGazeMeeting;
}());
exports.BizGazeMeeting = BizGazeMeeting;
var meeting = new BizGazeMeeting();
meeting.start();
//# sourceMappingURL=meeting.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_a59a0e6e.js","/")
},{"./enum/ChannelType":37,"./enum/MediaType":38,"./enum/NotificationType":39,"./enum/UserProperty":40,"./jitsi/JitsiCommandParam":44,"./jitsi/JitsiCommandQueue":45,"./meeting_ui":46,"./model/ActiveDevices":47,"./model/BGMeeting":48,"./model/BGUser":49,"./model/InputDevicePolicy":50,"./protocol/bg":51,"./protocol/jitsi":52,"./util/TimeUtil":53,"@microsoft/signalr":23,"buffer":25,"e/U+97":27}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileReceiver = exports.FileReceiverProps = void 0;
var snippet_1 = require("../util/snippet");
var FileReceiverProps = /** @class */ (function () {
    function FileReceiverProps() {
    }
    return FileReceiverProps;
}());
exports.FileReceiverProps = FileReceiverProps;
var FileReceiver = /** @class */ (function () {
    function FileReceiver(props) {
        this.receiveBuffer = [];
        this.size = 0;
        this.props = props;
    }
    FileReceiver.prototype.show = function () {
        var receivingId = "receiving-" + this.props.meta.sessionId;
        var html = "\n            <div class=\"file-progress\" id=\"" + receivingId + "\">\n                <div class=\"fileinfo\">\n                    <a class=\"download\" href=\"#\">" + this.props.meta.name + "(" + snippet_1.getCapacityLabel(this.props.meta.size) + ")</a>\n                </div>\n                <div class=\"progress\">\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                </div>\n            </div>";
        this.props.addChatItem(this.props.senderId, this.props.senderName, html, false);
        this.receivingElement = $("#" + receivingId);
        this.progressElement = this.receivingElement.find(".progress-bar");
        this.downloadElement = this.receivingElement.find(".download");
        this.receivingElement.closest(".usermessage").css("white-space", "nowrap");
    };
    FileReceiver.prototype.readFileData = function (data) {
        debugger;
        this.receiveBuffer.push(data);
        this.size += data.byteLength;
        var percent = Math.floor(this.size / this.props.meta.size * 100);
        this.progressElement.attr("aria-valuenow", percent);
        this.progressElement.css("width", percent + "%");
        if (this.size >= this.props.meta.size) {
            var received = new Blob(this.receiveBuffer);
            this.downloadElement.attr('href', URL.createObjectURL(received));
            this.downloadElement.attr('download', this.props.meta.name);
            this.props.onFinished(this.props.meta.sessionId, this.props.meta.name, "Receive finished");
        }
    };
    return FileReceiver;
}());
exports.FileReceiver = FileReceiver;
//# sourceMappingURL=FileReceiver.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/file\\FileReceiver.js","/file")
},{"../util/snippet":55,"buffer":25,"e/U+97":27}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSender = exports.FileSenderProps = void 0;
var snippet_1 = require("../util/snippet");
var FileSenderProps = /** @class */ (function () {
    function FileSenderProps() {
    }
    return FileSenderProps;
}());
exports.FileSenderProps = FileSenderProps;
var FileSender = /** @class */ (function () {
    function FileSender(props) {
        this.props = props;
    }
    FileSender.prototype.sendFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var file, sendingId, html, $progressElem, chunkSize, fileReader, offset, readSlice;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.props.fileElement.files.length <= 0) {
                    //this.props.onError("No file", "Please select a file to share");
                    return [2 /*return*/];
                }
                file = this.props.fileElement.files[0];
                if (file.size <= 0) {
                    this.props.onError(file.name, "You choosed empty file");
                    return [2 /*return*/];
                }
                this.file = file;
                sendingId = "sending-" + this.props.sessionId;
                html = "\n            <div class=\"file-progress\" id=\"" + sendingId + "\">\n                <div class=\"fileinfo\">\n                    " + file.name + "(" + snippet_1.getCapacityLabel(file.size) + ")\n                </div>\n                <div class=\"progress\">\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                </div>\n            </div>";
                $(this.props.fileSendingPanel).append(html);
                this.sendingElement = $("#" + sendingId);
                $progressElem = this.sendingElement.find(".progress-bar");
                this.props.sendFileMeta({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    sessionId: this.props.sessionId
                });
                chunkSize = 16384;
                fileReader = new FileReader();
                offset = 0;
                fileReader.addEventListener('error', function (error) {
                    _this.removeSelf();
                    _this.props.onError(file.name, "Error happened while reading ");
                });
                fileReader.addEventListener('abort', function (event) {
                    _this.removeSelf();
                    _this.props.onError(file.name, "Reading was aborted");
                });
                readSlice = function (o) {
                    var slice = file.slice(offset, o + chunkSize);
                    fileReader.readAsArrayBuffer(slice);
                };
                fileReader.addEventListener('load', function (e) {
                    var blob = e.target.result;
                    _this.props.sendFileData(_this.props.sessionId, blob);
                    offset += blob.byteLength;
                    //update progress
                    var percent = Math.floor((offset * 100) / file.size);
                    $progressElem.attr("aria-valuenow", percent);
                    $progressElem.css("width", percent + "%");
                    if (offset < file.size) {
                        setTimeout(function (_) {
                            readSlice(offset);
                        }, 100);
                        //readSlice(offset);
                    }
                    else {
                        _this.removeSelf();
                        _this.props.onFinished(file.name, "Sending finished");
                    }
                });
                readSlice(0);
                return [2 /*return*/];
            });
        });
    };
    FileSender.prototype.removeSelf = function () {
        this.sendingElement.remove();
    };
    return FileSender;
}());
exports.FileSender = FileSender;
//# sourceMappingURL=FileSender.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/file\\FileSender.js","/file")
},{"../util/snippet":55,"buffer":25,"e/U+97":27}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitsiCommandParam = void 0;
var JitsiCommandParam = /** @class */ (function () {
    function JitsiCommandParam() {
        this.attributes = {};
        this.children = [];
    }
    return JitsiCommandParam;
}());
exports.JitsiCommandParam = JitsiCommandParam;
//# sourceMappingURL=JitsiCommandParam.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/jitsi\\JitsiCommandParam.js","/jitsi")
},{"buffer":25,"e/U+97":27}],45:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitsiPrivateCommandQueue = exports.JitsiCommandQueue = void 0;
var JitsiCommandCallback = /** @class */ (function () {
    function JitsiCommandCallback() {
    }
    return JitsiCommandCallback;
}());
var JitsiCommandQueue = /** @class */ (function () {
    function JitsiCommandQueue() {
        this.callbacks = new Map();
    }
    JitsiCommandQueue.prototype.reset = function () {
        this.callbacks.clear();
    };
    JitsiCommandQueue.prototype.queueCommand = function (jitsiId, command, param, callback) {
        if (!this.callbacks.has(jitsiId)) {
            this.callbacks.set(jitsiId, []);
        }
        var cb = new JitsiCommandCallback();
        cb.command = command;
        cb.param = param;
        cb.callback = callback;
        this.callbacks.get(jitsiId).push(cb);
    };
    JitsiCommandQueue.prototype.executeQueuedCommands = function (jitsiId) {
        if (!this.callbacks.has(jitsiId))
            return;
        var cbs = this.callbacks.get(jitsiId);
        cbs.forEach(function (cb, index) {
            debugger;
            cb.callback(cb.param);
        });
        this.callbacks.delete(jitsiId);
    };
    return JitsiCommandQueue;
}());
exports.JitsiCommandQueue = JitsiCommandQueue;
var JitsiPrivateCommandCallback = /** @class */ (function () {
    function JitsiPrivateCommandCallback() {
    }
    return JitsiPrivateCommandCallback;
}());
var JitsiPrivateCommandQueue = /** @class */ (function () {
    function JitsiPrivateCommandQueue() {
        this.callbacks = new Map();
    }
    JitsiPrivateCommandQueue.prototype.reset = function () {
        this.callbacks.clear();
    };
    JitsiPrivateCommandQueue.prototype.queueCommand = function (jitsiId, command, message, callback) {
        if (!this.callbacks.has(jitsiId)) {
            this.callbacks.set(jitsiId, []);
        }
        var cb = new JitsiPrivateCommandCallback();
        cb.command = command;
        cb.message = message;
        cb.callback = callback;
        this.callbacks.get(jitsiId).push(cb);
    };
    JitsiPrivateCommandQueue.prototype.executeQueuedCommands = function (jitsiId) {
        if (!this.callbacks.has(jitsiId))
            return;
        var cbs = this.callbacks.get(jitsiId);
        cbs.forEach(function (cb, index) {
            cb.callback(jitsiId, cb.command, cb.message);
        });
        this.callbacks.delete(jitsiId);
    };
    return JitsiPrivateCommandQueue;
}());
exports.JitsiPrivateCommandQueue = JitsiPrivateCommandQueue;
//# sourceMappingURL=JitsiCommandQueue.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/jitsi\\JitsiCommandQueue.js","/jitsi")
},{"buffer":25,"e/U+97":27}],46:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
/****************************************************************
  
          nPanelCount = 4

----------panelContainer--------------

    ---panel---       ---panel---
    |    1     |      |    2    |
    |__________|      |_________|

    ---panel---       ---panel---
    |    3     |      |    4    |
    |__________|      |_________|

-------------------------------------

         Buttons -  audio/videoMute, screenShare, Record, Chat
*****************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetingUI = void 0;
var SettingDialog_1 = require("./components/SettingDialog");
var ChattingPanel_1 = require("./components/ChattingPanel");
var ParticipantListPanel_1 = require("./components/ParticipantListPanel");
var NotificationType_1 = require("./enum/NotificationType");
var AskDialog_1 = require("./components/AskDialog");
var ToolBar_1 = require("./components/ToolBar");
var MeetingDescriptionWidget_1 = require("./components/MeetingDescriptionWidget");
var VideoPanelGrid_1 = require("./components/VideoPanelGrid");
var PanelVideoState;
(function (PanelVideoState) {
    PanelVideoState["NoCamera"] = "no-camera";
    PanelVideoState["ScreenShare"] = "screen";
    PanelVideoState["Camera"] = "camera";
    PanelVideoState["VideoStreaming"] = "stream";
})(PanelVideoState || (PanelVideoState = {}));
var MeetingUI = /** @class */ (function () {
    function MeetingUI(meeting) {
        this.meeting = null;
        this.options = {
            hideToolbarOnMouseOut: false,
        };
        this.meeting = meeting;
        //toolbar
        var tProps = new ToolBar_1.ToolBarProps();
        tProps.toggleTileView = this.redrawGrid.bind(this);
        tProps.toggleVideoMute = this.meeting.OnToggleMuteMyVideo.bind(this.meeting);
        tProps.toggleAudioMute = this.meeting.OnToggleMuteMyAudio.bind(this.meeting);
        tProps.openChatting = this.openChatting.bind(this);
        tProps.toggleScreenShare = this.meeting.toggleScreenShare.bind(this.meeting);
        tProps.toggleRecording = this.meeting.toggleRecording.bind(this.meeting);
        tProps.toggleHandRaise = this.meeting.toggleHandRaise.bind(this.meeting);
        tProps.toggleMuteAll = this.meeting.toggleMuteAll.bind(this.meeting);
        tProps.toggleMuteAllVideo = this.meeting.toggleMuteAllVideo.bind(this.meeting);
        tProps.openSetting = this.showSettingDialog.bind(this);
        tProps.leaveMeeting = this.meeting.stop.bind(this.meeting);
        this.toolbar = new ToolBar_1.ToolBar(tProps);
        //chatting
        this.chattingWidget = new ChattingPanel_1.ChattingWidget();
        var props = new ChattingPanel_1.ChattingPanelProps();
        props.openCallback = this.redrawGrid.bind(this);
        props.sendChat = this.meeting.sendChatMessage.bind(this.meeting);
        props.sendPrivateChat = this.meeting.sendPrivateChatMessage.bind(this.meeting);
        props.sendFileMeta = this.meeting.sendFileMeta.bind(this.meeting);
        props.sendFileData = this.meeting.sendFileData.bind(this.meeting);
        props.onFileSendErrror = this.onFileSendError.bind(this);
        props.onFileSendFinished = this.onFileSendFinished.bind(this);
        props.onFileReceiveError = this.onFileReceiveError.bind(this);
        props.onFileReceiveFinished = this.onFileReceiveFinished.bind(this);
        props.showUnreadBadge = this.toolbar.showUnreadBadge.bind(this.toolbar);
        props.setUnreadCount = this.toolbar.setUnreadCount.bind(this.toolbar);
        this.chattingWidget.init(props);
        //list
        this.participantsListWidget = new ParticipantListPanel_1.ParticipantListWidget();
        var lProps = new ParticipantListPanel_1.ParticipantListPanelProps();
        lProps.onMuteCamera = this.meeting.muteUserVideo.bind(this.meeting);
        lProps.onMuteMic = this.meeting.muteUserAudio.bind(this.meeting);
        lProps.toggleCopyJoiningInfo = this.meeting.toggleCopyJoiningInfo.bind(this.meeting);
        this.participantsListWidget.init(lProps);
        //meeting description
        this.meetingDescWidget = new MeetingDescriptionWidget_1.MeetingDescriptionWidget();
        //video grid
        var vProps = new VideoPanelGrid_1.VideoPanelGridProps();
        vProps.grantModeratorRole = this.meeting.grantModeratorRole.bind(this.meeting);
        vProps.kickParticipantOut = this.meeting.kickParticipantOut.bind(this.meeting);
        vProps.sendRemoteControlReply = this.meeting.sendRemoteControlReply.bind(this.meeting);
        vProps.muteMyAudio = this.meeting.muteMyAudio.bind(this.meeting);
        vProps.muteMyVideo = this.meeting.muteMyVideo.bind(this.meeting);
        vProps.muteUserAudio = this.meeting.muteUserAudio.bind(this.meeting);
        vProps.muteUserVideo = this.meeting.muteUserVideo.bind(this.meeting);
        vProps.openPrivateChat = this.chattingWidget.openPrivateChat.bind(this.chattingWidget);
        this.videoPanelGrid = new VideoPanelGrid_1.VideoPanelGrid(vProps);
        this.attachHandlers();
    }
    MeetingUI.prototype.attachHandlers = function () {
        var _this = this;
        $(document).ready(function () {
            //hover effect
            if (_this.options.hideToolbarOnMouseOut) {
                $("#content").hover(function (_) {
                    _this.toolbar.fadeIn();
                    _this.meetingDescWidget.fadeIn();
                }, function (_) {
                    _this.toolbar.fadeOut();
                    _this.meetingDescWidget.fadeOut();
                });
            }
        });
        window.addEventListener('unload', function () {
            _this.meeting.forceStop();
        });
    };
    MeetingUI.prototype.updateByRole = function (isHost) {
        var isWebinar = this.meeting.roomInfo.IsWebinar;
        /*if (isWebinar && !isHost)
            this.showParticipantListButton(false);
        else
            this.showParticipantListButton(true);*/
        this.participantsListWidget.updateByRole(isHost && this.meeting.roomInfo.IsControlAllowed);
    };
    MeetingUI.prototype.updateJoiningInfo = function () {
        this.participantsListWidget.updateJoiningInfo("https://" + window.location.host + "/lobby/" + this.meeting.roomInfo.Id);
    };
    //chattting
    MeetingUI.prototype.openChatting = function (o) {
        if (this.chattingWidget)
            this.chattingWidget.open(o);
    };
    MeetingUI.prototype.redrawGrid = function () {
        if (this.videoPanelGrid)
            this.videoPanelGrid.redrawGrid();
    };
    MeetingUI.prototype.showSettingDialog = function () {
        var settingDialog = new SettingDialog_1.SettingDialog();
        var props = new SettingDialog_1.SettingDialogProps();
        props.curDevices = this.meeting.getActiveDevices();
        props.onDeviceChange = this.meeting.onDeviceChange.bind(this.meeting);
        settingDialog.init(props);
        settingDialog.show();
    };
    //add, remove participant to and from list
    MeetingUI.prototype.addParticipant = function (jitsiId, name, me, muteCamera, muteMic) {
        this.participantsListWidget.addParticipant(jitsiId, name, me, muteCamera, muteMic);
    };
    MeetingUI.prototype.removeParticipant = function (jitsiId) {
        this.participantsListWidget.removeParticipant(jitsiId);
    };
    MeetingUI.prototype.showParticipantListButton = function (show) {
        $("#open-participants-toggle").css("visibility", show ? "visible" : "hidden");
    };
    //file send
    MeetingUI.prototype.onFileSendError = function (filename, message) {
        this.notification_warning(filename, message, NotificationType_1.NotificationType.FileTransfer);
    };
    MeetingUI.prototype.onFileSendFinished = function (filename, message) {
        this.notification(filename, message, NotificationType_1.NotificationType.FileTransfer);
    };
    //file receive
    MeetingUI.prototype.onFileReceiveError = function (filename, message) {
        this.notification_warning(filename, message, NotificationType_1.NotificationType.FileReceive);
    };
    MeetingUI.prototype.onFileReceiveFinished = function (filename, message) {
        this.notification(filename, message, NotificationType_1.NotificationType.FileReceive);
    };
    MeetingUI.prototype.Log = function (message) {
        return;
        if ($("#logPanel").length <= 0) {
            var logPanel = "<div id=\"logPanel\" style=\"position: fixed;width: 300px;height: 100px;background: black;top:0px;left: 0px;\n                                z-index: 100000;border-right: 1px dashed rebeccapurple;border-bottom: 1px dashed rebeccapurple;overflow-y:auto;\"></div>";
            $("body").append(logPanel);
        }
        var colors = ['blanchedalmond', 'hotpink', 'chartreuse', 'coral', 'gold', 'greenyellow', 'violet', 'wheat'];
        var color = colors[Math.floor(Math.random() * 100) % colors.length];
        var messageItm = "<div style=\"color:" + color + ";\"><span>" + message + "</span></div>";
        $("#logPanel").append(messageItm);
        $('#logPanel').scroll();
        $("#logPanel").animate({
            scrollTop: 20000
        }, 200);
    };
    MeetingUI.prototype.askDialog = function (title, message, icon, allowCallback, denyCallback, param) {
        var props = new AskDialog_1.AskDialogProps();
        props.title = title;
        props.message = message;
        props.icon = icon;
        props.isWarning = true;
        props.allowCallback = allowCallback;
        props.denyCallback = denyCallback;
        props.param = param;
        var dlg = new AskDialog_1.AskDialog(props);
        dlg.show();
    };
    MeetingUI.prototype.notification = function (title, message, icon) {
        if (!icon)
            icon = NotificationType_1.NotificationType.Info;
        $.toast({
            heading: title,
            text: message,
            showHideTransition: 'slide',
            hideAfter: 7000,
            bgColor: "#164157",
            icon: icon,
            stack: 5,
            loader: false,
        });
    };
    MeetingUI.prototype.notification_warning = function (title, message, icon) {
        if (!icon)
            icon = NotificationType_1.NotificationType.Warning;
        $.toast({
            heading: title,
            text: message,
            showHideTransition: 'slide',
            hideAfter: 7000,
            bgColor: "#800000",
            icon: icon,
            stack: 5,
            loader: false
        });
    };
    return MeetingUI;
}());
exports.MeetingUI = MeetingUI;
//# sourceMappingURL=meeting_ui.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/meeting_ui.js","/")
},{"./components/AskDialog":28,"./components/ChattingPanel":29,"./components/MeetingDescriptionWidget":30,"./components/ParticipantListPanel":31,"./components/SettingDialog":32,"./components/ToolBar":33,"./components/VideoPanelGrid":35,"./enum/NotificationType":39,"buffer":25,"e/U+97":27}],47:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveDevices = void 0;
var ActiveDevices = /** @class */ (function () {
    function ActiveDevices() {
    }
    return ActiveDevices;
}());
exports.ActiveDevices = ActiveDevices;
//# sourceMappingURL=ActiveDevices.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/model\\ActiveDevices.js","/model")
},{"buffer":25,"e/U+97":27}],48:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BGMeetingInfo = exports.BGMeeting = exports.BGMeetingParticipant = void 0;
/*
callbackUrl: "http://"
conferenceId: 1234
conferenceName: "Building A Bitcoin Crypto application "
isControlAllowed: true | false              // Host can control Audio and Video of Participants
isRecordingRequired: true | false           // Approval required for recording the meeting
isMultipleSharingAllowed: true | false      // Allow multiple participants to screen share
isScreenShareRequired: true | false         // Approval required to present/share the screen
isOpened: true | false                      // Allow external users to join meeting using link
channelType : : "Both |  AudioOnly | VideoOnly"
description: "c# application that works on dotnet framework, and bouncy castle crypto libraries"
duration: "2021-05-18T09:19:57.654Z"
endDateTime: "2021-05-18T09:19:57.654Z"
participants: (2) [{…}, {…}]
refGuid: "30251003"
startDateTime: "2021-05-18T09:19:57.654Z"
*/
//src/DbModels/Participants.cs
var BGMeetingParticipant = /** @class */ (function () {
    function BGMeetingParticipant() {
    }
    return BGMeetingParticipant;
}());
exports.BGMeetingParticipant = BGMeetingParticipant;
//src/DbModels/Meeting.cs
//comes from api
var BGMeeting = /** @class */ (function () {
    function BGMeeting() {
    }
    return BGMeeting;
}());
exports.BGMeeting = BGMeeting;
//src/Model/LiveMeeting.cs/MeetingInfo
//comes from BGMeeting SignalR Server
var BGMeetingInfo = /** @class */ (function () {
    function BGMeetingInfo() {
    }
    return BGMeetingInfo;
}());
exports.BGMeetingInfo = BGMeetingInfo;
//# sourceMappingURL=BGMeeting.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/model\\BGMeeting.js","/model")
},{"buffer":25,"e/U+97":27}],49:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserInfo = void 0;
var UserInfo = /** @class */ (function () {
    function UserInfo() {
        this.Id = ""; //connectionId
        //BG_Id: string;
        this.Jitsi_Id = "";
        this.Name = "";
        this.IsHost = false;
        this.IsAnonymous = false;
        this.mediaPolicy = { useCamera: false, useMic: false };
    }
    return UserInfo;
}());
exports.UserInfo = UserInfo;
//# sourceMappingURL=BGUser.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/model\\BGUser.js","/model")
},{"buffer":25,"e/U+97":27}],50:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputMediaPolicy = void 0;
var InputMediaPolicy = /** @class */ (function () {
    function InputMediaPolicy() {
    }
    return InputMediaPolicy;
}());
exports.InputMediaPolicy = InputMediaPolicy;
//# sourceMappingURL=InputDevicePolicy.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/model\\InputDevicePolicy.js","/model")
},{"buffer":25,"e/U+97":27}],51:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserToUserViaBG = exports.UserToBG = exports.BGtoUser = void 0;
/**
 * **************************************************************************
 *
 *              should match with /src/Server/Protocol/BGtoUser
 *
 * **************************************************************************
 */
var BGtoUser;
(function (BGtoUser) {
    BGtoUser["ROOM_CREATED"] = "created";
    BGtoUser["ROOM_INFO"] = "room_info";
    BGtoUser["ROOM_JOINED"] = "joined";
    BGtoUser["ROOM_USER_JOINED"] = "user_joined";
    BGtoUser["ROOM_LEFT"] = "left";
    BGtoUser["ERROR"] = "error";
    BGtoUser["SIGNALING"] = "SignalingMessage";
})(BGtoUser = exports.BGtoUser || (exports.BGtoUser = {}));
;
/**
 * **************************************************************************
 *
 *              should match with /src/Server/Protocol/UserToBG
 *
 * **************************************************************************
 */
var UserToBG;
(function (UserToBG) {
})(UserToBG = exports.UserToBG || (exports.UserToBG = {}));
var UserToUserViaBG;
(function (UserToUserViaBG) {
})(UserToUserViaBG = exports.UserToUserViaBG || (exports.UserToUserViaBG = {}));
//# sourceMappingURL=bg.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/protocol\\bg.js","/protocol")
},{"buffer":25,"e/U+97":27}],52:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
/* SHOULD not exist same value in two enums
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitsiPrivateCommand = exports.JitsiCommand = void 0;
var JitsiCommand;
(function (JitsiCommand) {
    JitsiCommand["GRANT_HOST_ROLE"] = "grant-host";
    JitsiCommand["MUTE_AUDIO"] = "mute_audio";
    JitsiCommand["MUTE_VIDEO"] = "mute_video";
    JitsiCommand["ALLOW_CAMERA"] = "allow_video";
    JitsiCommand["ALLOW_MIC"] = "allow_audio";
    JitsiCommand["INIT_MEDIA_POLICY"] = "init_media_policy";
    JitsiCommand["ASK_RECORDING"] = "ask-recording";
    JitsiCommand["ASK_SCREENSHARE"] = "ask-screenshare";
    JitsiCommand["ASK_HANDRAISE"] = "ask-handraise";
    JitsiCommand["FILE_META"] = "file_meta";
    JitsiCommand["FILE_SLICE"] = "file_slice";
    JitsiCommand["BIZ_ID"] = "biz_id";
    JitsiCommand["KICK_OUT"] = "kick_out";
    JitsiCommand["MUTE_All_AUDIO"] = "mute_all_audio";
    JitsiCommand["MUTE_All_VIDEO"] = "mute_all_video";
})(JitsiCommand = exports.JitsiCommand || (exports.JitsiCommand = {}));
;
var JitsiPrivateCommand;
(function (JitsiPrivateCommand) {
    JitsiPrivateCommand["MEDIA_POLICY"] = "media_policy";
    JitsiPrivateCommand["ALLOW_RECORDING"] = "allow_recording";
    JitsiPrivateCommand["ALLOW_SCREENSHARE"] = "allow_screenshare";
    JitsiPrivateCommand["ALLOW_HANDRAISE"] = "allow_handraise";
    JitsiPrivateCommand["PRIVATE_CAHT"] = "private_chat";
})(JitsiPrivateCommand = exports.JitsiPrivateCommand || (exports.JitsiPrivateCommand = {}));
//# sourceMappingURL=jitsi.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/protocol\\jitsi.js","/protocol")
},{"buffer":25,"e/U+97":27}],53:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentTimestamp = exports.getCurTime = exports.TsToDateFormat = void 0;
function TsToDateFormat(tsInMillisecond) {
    var sec = Math.floor(tsInMillisecond / 1000);
    // Hours part from the timestamp
    var hours = Math.floor(sec / 3600);
    // Minutes part from the timestamp
    var minutes = "0" + (Math.floor(sec / 60) - (hours * 60));
    // Seconds part from the timestamp
    var seconds = "0" + (sec % 60);
    // Will display time in 10:30:23 format
    var formattedTime = ("0" + hours).substr(-2) + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
    return formattedTime;
}
exports.TsToDateFormat = TsToDateFormat;
function getCurTime() {
    var date = new Date();
    var h = date.getHours();
    var m = date.getMinutes();
    var m_2 = ("0" + m).slice(-2);
    var h_2 = ("0" + h).slice(-2);
    var time = h_2 + ":" + m_2;
    return time;
}
exports.getCurTime = getCurTime;
function getCurrentTimestamp() {
    var currentDate = new Date();
    var timestamp = currentDate.getTime();
    return timestamp;
}
exports.getCurrentTimestamp = getCurrentTimestamp;
//# sourceMappingURL=TimeUtil.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/util\\TimeUtil.js","/util")
},{"buffer":25,"e/U+97":27}],54:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.randomSessonId = exports.randomNumber = void 0;
var TimeUtil_1 = require("./TimeUtil");
function randomNumber() {
    return randomFromInterval(1, 100000000);
}
exports.randomNumber = randomNumber;
function randomSessonId() {
    return TimeUtil_1.getCurrentTimestamp() + "-" + randomNumber();
}
exports.randomSessonId = randomSessonId;
function randomFromInterval(from, to) {
    return Math.floor(Math.random() * (to - from + 1) + from);
}
/*interface ProvideFeedbackFormProps {
    feedbackNature: FormikDropdownProps
    waybillNumber: FormikDropdownProps
    provideFeedback: FormikDropdownProps
    editorState?: string
    attachments?: string[]
}


interface FormikDropdownProps {
    id: number
    value: string
}

const values: ProvideFeedbackFormProps = {};
const customFields: string[] = [];

for (const property in values) {
    const customField = values[property as keyof ProvideFeedbackFormProps]
    customFields.push(customField)
}*/ 
//# sourceMappingURL=random.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/util\\random.js","/util")
},{"./TimeUtil":53,"buffer":25,"e/U+97":27}],55:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCapacityLabel = exports.random = exports.avatarName = exports.stripHTMLTags = void 0;
function stripHTMLTags(text) {
    return text.replace(/(<([^>]+)>)/gi, "");
}
exports.stripHTMLTags = stripHTMLTags;
/*
 ajax example
 $.ajax({
        url: "http://localhost/myproject/ajax_url",
        type: "POST",
        data: $("#my-form").serialize(),
        dataType: 'json', // lowercase is always preferered though jQuery does it, too.
        success: function(){}
});
 
 
 */
function avatarName(name) {
    var unknown = "?";
    if (!name || name.length <= 0)
        return unknown;
    var nameParts = name.split(" ");
    var res = "";
    nameParts.forEach(function (p) {
        if (p.length > 0)
            res += p[0];
    });
    if (res.length <= 0)
        unknown;
    return res.toUpperCase().substr(0, 2);
}
exports.avatarName = avatarName;
var random = function (min, max) { return Math.floor(Math.random() * (max - min)) + min; };
exports.random = random;
function getCapacityLabel(bytes) {
    if (bytes < 1024)
        return bytes + " bytes";
    else if (bytes < 1024 * 1024) {
        var kb = bytes / 1024;
        return kb.toFixed(2) + " KB";
    }
    else {
        var mb = bytes / (1024 * 1024);
        return mb.toFixed(2) + " MB";
    }
}
exports.getCapacityLabel = getCapacityLabel;
//# sourceMappingURL=snippet.js.map
}).call(this,require("e/U+97"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/util\\snippet.js","/util")
},{"buffer":25,"e/U+97":27}]},{},[41])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFxqaXRzaVxcd29yayhyYXpvcilcXGJpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pXFxiaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbFxcdmlkZW9jb25mXFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9BYm9ydENvbnRyb2xsZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9EZWZhdWx0SHR0cENsaWVudC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9FcnJvcnMuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9GZXRjaEh0dHBDbGllbnQuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IYW5kc2hha2VQcm90b2NvbC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h0dHBDbGllbnQuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IdHRwQ29ubmVjdGlvbi5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0h1YkNvbm5lY3Rpb24uanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9IdWJDb25uZWN0aW9uQnVpbGRlci5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0lIdWJQcm90b2NvbC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0lMb2dnZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9JVHJhbnNwb3J0LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvSnNvbkh1YlByb3RvY29sLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvTG9nZ2Vycy5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL0xvbmdQb2xsaW5nVHJhbnNwb3J0LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1N1YmplY3QuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvc2lnbmFsci9kaXN0L2Nqcy9UZXh0TWVzc2FnZUZvcm1hdC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL1V0aWxzLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvV2ViU29ja2V0VHJhbnNwb3J0LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L3NpZ25hbHIvZGlzdC9janMvWGhySHR0cENsaWVudC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9zaWduYWxyL2Rpc3QvY2pzL2luZGV4LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliL2I2NC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9jb21wb25lbnRzL0Fza0RpYWxvZy5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvQ2hhdHRpbmdQYW5lbC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvTWVldGluZ0Rlc2NyaXB0aW9uV2lkZ2V0LmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvY29tcG9uZW50cy9QYXJ0aWNpcGFudExpc3RQYW5lbC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvU2V0dGluZ0RpYWxvZy5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvVG9vbEJhci5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvVmlkZW9QYW5lbC5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2NvbXBvbmVudHMvVmlkZW9QYW5lbEdyaWQuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9jb21wb25lbnRzL3ZlY3Rvcl9pY29uLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvZW51bS9DaGFubmVsVHlwZS5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2VudW0vTWVkaWFUeXBlLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvZW51bS9Ob3RpZmljYXRpb25UeXBlLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvZW51bS9Vc2VyUHJvcGVydHkuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9mYWtlX2E1OWEwZTZlLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvZmlsZS9GaWxlUmVjZWl2ZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9maWxlL0ZpbGVTZW5kZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9qaXRzaS9KaXRzaUNvbW1hbmRQYXJhbS5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL2ppdHNpL0ppdHNpQ29tbWFuZFF1ZXVlLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvbWVldGluZ191aS5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL21vZGVsL0FjdGl2ZURldmljZXMuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9tb2RlbC9CR01lZXRpbmcuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9tb2RlbC9CR1VzZXIuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC9tb2RlbC9JbnB1dERldmljZVBvbGljeS5qcyIsIkU6L2ppdHNpL3dvcmsocmF6b3IpL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pL2JpemdhemVfbWVldGluZy1tYXN0ZXIobGF0ZXN0LWZyb20tZ3lvbmdib20pX2luX3RyaWFsL3ZpZGVvY29uZi9zY3JpcHRzL2J1aWxkL3Byb3RvY29sL2JnLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvcHJvdG9jb2wvaml0c2kuanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC91dGlsL1RpbWVVdGlsLmpzIiwiRTovaml0c2kvd29yayhyYXpvcikvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSkvYml6Z2F6ZV9tZWV0aW5nLW1hc3RlcihsYXRlc3QtZnJvbS1neW9uZ2JvbSlfaW5fdHJpYWwvdmlkZW9jb25mL3NjcmlwdHMvYnVpbGQvdXRpbC9yYW5kb20uanMiLCJFOi9qaXRzaS93b3JrKHJhem9yKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKS9iaXpnYXplX21lZXRpbmctbWFzdGVyKGxhdGVzdC1mcm9tLWd5b25nYm9tKV9pbl90cmlhbC92aWRlb2NvbmYvc2NyaXB0cy9idWlsZC91dGlsL3NuaXBwZXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6N0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdmxDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1WUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNybEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBSb3VnaCBwb2x5ZmlsbCBvZiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQWJvcnRDb250cm9sbGVyXG4vLyBXZSBkb24ndCBhY3R1YWxseSBldmVyIHVzZSB0aGUgQVBJIGJlaW5nIHBvbHlmaWxsZWQsIHdlIGFsd2F5cyB1c2UgdGhlIHBvbHlmaWxsIGJlY2F1c2Vcbi8vIGl0J3MgYSB2ZXJ5IG5ldyBBUEkgcmlnaHQgbm93LlxuLy8gTm90IGV4cG9ydGVkIGZyb20gaW5kZXguXG4vKiogQHByaXZhdGUgKi9cbnZhciBBYm9ydENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJvcnRDb250cm9sbGVyKCkge1xuICAgICAgICB0aGlzLmlzQWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uYWJvcnQgPSBudWxsO1xuICAgIH1cbiAgICBBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBYm9ydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5vbmFib3J0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLCBcInNpZ25hbFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLCBcImFib3J0ZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQWJvcnRlZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFib3J0Q29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnRzLkFib3J0Q29udHJvbGxlciA9IEFib3J0Q29udHJvbGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFib3J0Q29udHJvbGxlci5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxBYm9ydENvbnRyb2xsZXIuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XG52YXIgRmV0Y2hIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9GZXRjaEh0dHBDbGllbnRcIik7XG52YXIgSHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cENsaWVudFwiKTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG52YXIgWGhySHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vWGhySHR0cENsaWVudFwiKTtcbi8qKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHR0cENsaWVudH0uICovXG52YXIgRGVmYXVsdEh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlZmF1bHRIdHRwQ2xpZW50LCBfc3VwZXIpO1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkRlZmF1bHRIdHRwQ2xpZW50fSwgdXNpbmcgdGhlIHByb3ZpZGVkIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSUxvZ2dlcn0gdG8gbG9nIG1lc3NhZ2VzLiAqL1xuICAgIGZ1bmN0aW9uIERlZmF1bHRIdHRwQ2xpZW50KGxvZ2dlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIGZldGNoICE9PSBcInVuZGVmaW5lZFwiIHx8IFV0aWxzXzEuUGxhdGZvcm0uaXNOb2RlKSB7XG4gICAgICAgICAgICBfdGhpcy5odHRwQ2xpZW50ID0gbmV3IEZldGNoSHR0cENsaWVudF8xLkZldGNoSHR0cENsaWVudChsb2dnZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgX3RoaXMuaHR0cENsaWVudCA9IG5ldyBYaHJIdHRwQ2xpZW50XzEuWGhySHR0cENsaWVudChsb2dnZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNhYmxlIEh0dHBDbGllbnQgZm91bmQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgRGVmYXVsdEh0dHBDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAvLyBDaGVjayB0aGF0IGFib3J0IHdhcyBub3Qgc2lnbmFsZWQgYmVmb3JlIGNhbGxpbmcgc2VuZFxuICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JzXzEuQWJvcnRFcnJvcigpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVlc3QubWV0aG9kKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbWV0aG9kIGRlZmluZWQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVlc3QudXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIGRlZmluZWQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnNlbmQocmVxdWVzdCk7XG4gICAgfTtcbiAgICBEZWZhdWx0SHR0cENsaWVudC5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRIdHRwQ2xpZW50O1xufShIdHRwQ2xpZW50XzEuSHR0cENsaWVudCkpO1xuZXhwb3J0cy5EZWZhdWx0SHR0cENsaWVudCA9IERlZmF1bHRIdHRwQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVmYXVsdEh0dHBDbGllbnQuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcRGVmYXVsdEh0dHBDbGllbnQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gMCwgMiwgMTAsIDMwIHNlY29uZCBkZWxheXMgYmVmb3JlIHJlY29ubmVjdCBhdHRlbXB0cy5cbnZhciBERUZBVUxUX1JFVFJZX0RFTEFZU19JTl9NSUxMSVNFQ09ORFMgPSBbMCwgMjAwMCwgMTAwMDAsIDMwMDAwLCBudWxsXTtcbi8qKiBAcHJpdmF0ZSAqL1xudmFyIERlZmF1bHRSZWNvbm5lY3RQb2xpY3kgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdFJlY29ubmVjdFBvbGljeShyZXRyeURlbGF5cykge1xuICAgICAgICB0aGlzLnJldHJ5RGVsYXlzID0gcmV0cnlEZWxheXMgIT09IHVuZGVmaW5lZCA/IHJldHJ5RGVsYXlzLmNvbmNhdChbbnVsbF0pIDogREVGQVVMVF9SRVRSWV9ERUxBWVNfSU5fTUlMTElTRUNPTkRTO1xuICAgIH1cbiAgICBEZWZhdWx0UmVjb25uZWN0UG9saWN5LnByb3RvdHlwZS5uZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzID0gZnVuY3Rpb24gKHJldHJ5Q29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXRyeURlbGF5c1tyZXRyeUNvbnRleHQucHJldmlvdXNSZXRyeUNvdW50XTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0UmVjb25uZWN0UG9saWN5O1xufSgpKTtcbmV4cG9ydHMuRGVmYXVsdFJlY29ubmVjdFBvbGljeSA9IERlZmF1bHRSZWNvbm5lY3RQb2xpY3k7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0UmVjb25uZWN0UG9saWN5LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXERlZmF1bHRSZWNvbm5lY3RQb2xpY3kuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYW4gSFRUUCByZXF1ZXN0IGZhaWxzLiAqL1xudmFyIEh0dHBFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xuICAgIC8qKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHR0cEVycm9yfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2UgQSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNDb2RlIFRoZSBIVFRQIHN0YXR1cyBjb2RlIHJlcHJlc2VudGVkIGJ5IHRoaXMgZXJyb3IuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSHR0cEVycm9yKGVycm9yTWVzc2FnZSwgc3RhdHVzQ29kZSkge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvck1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMzk2NSNpc3N1ZWNvbW1lbnQtMjc4NTcwMjAwXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5IdHRwRXJyb3IgPSBIdHRwRXJyb3I7XG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYSB0aW1lb3V0IGVsYXBzZXMuICovXG52YXIgVGltZW91dEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lb3V0RXJyb3IsIF9zdXBlcik7XG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5UaW1lb3V0RXJyb3J9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yTWVzc2FnZSBBIGRlc2NyaXB0aXZlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVGltZW91dEVycm9yKGVycm9yTWVzc2FnZSkge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChlcnJvck1lc3NhZ2UgPT09IHZvaWQgMCkgeyBlcnJvck1lc3NhZ2UgPSBcIkEgdGltZW91dCBvY2N1cnJlZC5cIjsgfVxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdHJ1ZVByb3RvID0gX25ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMzk2NSNpc3N1ZWNvbW1lbnQtMjc4NTcwMjAwXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVGltZW91dEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYW4gYWN0aW9uIGlzIGFib3J0ZWQuICovXG52YXIgQWJvcnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWJvcnRFcnJvciwgX3N1cGVyKTtcbiAgICAvKiogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgQWJvcnRFcnJvcn0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBYm9ydEVycm9yKGVycm9yTWVzc2FnZSkge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChlcnJvck1lc3NhZ2UgPT09IHZvaWQgMCkgeyBlcnJvck1lc3NhZ2UgPSBcIkFuIGFib3J0IG9jY3VycmVkLlwiOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvck1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIC8vIFdvcmthcm91bmQgaXNzdWUgaW4gVHlwZXNjcmlwdCBjb21waWxlclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcbiAgICAgICAgX3RoaXMuX19wcm90b19fID0gdHJ1ZVByb3RvO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBBYm9ydEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5BYm9ydEVycm9yID0gQWJvcnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVycm9ycy5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxFcnJvcnMuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXJyb3JzXzEgPSByZXF1aXJlKFwiLi9FcnJvcnNcIik7XG52YXIgSHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cENsaWVudFwiKTtcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbnZhciBGZXRjaEh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZldGNoSHR0cENsaWVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGZXRjaEh0dHBDbGllbnQobG9nZ2VyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gaWdub3JlIHRoZSBkeW5hbWljIHJlcXVpcmUgaW4gd2VicGFjayBidWlsZHMgd2UgbmVlZCB0byBkbyB0aGlzIG1hZ2ljXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlOiBUUyBkb2Vzbid0IGtub3cgYWJvdXQgdGhlc2UgbmFtZXNcbiAgICAgICAgICAgIHZhciByZXF1aXJlRnVuYyA9IHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSBcImZ1bmN0aW9uXCIgPyBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyA6IHJlcXVpcmU7XG4gICAgICAgICAgICAvLyBDb29raWVzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGhhbmRsZWQgaW4gTm9kZSBzbyB3ZSBuZWVkIHRvIGFkZCBhIENvb2tpZUphciB0byBwcmVzZXJ2ZSBjb29raWVzIGFjcm9zcyByZXF1ZXN0c1xuICAgICAgICAgICAgX3RoaXMuamFyID0gbmV3IChyZXF1aXJlRnVuYyhcInRvdWdoLWNvb2tpZVwiKSkuQ29va2llSmFyKCk7XG4gICAgICAgICAgICBfdGhpcy5mZXRjaFR5cGUgPSByZXF1aXJlRnVuYyhcIm5vZGUtZmV0Y2hcIik7XG4gICAgICAgICAgICAvLyBub2RlLWZldGNoIGRvZXNuJ3QgaGF2ZSBhIG5pY2UgQVBJIGZvciBnZXR0aW5nIGFuZCBzZXR0aW5nIGNvb2tpZXNcbiAgICAgICAgICAgIC8vIGZldGNoLWNvb2tpZSB3aWxsIHdyYXAgYSBmZXRjaCBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgZGVmYXVsdCBDb29raWVKYXIgb3IgYSBwcm92aWRlZCBvbmVcbiAgICAgICAgICAgIF90aGlzLmZldGNoVHlwZSA9IHJlcXVpcmVGdW5jKFwiZmV0Y2gtY29va2llXCIpKF90aGlzLmZldGNoVHlwZSwgX3RoaXMuamFyKTtcbiAgICAgICAgICAgIC8vIE5vZGUgbmVlZHMgRXZlbnRMaXN0ZW5lciBtZXRob2RzIG9uIEFib3J0Q29udHJvbGxlciB3aGljaCBvdXIgY3VzdG9tIHBvbHlmaWxsIGRvZXNuJ3QgcHJvdmlkZVxuICAgICAgICAgICAgX3RoaXMuYWJvcnRDb250cm9sbGVyVHlwZSA9IHJlcXVpcmVGdW5jKFwiYWJvcnQtY29udHJvbGxlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmZldGNoVHlwZSA9IGZldGNoLmJpbmQoc2VsZik7XG4gICAgICAgICAgICBfdGhpcy5hYm9ydENvbnRyb2xsZXJUeXBlID0gQWJvcnRDb250cm9sbGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgRmV0Y2hIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciwgZXJyb3IsIHRpbWVvdXRJZCwgbXNUaW1lb3V0LCByZXNwb25zZSwgZV8xLCBjb250ZW50LCBwYXlsb2FkO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgYWJvcnQgd2FzIG5vdCBzaWduYWxlZCBiZWZvcmUgY2FsbGluZyBzZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzXzEuQWJvcnRFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0Lm1ldGhvZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1ldGhvZCBkZWZpbmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVxdWVzdC51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB1cmwgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIgPSBuZXcgdGhpcy5hYm9ydENvbnRyb2xsZXJUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIb29rIG91ciBhYm9ydFNpZ25hbCBpbnRvIHRoZSBhYm9ydCBjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yc18xLkFib3J0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc1RpbWVvdXQgPSByZXF1ZXN0LnRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIlRpbWVvdXQgZnJvbSBIVFRQIHJlcXVlc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcnNfMS5UaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBtc1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsIDQsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZmV0Y2hUeXBlKHJlcXVlc3QudXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHJlcXVlc3QuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IFwibm8tY2FjaGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID09PSB0cnVlID8gXCJpbmNsdWRlXCIgOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgXCJDb250ZW50LVR5cGVcIjogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIiwgXCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIiB9LCByZXF1ZXN0LmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcImNvcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IFwibWFudWFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIkVycm9yIGZyb20gSFRUUCByZXF1ZXN0LiBcIiArIGVfMSArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVfMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkZXNlcmlhbGl6ZUNvbnRlbnQocmVzcG9uc2UsIHJlcXVlc3QucmVzcG9uc2VUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbnRlbnRdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBIdHRwQ2xpZW50XzEuSHR0cFJlc3BvbnNlKHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dCwgcGF5bG9hZCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZldGNoSHR0cENsaWVudC5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB2YXIgY29va2llcyA9IFwiXCI7XG4gICAgICAgIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0aGlzLmphcikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogdW51c2VkIHZhcmlhYmxlXG4gICAgICAgICAgICB0aGlzLmphci5nZXRDb29raWVzKHVybCwgZnVuY3Rpb24gKGUsIGMpIHsgcmV0dXJuIGNvb2tpZXMgPSBjLmpvaW4oXCI7IFwiKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgfTtcbiAgICByZXR1cm4gRmV0Y2hIdHRwQ2xpZW50O1xufShIdHRwQ2xpZW50XzEuSHR0cENsaWVudCkpO1xuZXhwb3J0cy5GZXRjaEh0dHBDbGllbnQgPSBGZXRjaEh0dHBDbGllbnQ7XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUNvbnRlbnQocmVzcG9uc2UsIHJlc3BvbnNlVHlwZSkge1xuICAgIHZhciBjb250ZW50O1xuICAgIHN3aXRjaCAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxuICAgICAgICAgICAgY29udGVudCA9IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNvbnRlbnQgPSByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgY2FzZSBcImRvY3VtZW50XCI6XG4gICAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2VUeXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb250ZW50ID0gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmV0Y2hIdHRwQ2xpZW50LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXEZldGNoSHR0cENsaWVudC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVGV4dE1lc3NhZ2VGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL1RleHRNZXNzYWdlRm9ybWF0XCIpO1xudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbi8qKiBAcHJpdmF0ZSAqL1xudmFyIEhhbmRzaGFrZVByb3RvY29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhhbmRzaGFrZVByb3RvY29sKCkge1xuICAgIH1cbiAgICAvLyBIYW5kc2hha2UgcmVxdWVzdCBpcyBhbHdheXMgSlNPTlxuICAgIEhhbmRzaGFrZVByb3RvY29sLnByb3RvdHlwZS53cml0ZUhhbmRzaGFrZVJlcXVlc3QgPSBmdW5jdGlvbiAoaGFuZHNoYWtlUmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC53cml0ZShKU09OLnN0cmluZ2lmeShoYW5kc2hha2VSZXF1ZXN0KSk7XG4gICAgfTtcbiAgICBIYW5kc2hha2VQcm90b2NvbC5wcm90b3R5cGUucGFyc2VIYW5kc2hha2VSZXNwb25zZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciByZXNwb25zZU1lc3NhZ2U7XG4gICAgICAgIHZhciBtZXNzYWdlRGF0YTtcbiAgICAgICAgdmFyIHJlbWFpbmluZ0RhdGE7XG4gICAgICAgIGlmIChVdGlsc18xLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHwgKHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICAgICAgICAgIC8vIEZvcm1hdCBpcyBiaW5hcnkgYnV0IHN0aWxsIG5lZWQgdG8gcmVhZCBKU09OIHRleHQgZnJvbSBoYW5kc2hha2UgcmVzcG9uc2VcbiAgICAgICAgICAgIHZhciBiaW5hcnlEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSBiaW5hcnlEYXRhLmluZGV4T2YoVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3JDb2RlKTtcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGlzIGluY29tcGxldGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxuICAgICAgICAgICAgLy8gb3B0aW9uYWwgY29udGVudCBhZnRlciBpcyBhZGRpdGlvbmFsIG1lc3NhZ2VzXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VMZW5ndGggPSBzZXBhcmF0b3JJbmRleCArIDE7XG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmluYXJ5RGF0YS5zbGljZSgwLCByZXNwb25zZUxlbmd0aCkpO1xuICAgICAgICAgICAgcmVtYWluaW5nRGF0YSA9IChiaW5hcnlEYXRhLmJ5dGVMZW5ndGggPiByZXNwb25zZUxlbmd0aCkgPyBiaW5hcnlEYXRhLnNsaWNlKHJlc3BvbnNlTGVuZ3RoKS5idWZmZXIgOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRleHREYXRhID0gZGF0YTtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3JJbmRleCA9IHRleHREYXRhLmluZGV4T2YoVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpO1xuICAgICAgICAgICAgaWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb250ZW50IGJlZm9yZSBzZXBhcmF0b3IgaXMgaGFuZHNoYWtlIHJlc3BvbnNlXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcbiAgICAgICAgICAgIHZhciByZXNwb25zZUxlbmd0aCA9IHNlcGFyYXRvckluZGV4ICsgMTtcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gdGV4dERhdGEuc3Vic3RyaW5nKDAsIHJlc3BvbnNlTGVuZ3RoKTtcbiAgICAgICAgICAgIHJlbWFpbmluZ0RhdGEgPSAodGV4dERhdGEubGVuZ3RoID4gcmVzcG9uc2VMZW5ndGgpID8gdGV4dERhdGEuc3Vic3RyaW5nKHJlc3BvbnNlTGVuZ3RoKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBzaG91bGQgaGF2ZSBqdXN0IHRoZSBzaW5nbGUgaGFuZHNoYWtlIG1lc3NhZ2VcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC5wYXJzZShtZXNzYWdlRGF0YSk7XG4gICAgICAgIHZhciByZXNwb25zZSA9IEpTT04ucGFyc2UobWVzc2FnZXNbMF0pO1xuICAgICAgICBpZiAocmVzcG9uc2UudHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYSBoYW5kc2hha2UgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZTtcbiAgICAgICAgLy8gbXVsdGlwbGUgbWVzc2FnZXMgY291bGQgaGF2ZSBhcnJpdmVkIHdpdGggaGFuZHNoYWtlXG4gICAgICAgIC8vIHJldHVybiBhZGRpdGlvbmFsIGRhdGEgdG8gYmUgcGFyc2VkIGFzIHVzdWFsLCBvciBudWxsIGlmIGFsbCBwYXJzZWRcbiAgICAgICAgcmV0dXJuIFtyZW1haW5pbmdEYXRhLCByZXNwb25zZU1lc3NhZ2VdO1xuICAgIH07XG4gICAgcmV0dXJuIEhhbmRzaGFrZVByb3RvY29sO1xufSgpKTtcbmV4cG9ydHMuSGFuZHNoYWtlUHJvdG9jb2wgPSBIYW5kc2hha2VQcm90b2NvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhhbmRzaGFrZVByb3RvY29sLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXEhhbmRzaGFrZVByb3RvY29sLmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqIFJlcHJlc2VudHMgYW4gSFRUUCByZXNwb25zZS4gKi9cbnZhciBIdHRwUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHR0cFJlc3BvbnNlKHN0YXR1c0NvZGUsIHN0YXR1c1RleHQsIGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZTtcbn0oKSk7XG5leHBvcnRzLkh0dHBSZXNwb25zZSA9IEh0dHBSZXNwb25zZTtcbi8qKiBBYnN0cmFjdGlvbiBvdmVyIGFuIEhUVFAgY2xpZW50LlxuICpcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgYW4gYWJzdHJhY3Rpb24gb3ZlciBhbiBIVFRQIGNsaWVudCBzbyB0aGF0IGEgZGlmZmVyZW50IGltcGxlbWVudGF0aW9uIGNhbiBiZSBwcm92aWRlZCBvbiBkaWZmZXJlbnQgcGxhdGZvcm1zLlxuICovXG52YXIgSHR0cENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50KCkge1xuICAgIH1cbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgbWV0aG9kOiBcIkdFVFwiLCB1cmw6IHVybCB9KSk7XG4gICAgfTtcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKF9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJQT1NUXCIsIHVybDogdXJsIH0pKTtcbiAgICB9O1xuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChfX2Fzc2lnbih7fSwgb3B0aW9ucywgeyBtZXRob2Q6IFwiREVMRVRFXCIsIHVybDogdXJsIH0pKTtcbiAgICB9O1xuICAgIC8qKiBHZXRzIGFsbCBjb29raWVzIHRoYXQgYXBwbHkgdG8gdGhlIHNwZWNpZmllZCBVUkwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgdGhhdCB0aGUgY29va2llcyBhcmUgdmFsaWQgZm9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIGNvbnRhaW5pbmcgYWxsIHRoZSBrZXktdmFsdWUgY29va2llIHBhaXJzIGZvciB0aGUgc3BlY2lmaWVkIFVSTC5cbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuICAgIHJldHVybiBIdHRwQ2xpZW50O1xufSgpKTtcbmV4cG9ydHMuSHR0cENsaWVudCA9IEh0dHBDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ2xpZW50LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXEh0dHBDbGllbnQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIERlZmF1bHRIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9EZWZhdWx0SHR0cENsaWVudFwiKTtcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xudmFyIElUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0lUcmFuc3BvcnRcIik7XG52YXIgTG9uZ1BvbGxpbmdUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL0xvbmdQb2xsaW5nVHJhbnNwb3J0XCIpO1xudmFyIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfMSA9IHJlcXVpcmUoXCIuL1NlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRcIik7XG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xudmFyIFdlYlNvY2tldFRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vV2ViU29ja2V0VHJhbnNwb3J0XCIpO1xudmFyIE1BWF9SRURJUkVDVFMgPSAxMDA7XG4vKiogQHByaXZhdGUgKi9cbnZhciBIdHRwQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdHRwQ29ubmVjdGlvbih1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICB0aGlzLm5lZ290aWF0ZVZlcnNpb24gPSAxO1xuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gVXRpbHNfMS5jcmVhdGVMb2dnZXIob3B0aW9ucy5sb2dnZXIpO1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLnJlc29sdmVVcmwodXJsKTtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgPSBvcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQ7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPT09IFwiYm9vbGVhblwiIHx8IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMud2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIndpdGhDcmVkZW50aWFscyBvcHRpb24gd2FzIG5vdCBhICdib29sZWFuJyBvciAndW5kZWZpbmVkJyB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2ViU29ja2V0TW9kdWxlID0gbnVsbDtcbiAgICAgICAgdmFyIGV2ZW50U291cmNlTW9kdWxlID0gbnVsbDtcbiAgICAgICAgaWYgKFV0aWxzXzEuUGxhdGZvcm0uaXNOb2RlICYmIHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBJbiBvcmRlciB0byBpZ25vcmUgdGhlIGR5bmFtaWMgcmVxdWlyZSBpbiB3ZWJwYWNrIGJ1aWxkcyB3ZSBuZWVkIHRvIGRvIHRoaXMgbWFnaWNcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IFRTIGRvZXNuJ3Qga25vdyBhYm91dCB0aGVzZSBuYW1lc1xuICAgICAgICAgICAgdmFyIHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZTtcbiAgICAgICAgICAgIHdlYlNvY2tldE1vZHVsZSA9IHJlcXVpcmVGdW5jKFwid3NcIik7XG4gICAgICAgICAgICBldmVudFNvdXJjZU1vZHVsZSA9IHJlcXVpcmVGdW5jKFwiZXZlbnRzb3VyY2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiICYmICFvcHRpb25zLldlYlNvY2tldCkge1xuICAgICAgICAgICAgb3B0aW9ucy5XZWJTb2NrZXQgPSBXZWJTb2NrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc05vZGUgJiYgIW9wdGlvbnMuV2ViU29ja2V0KSB7XG4gICAgICAgICAgICBpZiAod2ViU29ja2V0TW9kdWxlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5XZWJTb2NrZXQgPSB3ZWJTb2NrZXRNb2R1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiB0eXBlb2YgRXZlbnRTb3VyY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgIW9wdGlvbnMuRXZlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuRXZlbnRTb3VyY2UgPSBFdmVudFNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSAmJiAhb3B0aW9ucy5FdmVudFNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudFNvdXJjZU1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuRXZlbnRTb3VyY2UgPSBldmVudFNvdXJjZU1vZHVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBvcHRpb25zLmh0dHBDbGllbnQgfHwgbmV3IERlZmF1bHRIdHRwQ2xpZW50XzEuRGVmYXVsdEh0dHBDbGllbnQodGhpcy5sb2dnZXIpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IFwiRGlzY29ubmVjdGVkXCIgLyogRGlzY29ubmVjdGVkICovO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMub25yZWNlaXZlID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcbiAgICB9XG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRyYW5zZmVyRm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlLCBtZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJGb3JtYXQgPSB0cmFuc2ZlckZvcm1hdCB8fCBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTdGFydGluZyBjb25uZWN0aW9uIHdpdGggdHJhbnNmZXIgZm9ybWF0ICdcIiArIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdFt0cmFuc2ZlckZvcm1hdF0gKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYW4gSHR0cENvbm5lY3Rpb24gdGhhdCBpcyBub3QgaW4gdGhlICdEaXNjb25uZWN0ZWQnIHN0YXRlLlwiKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkNvbm5lY3RpbmdcIiAvKiBDb25uZWN0aW5nICovO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEludGVybmFsUHJvbWlzZSA9IHRoaXMuc3RhcnRJbnRlcm5hbCh0cmFuc2ZlckZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0SW50ZXJuYWxQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkZhaWxlZCB0byBzdGFydCB0aGUgSHR0cENvbm5lY3Rpb24gYmVmb3JlIHN0b3AoKSB3YXMgY2FsbGVkLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW5ub3QgYXdhaXQgc3RvcFByb21pc2UgaW5zaWRlIHN0YXJ0SW50ZXJuYWwgc2luY2Ugc3RvcEludGVybmFsIGF3YWl0cyB0aGUgc3RhcnRJbnRlcm5hbFByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3BQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2Fubm90IGF3YWl0IHN0b3BQcm9taXNlIGluc2lkZSBzdGFydEludGVybmFsIHNpbmNlIHN0b3BJbnRlcm5hbCBhd2FpdHMgdGhlIHN0YXJ0SW50ZXJuYWxQcm9taXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IFwiQ29ubmVjdGVkXCIgLyogQ29ubmVjdGVkICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSHR0cENvbm5lY3Rpb24uc3RhcnRJbnRlcm5hbCBjb21wbGV0ZWQgZ3JhY2VmdWxseSBidXQgZGlkbid0IGVudGVyIHRoZSBjb25uZWN0aW9uIGludG8gdGhlIGNvbm5lY3RlZCBzdGF0ZSFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBcIkNvbm5lY3RlZFwiIC8qIENvbm5lY3RlZCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBzZW5kIGRhdGEgaWYgdGhlIGNvbm5lY3Rpb24gaXMgbm90IGluIHRoZSAnQ29ubmVjdGVkJyBTdGF0ZS5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zZW5kUXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZFF1ZXVlID0gbmV3IFRyYW5zcG9ydFNlbmRRdWV1ZSh0aGlzLnRyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhbnNwb3J0IHdpbGwgbm90IGJlIG51bGwgaWYgc3RhdGUgaXMgY29ubmVjdGVkXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRRdWV1ZS5zZW5kKGRhdGEpO1xuICAgIH07XG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNhbGwgdG8gSHR0cENvbm5lY3Rpb24uc3RvcChcIiArIGVycm9yICsgXCIpIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBpcyBhbHJlYWR5IGluIHRoZSBkaXNjb25uZWN0ZWQgc3RhdGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNhbGwgdG8gSHR0cENvbm5lY3Rpb24uc3RvcChcIiArIGVycm9yICsgXCIpIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBpcyBhbHJlYWR5IGluIHRoZSBkaXNjb25uZWN0aW5nIHN0YXRlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5zdG9wUHJvbWlzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IFwiRGlzY29ubmVjdGluZ1wiIC8qIERpc2Nvbm5lY3RpbmcgKi87XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBjb21wbGV0ZSBzdG9wKCkgdW50aWwgc3RvcENvbm5lY3Rpb24oKSBjb21wbGV0ZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RvcFByb21pc2VSZXNvbHZlciA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3BJbnRlcm5hbCBzaG91bGQgbmV2ZXIgdGhyb3cgc28ganVzdCBvYnNlcnZlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdG9wSW50ZXJuYWwoZXJyb3IpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcEludGVybmFsIHNob3VsZCBuZXZlciB0aHJvdyBzbyBqdXN0IG9ic2VydmUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3BQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wSW50ZXJuYWwgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgZV8yO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVycm9yIGFzIHNvb24gYXMgcG9zc2libGUgb3RoZXJ3aXNlIHRoZXJlIGlzIGEgcmFjZSBiZXR3ZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdHJhbnNwb3J0IGNsb3NpbmcgYW5kIHByb3ZpZGluZyBhbiBlcnJvciBhbmQgdGhlIGVycm9yIGZyb20gYSBjbG9zZSBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSB3b3VsZCBwcmVmZXIgdGhlIGNsb3NlIG1lc3NhZ2UgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdGFydEludGVybmFsUHJvbWlzZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydCkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbNSwgNywgLCA4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5zdG9wKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJIdHRwQ29ubmVjdGlvbi50cmFuc3BvcnQuc3RvcCgpIHRocmV3IGVycm9yICdcIiArIGVfMiArIFwiJy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHR0cENvbm5lY3Rpb24udHJhbnNwb3J0IGlzIHVuZGVmaW5lZCBpbiBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgYmVjYXVzZSBzdGFydCgpIGZhaWxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0SW50ZXJuYWwgPSBmdW5jdGlvbiAodHJhbnNmZXJGb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVybCwgbmVnb3RpYXRlUmVzcG9uc2UsIHJlZGlyZWN0cywgX2xvb3BfMSwgdGhpc18xLCBlXzM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJhc2VVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IHRoaXMub3B0aW9ucy5hY2Nlc3NUb2tlbkZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMTIsICwgMTNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOZWdvdGlhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm9wdGlvbnMudHJhbnNwb3J0ID09PSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBhZGQgYSBjb25uZWN0aW9uIElEIGluIHRoaXMgY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLmNvbnN0cnVjdFRyYW5zcG9ydChJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQganVzdCBjYWxsIGNvbm5lY3QgZGlyZWN0bHkgaW4gdGhpcyBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZmFsbGJhY2sgb3IgbmVnb3RpYXRlIGluIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQodXJsLCB0cmFuc2ZlckZvcm1hdCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQganVzdCBjYWxsIGNvbm5lY3QgZGlyZWN0bHkgaW4gdGhpcyBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZmFsbGJhY2sgb3IgbmVnb3RpYXRlIGluIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHRocm93IG5ldyBFcnJvcihcIk5lZ290aWF0aW9uIGNhbiBvbmx5IGJlIHNraXBwZWQgd2hlbiB1c2luZyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBkaXJlY3RseS5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszIC8qYnJlYWsqLywgMTFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXNzVG9rZW5fMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpc18xLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlUmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgdHJpZXMgdG8gc3RvcCB0aGUgY29ubmVjdGlvbiB3aGVuIGl0IGlzIGJlaW5nIHN0YXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc18xLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0aW5nXCIgLyogRGlzY29ubmVjdGluZyAqLyB8fCB0aGlzXzEuY29ubmVjdGlvblN0YXRlID09PSBcIkRpc2Nvbm5lY3RlZFwiIC8qIERpc2Nvbm5lY3RlZCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29ubmVjdGlvbiB3YXMgc3RvcHBlZCBkdXJpbmcgbmVnb3RpYXRpb24uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5lZ290aWF0ZVJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ290aWF0ZVJlc3BvbnNlLlByb3RvY29sVmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZXRlY3RlZCBhIGNvbm5lY3Rpb24gYXR0ZW1wdCB0byBhbiBBU1AuTkVUIFNpZ25hbFIgU2VydmVyLiBUaGlzIGNsaWVudCBvbmx5IHN1cHBvcnRzIGNvbm5lY3RpbmcgdG8gYW4gQVNQLk5FVCBDb3JlIFNpZ25hbFIgU2VydmVyLiBTZWUgaHR0cHM6Ly9ha2EubXMvc2lnbmFsci1jb3JlLWRpZmZlcmVuY2VzIGZvciBkZXRhaWxzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ290aWF0ZVJlc3BvbnNlLnVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBuZWdvdGlhdGVSZXNwb25zZS51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbl8xID0gbmVnb3RpYXRlUmVzcG9uc2UuYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfMS5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2Nlc3NUb2tlbl8xOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXzEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8xKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS51cmwgJiYgcmVkaXJlY3RzIDwgTUFYX1JFRElSRUNUUykgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdHMgPT09IE1BWF9SRURJUkVDVFMgJiYgbmVnb3RpYXRlUmVzcG9uc2UudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmVnb3RpYXRlIHJlZGlyZWN0aW9uIGxpbWl0IGV4Y2VlZGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY3JlYXRlVHJhbnNwb3J0KHVybCwgdGhpcy5vcHRpb25zLnRyYW5zcG9ydCwgbmVnb3RpYXRlUmVzcG9uc2UsIHRyYW5zZmVyRm9ybWF0KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDExO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0IGluc3RhbmNlb2YgTG9uZ1BvbGxpbmdUcmFuc3BvcnRfMS5Mb25nUG9sbGluZ1RyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMuaW5oZXJlbnRLZWVwQWxpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBcIkNvbm5lY3RpbmdcIiAvKiBDb25uZWN0aW5nICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBjb25uZWN0aW9uIHRyYW5zaXRpb25zIHRvIHRoZSBjb25uZWN0ZWQgc3RhdGUgcHJpb3IgdG8gY29tcGxldGluZyB0aGlzLnN0YXJ0SW50ZXJuYWxQcm9taXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0KCkgd2lsbCBoYW5kbGUgdGhlIGNhc2Ugd2hlbiBzdG9wIHdhcyBjYWxsZWQgYW5kIHN0YXJ0SW50ZXJuYWwgZXhpdHMgc3RpbGwgaW4gdGhlIGRpc2Nvbm5lY3Rpbmcgc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJUaGUgSHR0cENvbm5lY3Rpb24gY29ubmVjdGVkIHN1Y2Nlc3NmdWxseS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBcIkNvbm5lY3RlZFwiIC8qIENvbm5lY3RlZCAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSBjb25uZWN0aW9uOiBcIiArIGVfMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IFwiRGlzY29ubmVjdGVkXCIgLyogRGlzY29ubmVjdGVkICovO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QoZV8zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGhlYWRlcnMsIHRva2VuLCBfYSwgbmFtZSwgdmFsdWUsIG5lZ290aWF0ZVVybCwgcmVzcG9uc2UsIG5lZ290aWF0ZVJlc3BvbnNlLCBlXzQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBVdGlsc18xLmdldFVzZXJBZ2VudEhlYWRlcigpLCBuYW1lID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVVcmwgPSB0aGlzLnJlc29sdmVOZWdvdGlhdGVVcmwodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2VuZGluZyBuZWdvdGlhdGlvbiByZXF1ZXN0OiBcIiArIG5lZ290aWF0ZVVybCArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFszLCA1LCAsIDZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cENsaWVudC5wb3N0KG5lZ290aWF0ZVVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7fSwgaGVhZGVycywgdGhpcy5vcHRpb25zLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBzdGF0dXMgY29kZSByZXR1cm5lZCBmcm9tIG5lZ290aWF0ZSAnXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCInXCIpKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5lZ290aWF0ZVJlc3BvbnNlLm5lZ290aWF0ZVZlcnNpb24gfHwgbmVnb3RpYXRlUmVzcG9uc2UubmVnb3RpYXRlVmVyc2lvbiA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWdvdGlhdGUgdmVyc2lvbiAwIGRvZXNuJ3QgdXNlIGNvbm5lY3Rpb25Ub2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvIHdlIHNldCBpdCBlcXVhbCB0byBjb25uZWN0aW9uSWQgc28gYWxsIG91ciBsb2dpYyBjYW4gdXNlIGNvbm5lY3Rpb25Ub2tlbiB3aXRob3V0IGJlaW5nIGF3YXJlIG9mIHRoZSBuZWdvdGlhdGUgdmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlLmNvbm5lY3Rpb25Ub2tlbiA9IG5lZ290aWF0ZVJlc3BvbnNlLmNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZWdvdGlhdGVSZXNwb25zZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNCA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIGNvbXBsZXRlIG5lZ290aWF0aW9uIHdpdGggdGhlIHNlcnZlcjogXCIgKyBlXzQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KGVfNCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdFVybCA9IGZ1bmN0aW9uICh1cmwsIGNvbm5lY3Rpb25Ub2tlbikge1xuICAgICAgICBpZiAoIWNvbm5lY3Rpb25Ub2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiKSArIChcImlkPVwiICsgY29ubmVjdGlvblRva2VuKTtcbiAgICB9O1xuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAodXJsLCByZXF1ZXN0ZWRUcmFuc3BvcnQsIG5lZ290aWF0ZVJlc3BvbnNlLCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdFVybCwgdHJhbnNwb3J0RXhjZXB0aW9ucywgdHJhbnNwb3J0cywgbmVnb3RpYXRlLCBfaSwgdHJhbnNwb3J0c18xLCBlbmRwb2ludCwgdHJhbnNwb3J0T3JFcnJvciwgZXhfMSwgZXhfMiwgbWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSVRyYW5zcG9ydChyZXF1ZXN0ZWRUcmFuc3BvcnQpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiB3YXMgcHJvdmlkZWQgYW4gaW5zdGFuY2Ugb2YgSVRyYW5zcG9ydCwgdXNpbmcgdGhhdCBkaXJlY3RseS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHJlcXVlc3RlZFRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQoY29ubmVjdFVybCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMgPSBuZWdvdGlhdGVSZXNwb25zZS5hdmFpbGFibGVUcmFuc3BvcnRzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlID0gbmVnb3RpYXRlUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHRyYW5zcG9ydHNfMSA9IHRyYW5zcG9ydHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgdHJhbnNwb3J0c18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gdHJhbnNwb3J0c18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydE9yRXJyb3IgPSB0aGlzLnJlc29sdmVUcmFuc3BvcnRPckVycm9yKGVuZHBvaW50LCByZXF1ZXN0ZWRUcmFuc3BvcnQsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRyYW5zcG9ydE9yRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGVycm9yIGFuZCBjb250aW51ZSwgd2UgZG9uJ3Qgd2FudCB0byBjYXVzZSBhIHJlLW5lZ290aWF0ZSBpbiB0aGVzZSBjYXNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0RXhjZXB0aW9ucy5wdXNoKGVuZHBvaW50LnRyYW5zcG9ydCArIFwiIGZhaWxlZDogXCIgKyB0cmFuc3BvcnRPckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSVRyYW5zcG9ydCh0cmFuc3BvcnRPckVycm9yKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnRPckVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhbmVnb3RpYXRlKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFs1LCA3LCAsIDhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSh1cmwpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4XzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QoZXhfMSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0VXJsID0gdGhpcy5jcmVhdGVDb25uZWN0VXJsKHVybCwgbmVnb3RpYXRlLmNvbm5lY3Rpb25Ub2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbOSwgMTEsICwgMTJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRUcmFuc3BvcnQoY29ubmVjdFVybCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gbmVnb3RpYXRlLmNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4XzIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIkZhaWxlZCB0byBzdGFydCB0aGUgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJzogXCIgKyBleF8yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEV4Y2VwdGlvbnMucHVzaChlbmRwb2ludC50cmFuc3BvcnQgKyBcIiBmYWlsZWQ6IFwiICsgZXhfMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IFwiQ29ubmVjdGluZ1wiIC8qIENvbm5lY3RpbmcgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJGYWlsZWQgdG8gc2VsZWN0IHRyYW5zcG9ydCBiZWZvcmUgc3RvcCgpIHdhcyBjYWxsZWQuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zcG9ydEV4Y2VwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbmFibGUgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyIHdpdGggYW55IG9mIHRoZSBhdmFpbGFibGUgdHJhbnNwb3J0cy4gXCIgKyB0cmFuc3BvcnRFeGNlcHRpb25zLmpvaW4oXCIgXCIpKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vbmUgb2YgdGhlIHRyYW5zcG9ydHMgc3VwcG9ydGVkIGJ5IHRoZSBjbGllbnQgYXJlIHN1cHBvcnRlZCBieSB0aGUgc2VydmVyLlwiKSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gICAgICAgIHN3aXRjaCAodHJhbnNwb3J0KSB7XG4gICAgICAgICAgICBjYXNlIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLldlYlNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInV2ViU29ja2V0JyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdlYlNvY2tldFRyYW5zcG9ydF8xLldlYlNvY2tldFRyYW5zcG9ydCh0aGlzLmh0dHBDbGllbnQsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50IHx8IGZhbHNlLCB0aGlzLm9wdGlvbnMuV2ViU29ja2V0LCB0aGlzLm9wdGlvbnMuaGVhZGVycyB8fCB7fSk7XG4gICAgICAgICAgICBjYXNlIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5TZXJ2ZXJTZW50RXZlbnRzOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLkV2ZW50U291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidFdmVudFNvdXJjZScgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0XzEuU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCh0aGlzLmh0dHBDbGllbnQsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50IHx8IGZhbHNlLCB0aGlzLm9wdGlvbnMuRXZlbnRTb3VyY2UsIHRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucy5oZWFkZXJzIHx8IHt9KTtcbiAgICAgICAgICAgIGNhc2UgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlLkxvbmdQb2xsaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTG9uZ1BvbGxpbmdUcmFuc3BvcnRfMS5Mb25nUG9sbGluZ1RyYW5zcG9ydCh0aGlzLmh0dHBDbGllbnQsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50IHx8IGZhbHNlLCB0aGlzLm9wdGlvbnMud2l0aENyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyB8fCB7fSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHJhbnNwb3J0OiBcIiArIHRyYW5zcG9ydCArIFwiLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy50cmFuc3BvcnQub25yZWNlaXZlID0gdGhpcy5vbnJlY2VpdmU7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuc3RvcENvbm5lY3Rpb24oZSk7IH07XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KHVybCwgdHJhbnNmZXJGb3JtYXQpO1xuICAgIH07XG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVUcmFuc3BvcnRPckVycm9yID0gZnVuY3Rpb24gKGVuZHBvaW50LCByZXF1ZXN0ZWRUcmFuc3BvcnQsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSB7XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbZW5kcG9pbnQudHJhbnNwb3J0XTtcbiAgICAgICAgaWYgKHRyYW5zcG9ydCA9PT0gbnVsbCB8fCB0cmFuc3BvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgZW5kcG9pbnQudHJhbnNwb3J0ICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGNsaWVudC5cIik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIGVuZHBvaW50LnRyYW5zcG9ydCArIFwiJyBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBjbGllbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydE1hdGNoZXMocmVxdWVzdGVkVHJhbnNwb3J0LCB0cmFuc3BvcnQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZmVyRm9ybWF0cyA9IGVuZHBvaW50LnRyYW5zZmVyRm9ybWF0cy5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdFtzXTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0cy5pbmRleE9mKHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodHJhbnNwb3J0ID09PSBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0cyAmJiAhdGhpcy5vcHRpb25zLldlYlNvY2tldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0cmFuc3BvcnQgPT09IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZS5TZXJ2ZXJTZW50RXZlbnRzICYmICF0aGlzLm9wdGlvbnMuRXZlbnRTb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBJVHJhbnNwb3J0XzEuSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJyBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC4nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIidcIiArIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlbGVjdGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSByZXF1ZXN0ZWQgdHJhbnNmZXIgZm9ybWF0ICdcIiArIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdFtyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdF0gKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgZG9lcyBub3Qgc3VwcG9ydCBcIiArIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdFtyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdF0gKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgSVRyYW5zcG9ydF8xLkh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCB3YXMgZGlzYWJsZWQgYnkgdGhlIGNsaWVudC5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIidcIiArIElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGlzIGRpc2FibGVkIGJ5IHRoZSBjbGllbnQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNJVHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICByZXR1cm4gdHJhbnNwb3J0ICYmIHR5cGVvZiAodHJhbnNwb3J0KSA9PT0gXCJvYmplY3RcIiAmJiBcImNvbm5lY3RcIiBpbiB0cmFuc3BvcnQ7XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdHRwQ29ubmVjdGlvbi5zdG9wQ29ubmVjdGlvbihcIiArIGVycm9yICsgXCIpIGNhbGxlZCB3aGlsZSBpbiBzdGF0ZSBcIiArIHRoaXMuY29ubmVjdGlvblN0YXRlICsgXCIuXCIpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHN0b3BFcnJvciwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBlcnJvciBmcm9tIHRoZSB0cmFuc3BvcnRcbiAgICAgICAgZXJyb3IgPSB0aGlzLnN0b3BFcnJvciB8fCBlcnJvcjtcbiAgICAgICAgdGhpcy5zdG9wRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ2FsbCB0byBIdHRwQ29ubmVjdGlvbi5zdG9wQ29ubmVjdGlvbihcIiArIGVycm9yICsgXCIpIHdhcyBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGVkIHN0YXRlLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IFwiQ29ubmVjdGluZ1wiIC8qIENvbm5lY3RpbmcgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuV2FybmluZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3BDb25uZWN0aW9uKFwiICsgZXJyb3IgKyBcIikgd2FzIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29ubmVjdGlvbiBpcyBzdGlsbCBpbiB0aGUgY29ubmVjdGluZyBzdGF0ZS5cIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIdHRwQ29ubmVjdGlvbi5zdG9wQ29ubmVjdGlvbihcIiArIGVycm9yICsgXCIpIHdhcyBjYWxsZWQgd2hpbGUgdGhlIGNvbm5lY3Rpb24gaXMgc3RpbGwgaW4gdGhlIGNvbm5lY3Rpbmcgc3RhdGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJEaXNjb25uZWN0aW5nXCIgLyogRGlzY29ubmVjdGluZyAqLykge1xuICAgICAgICAgICAgLy8gQSBjYWxsIHRvIHN0b3AoKSBpbmR1Y2VkIHRoaXMgY2FsbCB0byBzdG9wQ29ubmVjdGlvbiBhbmQgbmVlZHMgdG8gYmUgY29tcGxldGVkLlxuICAgICAgICAgICAgLy8gQW55IHN0b3AoKSBhd2FpdGVycyB3aWxsIGJlIHNjaGVkdWxlZCB0byBjb250aW51ZSBhZnRlciB0aGUgb25jbG9zZSBjYWxsYmFjayBmaXJlcy5cbiAgICAgICAgICAgIHRoaXMuc3RvcFByb21pc2VSZXNvbHZlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJDb25uZWN0aW9uIGRpc2Nvbm5lY3RlZCB3aXRoIGVycm9yICdcIiArIGVycm9yICsgXCInLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbmRRdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWUuc3RvcCgpLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiVHJhbnNwb3J0U2VuZFF1ZXVlLnN0b3AoKSB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZW5kUXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gXCJEaXNjb25uZWN0ZWRcIiAvKiBEaXNjb25uZWN0ZWQgKi87XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uY2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIFwiSHR0cENvbm5lY3Rpb24ub25jbG9zZShcIiArIGVycm9yICsgXCIpIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzb2x2ZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgLy8gc3RhcnRzV2l0aCBpcyBub3Qgc3VwcG9ydGVkIGluIElFXG4gICAgICAgIGlmICh1cmwubGFzdEluZGV4T2YoXCJodHRwczovL1wiLCAwKSA9PT0gMCB8fCB1cmwubGFzdEluZGV4T2YoXCJodHRwOi8vXCIsIDApID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghVXRpbHNfMS5QbGF0Zm9ybS5pc0Jyb3dzZXIgfHwgIXdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlc29sdmUgJ1wiICsgdXJsICsgXCInLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXR0aW5nIHRoZSB1cmwgdG8gdGhlIGhyZWYgcHJvcGVyeSBvZiBhbiBhbmNob3IgdGFnIGhhbmRsZXMgbm9ybWFsaXphdGlvblxuICAgICAgICAvLyBmb3IgdXMuIFRoZXJlIGFyZSAzIG1haW4gY2FzZXMuXG4gICAgICAgIC8vIDEuIFJlbGF0aXZlIHBhdGggbm9ybWFsaXphdGlvbiBlLmcgXCJiXCIgLT4gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvYS9iXCJcbiAgICAgICAgLy8gMi4gQWJzb2x1dGUgcGF0aCBub3JtYWxpemF0aW9uIGUuZyBcIi9hL2JcIiAtPiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hL2JcIlxuICAgICAgICAvLyAzLiBOZXR3b3JrcGF0aCByZWZlcmVuY2Ugbm9ybWFsaXphdGlvbiBlLmcgXCIvL2xvY2FsaG9zdDo1MDAwL2EvYlwiIC0+IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL2EvYlwiXG4gICAgICAgIHZhciBhVGFnID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICBhVGFnLmhyZWYgPSB1cmw7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiTm9ybWFsaXppbmcgJ1wiICsgdXJsICsgXCInIHRvICdcIiArIGFUYWcuaHJlZiArIFwiJy5cIik7XG4gICAgICAgIHJldHVybiBhVGFnLmhyZWY7XG4gICAgfTtcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzb2x2ZU5lZ290aWF0ZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xuICAgICAgICB2YXIgbmVnb3RpYXRlVXJsID0gdXJsLnN1YnN0cmluZygwLCBpbmRleCA9PT0gLTEgPyB1cmwubGVuZ3RoIDogaW5kZXgpO1xuICAgICAgICBpZiAobmVnb3RpYXRlVXJsW25lZ290aWF0ZVVybC5sZW5ndGggLSAxXSAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICBuZWdvdGlhdGVVcmwgKz0gXCJuZWdvdGlhdGVcIjtcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IGluZGV4ID09PSAtMSA/IFwiXCIgOiB1cmwuc3Vic3RyaW5nKGluZGV4KTtcbiAgICAgICAgaWYgKG5lZ290aWF0ZVVybC5pbmRleE9mKFwibmVnb3RpYXRlVmVyc2lvblwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBpbmRleCA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiO1xuICAgICAgICAgICAgbmVnb3RpYXRlVXJsICs9IFwibmVnb3RpYXRlVmVyc2lvbj1cIiArIHRoaXMubmVnb3RpYXRlVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlVXJsO1xuICAgIH07XG4gICAgcmV0dXJuIEh0dHBDb25uZWN0aW9uO1xufSgpKTtcbmV4cG9ydHMuSHR0cENvbm5lY3Rpb24gPSBIdHRwQ29ubmVjdGlvbjtcbmZ1bmN0aW9uIHRyYW5zcG9ydE1hdGNoZXMocmVxdWVzdGVkVHJhbnNwb3J0LCBhY3R1YWxUcmFuc3BvcnQpIHtcbiAgICByZXR1cm4gIXJlcXVlc3RlZFRyYW5zcG9ydCB8fCAoKGFjdHVhbFRyYW5zcG9ydCAmIHJlcXVlc3RlZFRyYW5zcG9ydCkgIT09IDApO1xufVxuLyoqIEBwcml2YXRlICovXG52YXIgVHJhbnNwb3J0U2VuZFF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyYW5zcG9ydFNlbmRRdWV1ZSh0cmFuc3BvcnQpIHtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuZXhlY3V0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhID0gbmV3IFByb21pc2VTb3VyY2UoKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRSZXN1bHQgPSBuZXcgUHJvbWlzZVNvdXJjZSgpO1xuICAgICAgICB0aGlzLnNlbmRMb29wUHJvbWlzZSA9IHRoaXMuc2VuZExvb3AoKTtcbiAgICB9XG4gICAgVHJhbnNwb3J0U2VuZFF1ZXVlLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5idWZmZXJEYXRhKGRhdGEpO1xuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0UmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydFJlc3VsdCA9IG5ldyBQcm9taXNlU291cmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0UmVzdWx0LnByb21pc2U7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlcmVkRGF0YS5yZXNvbHZlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRMb29wUHJvbWlzZTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggJiYgdHlwZW9mICh0aGlzLmJ1ZmZlclswXSkgIT09IHR5cGVvZiAoZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGRhdGEgdG8gYmUgb2YgdHlwZSBcIiArIHR5cGVvZiAodGhpcy5idWZmZXIpICsgXCIgYnV0IHdhcyBvZiB0eXBlIFwiICsgdHlwZW9mIChkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5wcm90b3R5cGUuc2VuZExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0cmFuc3BvcnRSZXN1bHQsIGRhdGEsIGVycm9yXzE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZW5kQnVmZmVyZWREYXRhLnByb21pc2VdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhlY3V0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0UmVzdWx0LnJlamVjdChcIkNvbm5lY3Rpb24gc3RvcHBlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyZWREYXRhID0gbmV3IFByb21pc2VTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydFJlc3VsdCA9IHRoaXMudHJhbnNwb3J0UmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRSZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdHlwZW9mICh0aGlzLmJ1ZmZlclswXSkgPT09IFwic3RyaW5nXCIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmpvaW4oXCJcIikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zcG9ydFNlbmRRdWV1ZS5jb25jYXRCdWZmZXJzKHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMiwgNCwgLCA1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5zZW5kKGRhdGEpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0UmVzdWx0LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0UmVzdWx0LnJlamVjdChlcnJvcl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMyAvKmJyZWFrKi8sIDBdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRTZW5kUXVldWUuY29uY2F0QnVmZmVycyA9IGZ1bmN0aW9uIChhcnJheUJ1ZmZlcnMpIHtcbiAgICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gYXJyYXlCdWZmZXJzLm1hcChmdW5jdGlvbiAoYikgeyByZXR1cm4gYi5ieXRlTGVuZ3RoOyB9KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyBiOyB9KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYXJyYXlCdWZmZXJzXzEgPSBhcnJheUJ1ZmZlcnM7IF9pIDwgYXJyYXlCdWZmZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFycmF5QnVmZmVyc18xW19pXTtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQobmV3IFVpbnQ4QXJyYXkoaXRlbSksIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gaXRlbS5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuYnVmZmVyO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zcG9ydFNlbmRRdWV1ZTtcbn0oKSk7XG5leHBvcnRzLlRyYW5zcG9ydFNlbmRRdWV1ZSA9IFRyYW5zcG9ydFNlbmRRdWV1ZTtcbnZhciBQcm9taXNlU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb21pc2VTb3VyY2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfYSA9IFtyZXNvbHZlLCByZWplY3RdLCBfdGhpcy5yZXNvbHZlciA9IF9hWzBdLCBfdGhpcy5yZWplY3RlciA9IF9hWzFdLCBfYTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFByb21pc2VTb3VyY2UucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZXIoKTtcbiAgICB9O1xuICAgIFByb21pc2VTb3VyY2UucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgdGhpcy5yZWplY3RlcihyZWFzb24pO1xuICAgIH07XG4gICAgcmV0dXJuIFByb21pc2VTb3VyY2U7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHR0cENvbm5lY3Rpb24uanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcSHR0cENvbm5lY3Rpb24uanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBIYW5kc2hha2VQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSGFuZHNoYWtlUHJvdG9jb2xcIik7XG52YXIgSUh1YlByb3RvY29sXzEgPSByZXF1aXJlKFwiLi9JSHViUHJvdG9jb2xcIik7XG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbnZhciBERUZBVUxUX1RJTUVPVVRfSU5fTVMgPSAzMCAqIDEwMDA7XG52YXIgREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TID0gMTUgKiAxMDAwO1xuLyoqIERlc2NyaWJlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUge0BsaW5rIEh1YkNvbm5lY3Rpb259IHRvIHRoZSBzZXJ2ZXIuICovXG52YXIgSHViQ29ubmVjdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChIdWJDb25uZWN0aW9uU3RhdGUpIHtcbiAgICAvKiogVGhlIGh1YiBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC4gKi9cbiAgICBIdWJDb25uZWN0aW9uU3RhdGVbXCJEaXNjb25uZWN0ZWRcIl0gPSBcIkRpc2Nvbm5lY3RlZFwiO1xuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgY29ubmVjdGluZy4gKi9cbiAgICBIdWJDb25uZWN0aW9uU3RhdGVbXCJDb25uZWN0aW5nXCJdID0gXCJDb25uZWN0aW5nXCI7XG4gICAgLyoqIFRoZSBodWIgY29ubmVjdGlvbiBpcyBjb25uZWN0ZWQuICovXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGVkXCJdID0gXCJDb25uZWN0ZWRcIjtcbiAgICAvKiogVGhlIGh1YiBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RpbmcuICovXG4gICAgSHViQ29ubmVjdGlvblN0YXRlW1wiRGlzY29ubmVjdGluZ1wiXSA9IFwiRGlzY29ubmVjdGluZ1wiO1xuICAgIC8qKiBUaGUgaHViIGNvbm5lY3Rpb24gaXMgcmVjb25uZWN0aW5nLiAqL1xuICAgIEh1YkNvbm5lY3Rpb25TdGF0ZVtcIlJlY29ubmVjdGluZ1wiXSA9IFwiUmVjb25uZWN0aW5nXCI7XG59KShIdWJDb25uZWN0aW9uU3RhdGUgPSBleHBvcnRzLkh1YkNvbm5lY3Rpb25TdGF0ZSB8fCAoZXhwb3J0cy5IdWJDb25uZWN0aW9uU3RhdGUgPSB7fSkpO1xuLyoqIFJlcHJlc2VudHMgYSBjb25uZWN0aW9uIHRvIGEgU2lnbmFsUiBIdWIuICovXG52YXIgSHViQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdWJDb25uZWN0aW9uKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wsIHJlY29ubmVjdFBvbGljeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKGNvbm5lY3Rpb24sIFwiY29ubmVjdGlvblwiKTtcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZChsb2dnZXIsIFwibG9nZ2VyXCIpO1xuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHByb3RvY29sLCBcInByb3RvY29sXCIpO1xuICAgICAgICB0aGlzLnNlcnZlclRpbWVvdXRJbk1pbGxpc2Vjb25kcyA9IERFRkFVTFRfVElNRU9VVF9JTl9NUztcbiAgICAgICAgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzID0gREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLnJlY29ubmVjdFBvbGljeSA9IHJlY29ubmVjdFBvbGljeTtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VQcm90b2NvbCA9IG5ldyBIYW5kc2hha2VQcm90b2NvbF8xLkhhbmRzaGFrZVByb3RvY29sKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbnJlY2VpdmUgPSBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMucHJvY2Vzc0luY29taW5nRGF0YShkYXRhKTsgfTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIF90aGlzLmNvbm5lY3Rpb25DbG9zZWQoZXJyb3IpOyB9O1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSB7fTtcbiAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RpbmdDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RlZENhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmludm9jYXRpb25JZCA9IDA7XG4gICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWNoZWRQaW5nTWVzc2FnZSA9IHRoaXMucHJvdG9jb2wud3JpdGVNZXNzYWdlKHsgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuUGluZyB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8vIFVzaW5nIGEgcHVibGljIHN0YXRpYyBmYWN0b3J5IG1ldGhvZCBtZWFucyB3ZSBjYW4gaGF2ZSBhIHByaXZhdGUgY29uc3RydWN0b3IgYW5kIGFuIF9pbnRlcm5hbF9cbiAgICAvLyBjcmVhdGUgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgYnkgSHViQ29ubmVjdGlvbkJ1aWxkZXIuIEFuIFwiaW50ZXJuYWxcIiBjb25zdHJ1Y3RvciB3b3VsZCBqdXN0XG4gICAgLy8gYmUgc3RyaXBwZWQgYXdheSBhbmQgdGhlICcuZC50cycgZmlsZSB3b3VsZCBoYXZlIG5vIGNvbnN0cnVjdG9yLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhXG4gICAgLy8gcHVibGljIHBhcmFtZXRlci1sZXNzIGNvbnN0cnVjdG9yLlxuICAgIEh1YkNvbm5lY3Rpb24uY3JlYXRlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wsIHJlY29ubmVjdFBvbGljeSkge1xuICAgICAgICByZXR1cm4gbmV3IEh1YkNvbm5lY3Rpb24oY29ubmVjdGlvbiwgbG9nZ2VyLCBwcm90b2NvbCwgcmVjb25uZWN0UG9saWN5KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIdWJDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgdGhlIHN0YXRlIG9mIHRoZSB7QGxpbmsgSHViQ29ubmVjdGlvbn0gdG8gdGhlIHNlcnZlci4gKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIdWJDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJjb25uZWN0aW9uSWRcIiwge1xuICAgICAgICAvKiogUmVwcmVzZW50cyB0aGUgY29ubmVjdGlvbiBpZCBvZiB0aGUge0BsaW5rIEh1YkNvbm5lY3Rpb259IG9uIHRoZSBzZXJ2ZXIuIFRoZSBjb25uZWN0aW9uIGlkIHdpbGwgYmUgbnVsbCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGVpdGhlclxuICAgICAgICAgKiAgaW4gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZSBvciBpZiB0aGUgbmVnb3RpYXRpb24gc3RlcCB3YXMgc2tpcHBlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbiA/ICh0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkIHx8IG51bGwpIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLCBcImJhc2VVcmxcIiwge1xuICAgICAgICAvKiogSW5kaWNhdGVzIHRoZSB1cmwgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSB0byB0aGUgc2VydmVyLiAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uYmFzZVVybCB8fCBcIlwiO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyBhIG5ldyB1cmwgZm9yIHRoZSBIdWJDb25uZWN0aW9uLiBOb3RlIHRoYXQgdGhlIHVybCBjYW4gb25seSBiZSBjaGFuZ2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgaW4gZWl0aGVyIHRoZSBEaXNjb25uZWN0ZWQgb3JcbiAgICAgICAgICogUmVjb25uZWN0aW5nIHN0YXRlcy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIGNvbm5lY3QgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCAmJiB0aGlzLmNvbm5lY3Rpb25TdGF0ZSAhPT0gSHViQ29ubmVjdGlvblN0YXRlLlJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBIdWJDb25uZWN0aW9uIG11c3QgYmUgaW4gdGhlIERpc2Nvbm5lY3RlZCBvciBSZWNvbm5lY3Rpbmcgc3RhdGUgdG8gY2hhbmdlIHRoZSB1cmwuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgSHViQ29ubmVjdGlvbiB1cmwgbXVzdCBiZSBhIHZhbGlkIHVybC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uYmFzZVVybCA9IHVybDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqIFN0YXJ0cyB0aGUgY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0YXJ0UHJvbWlzZSA9IHRoaXMuc3RhcnRXaXRoU3RhdGVUcmFuc2l0aW9ucygpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFByb21pc2U7XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydFdpdGhTdGF0ZVRyYW5zaXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBzdGFydCBhIEh1YkNvbm5lY3Rpb24gdGhhdCBpcyBub3QgaW4gdGhlICdEaXNjb25uZWN0ZWQnIHN0YXRlLlwiKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU3RhcnRpbmcgSHViQ29ubmVjdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0SW50ZXJuYWwoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdWJDb25uZWN0aW9uIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiSHViQ29ubmVjdGlvbiBmYWlsZWQgdG8gc3RhcnQgc3VjY2Vzc2Z1bGx5IGJlY2F1c2Ugb2YgZXJyb3IgJ1wiICsgZV8xICsgXCInLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChlXzEpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGhhbmRzaGFrZVByb21pc2UsIGhhbmRzaGFrZVJlcXVlc3QsIGVfMjtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BEdXJpbmdTdGFydEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRzaGFrZVJlc29sdmVyID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kc2hha2VSZWplY3RlciA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jb25uZWN0aW9uLnN0YXJ0KHRoaXMucHJvdG9jb2wudHJhbnNmZXJGb3JtYXQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDUsICwgN10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMucHJvdG9jb2wudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlNlbmRpbmcgaGFuZHNoYWtlIHJlcXVlc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZW5kTWVzc2FnZSh0aGlzLmhhbmRzaGFrZVByb3RvY29sLndyaXRlSGFuZHNoYWtlUmVxdWVzdChoYW5kc2hha2VSZXF1ZXN0KSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlVzaW5nIEh1YlByb3RvY29sICdcIiArIHRoaXMucHJvdG9jb2wubmFtZSArIFwiJy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZlbnNpdmVseSBjbGVhbnVwIHRpbWVvdXQgaW4gY2FzZSB3ZSByZWNlaXZlIGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHdlIGZpbmlzaCBzdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFRpbWVvdXRQZXJpb2QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmVJbnRlcnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgaGFuZHNoYWtlUHJvbWlzZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIGNoZWNrIHRoZSBzdG9wRHVyaW5nU3RhcnRFcnJvciBpbnN0ZWFkIG9mIGp1c3QgcmVseWluZyBvbiB0aGUgaGFuZHNoYWtlUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVpbmcgcmVqZWN0ZWQgb24gY2xvc2UsIGJlY2F1c2UgdGhpcyBjb250aW51YXRpb24gY2FuIHJ1biBhZnRlciBib3RoIHRoZSBoYW5kc2hha2UgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHRocm93IGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgcmVqZWN0ZWQgcHJvbWlzZSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGFsbG93IGFueSBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zaXRpb25zIHRvIG9jY3VyIGJldHdlZW4gbm93IGFuZCB0aGUgY2FsbGluZyBjb2RlIG9ic2VydmluZyB0aGUgZXhjZXB0aW9ucy4gUmV0dXJuaW5nIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgY2F1c2UgdGhlIGNhbGxpbmcgY29udGludWF0aW9uIHRvIGdldCBzY2hlZHVsZWQgdG8gcnVuIGxhdGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdWIgaGFuZHNoYWtlIGZhaWxlZCB3aXRoIGVycm9yICdcIiArIGVfMiArIFwiJyBkdXJpbmcgc3RhcnQoKS4gU3RvcHBpbmcgSHViQ29ubmVjdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBQaW5nVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBzaG91bGQgbm90IGNvbXBsZXRlIHVudGlsIGFmdGVyIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdHJhbnNpdGlvbiB0aGUgSHViQ29ubmVjdGlvbiB0byB0aGUgZGlzY29ubmVjdGVkIHN0YXRlIGJlZm9yZSBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgY29tcGxldGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jb25uZWN0aW9uLnN0b3AoZV8yKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHBDb25uZWN0aW9uLnN0b3AoKSBzaG91bGQgbm90IGNvbXBsZXRlIHVudGlsIGFmdGVyIHRoZSBvbmNsb3NlIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdHJhbnNpdGlvbiB0aGUgSHViQ29ubmVjdGlvbiB0byB0aGUgZGlzY29ubmVjdGVkIHN0YXRlIGJlZm9yZSBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgY29tcGxldGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZV8yO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogU3RvcHMgdGhlIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdGVybWluYXRlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydFByb21pc2UsIGVfMztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvbWlzZSA9IHRoaXMuc3RhcnRQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3BQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDQsICwgNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXdhaXRpbmcgdW5kZWZpbmVkIGNvbnRpbnVlcyBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RhcnRQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXdhaXRpbmcgdW5kZWZpbmVkIGNvbnRpbnVlcyBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wSW50ZXJuYWwgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIkNhbGwgdG8gSHViQ29ubmVjdGlvbi5zdG9wKFwiICsgZXJyb3IgKyBcIikgaWdub3JlZCBiZWNhdXNlIGl0IGlzIGFscmVhZHkgaW4gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZS5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGluZykge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDYWxsIHRvIEh0dHBDb25uZWN0aW9uLnN0b3AoXCIgKyBlcnJvciArIFwiKSBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiB0aGUgZGlzY29ubmVjdGluZyBzdGF0ZS5cIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9wUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0aW5nO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLCBcIlN0b3BwaW5nIEh1YkNvbm5lY3Rpb24uXCIpO1xuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3REZWxheUhhbmRsZSkge1xuICAgICAgICAgICAgLy8gV2UncmUgaW4gYSByZWNvbm5lY3QgZGVsYXkgd2hpY2ggbWVhbnMgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiBpcyBjdXJyZW50bHkgYWxyZWFkeSBzdG9wcGVkLlxuICAgICAgICAgICAgLy8gSnVzdCBjbGVhciB0aGUgaGFuZGxlIHRvIHN0b3AgdGhlIHJlY29ubmVjdCBsb29wICh3aGljaCBubyBvbmUgaXMgd2FpdGluZyBvbiB0aGFua2Z1bGx5KSBhbmRcbiAgICAgICAgICAgIC8vIGZpcmUgdGhlIG9uY2xvc2UgY2FsbGJhY2tzLlxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIHN0b3BwZWQgZHVyaW5nIHJlY29ubmVjdCBkZWxheS4gRG9uZSByZWNvbm5lY3RpbmcuXCIpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0RGVsYXlIYW5kbGUpO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheUhhbmRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVDbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XG4gICAgICAgIHRoaXMuc3RvcER1cmluZ1N0YXJ0RXJyb3IgPSBlcnJvciB8fCBuZXcgRXJyb3IoXCJUaGUgY29ubmVjdGlvbiB3YXMgc3RvcHBlZCBiZWZvcmUgdGhlIGh1YiBoYW5kc2hha2UgY291bGQgY29tcGxldGUuXCIpO1xuICAgICAgICAvLyBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgc2hvdWxkIG5vdCBjb21wbGV0ZSB1bnRpbCBhZnRlciBlaXRoZXIgSHR0cENvbm5lY3Rpb24uc3RhcnQoKSBmYWlsc1xuICAgICAgICAvLyBvciB0aGUgb25jbG9zZSBjYWxsYmFjayBpcyBpbnZva2VkLiBUaGUgb25jbG9zZSBjYWxsYmFjayB3aWxsIHRyYW5zaXRpb24gdGhlIEh1YkNvbm5lY3Rpb25cbiAgICAgICAgLy8gdG8gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZSBpZiBuZWVkIGJlIGJlZm9yZSBIdHRwQ29ubmVjdGlvbi5zdG9wKCkgY29tcGxldGVzLlxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnN0b3AoZXJyb3IpO1xuICAgIH07XG4gICAgLyoqIEludm9rZXMgYSBzdHJlYW1pbmcgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHR5cGVwYXJhbSBUIFRoZSB0eXBlIG9mIHRoZSBpdGVtcyByZXR1cm5lZCBieSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXG4gICAgICogQHJldHVybnMge0lTdHJlYW1SZXN1bHQ8VD59IEFuIG9iamVjdCB0aGF0IHlpZWxkcyByZXN1bHRzIGZyb20gdGhlIHNlcnZlciBhcyB0aGV5IGFyZSByZWNlaXZlZC5cbiAgICAgKi9cbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdHJlYW0gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMoYXJncyksIHN0cmVhbXMgPSBfYVswXSwgc3RyZWFtSWRzID0gX2FbMV07XG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlU3RyZWFtSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCBzdHJlYW1JZHMpO1xuICAgICAgICB2YXIgcHJvbWlzZVF1ZXVlO1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICBzdWJqZWN0LmNhbmNlbENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNhbmNlbEludm9jYXRpb24gPSBfdGhpcy5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uKGludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZCk7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZW5kV2l0aFByb3RvY29sKGNhbmNlbEludm9jYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF0gPSBmdW5jdGlvbiAoaW52b2NhdGlvbkV2ZW50LCBlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW52b2NhdGlvbkV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gaW52b2NhdGlvbkV2ZW50IHdpbGwgbm90IGJlIG51bGwgd2hlbiBhbiBlcnJvciBpcyBub3QgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uRXZlbnQudHlwZSA9PT0gSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKG5ldyBFcnJvcihpbnZvY2F0aW9uRXZlbnQuZXJyb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KChpbnZvY2F0aW9uRXZlbnQuaXRlbSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcHJvbWlzZVF1ZXVlID0gdGhpcy5zZW5kV2l0aFByb3RvY29sKGludm9jYXRpb25EZXNjcmlwdG9yKVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGUpO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXVuY2hTdHJlYW1zKHN0cmVhbXMsIHByb21pc2VRdWV1ZSk7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlSW50ZXJ2YWwoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zZW5kKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBqcyBvYmplY3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUganMgb2JqZWN0IHRvIHNlcmlhbGl6ZSBhbmQgc2VuZC5cbiAgICAgKi9cbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kV2l0aFByb3RvY29sID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UodGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UobWVzc2FnZSkpO1xuICAgIH07XG4gICAgLyoqIEludm9rZXMgYSBodWIgbWV0aG9kIG9uIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBhcmd1bWVudHMuIERvZXMgbm90IHdhaXQgZm9yIGEgcmVzcG9uc2UgZnJvbSB0aGUgcmVjZWl2ZXIuXG4gICAgICpcbiAgICAgKiBUaGUgUHJvbWlzZSByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCByZXNvbHZlcyB3aGVuIHRoZSBjbGllbnQgaGFzIHNlbnQgdGhlIGludm9jYXRpb24gdG8gdGhlIHNlcnZlci4gVGhlIHNlcnZlciBtYXkgc3RpbGxcbiAgICAgKiBiZSBwcm9jZXNzaW5nIHRoZSBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZlciBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgaW52b2NhdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc2VudCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMoYXJncyksIHN0cmVhbXMgPSBfYVswXSwgc3RyZWFtSWRzID0gX2FbMV07XG4gICAgICAgIHZhciBzZW5kUHJvbWlzZSA9IHRoaXMuc2VuZFdpdGhQcm90b2NvbCh0aGlzLmNyZWF0ZUludm9jYXRpb24obWV0aG9kTmFtZSwgYXJncywgdHJ1ZSwgc3RyZWFtSWRzKSk7XG4gICAgICAgIHRoaXMubGF1bmNoU3RyZWFtcyhzdHJlYW1zLCBzZW5kUHJvbWlzZSk7XG4gICAgICAgIHJldHVybiBzZW5kUHJvbWlzZTtcbiAgICB9O1xuICAgIC8qKiBJbnZva2VzIGEgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogVGhlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBtZXRob2QgcmVzb2x2ZXMgd2hlbiB0aGUgc2VydmVyIGluZGljYXRlcyBpdCBoYXMgZmluaXNoZWQgaW52b2tpbmcgdGhlIG1ldGhvZC4gV2hlbiB0aGUgcHJvbWlzZVxuICAgICAqIHJlc29sdmVzLCB0aGUgc2VydmVyIGhhcyBmaW5pc2hlZCBpbnZva2luZyB0aGUgbWV0aG9kLiBJZiB0aGUgc2VydmVyIG1ldGhvZCByZXR1cm5zIGEgcmVzdWx0LCBpdCBpcyBwcm9kdWNlZCBhcyB0aGUgcmVzdWx0IG9mXG4gICAgICogcmVzb2x2aW5nIHRoZSBQcm9taXNlLlxuICAgICAqXG4gICAgICogQHR5cGVwYXJhbSBUIFRoZSBleHBlY3RlZCByZXR1cm4gdHlwZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHthbnlbXX0gYXJncyBUaGUgYXJndW1lbnRzIHVzZWQgdG8gaW52b2tlIHRoZSBzZXJ2ZXIgbWV0aG9kLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHNlcnZlciBtZXRob2QgKGlmIGFueSksIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLnJlcGxhY2VTdHJlYW1pbmdQYXJhbXMoYXJncyksIHN0cmVhbXMgPSBfYVswXSwgc3RyZWFtSWRzID0gX2FbMV07XG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCBmYWxzZSwgc3RyZWFtSWRzKTtcbiAgICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAvLyBpbnZvY2F0aW9uSWQgd2lsbCBhbHdheXMgaGF2ZSBhIHZhbHVlIGZvciBhIG5vbi1ibG9ja2luZyBpbnZvY2F0aW9uXG4gICAgICAgICAgICBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW52b2NhdGlvbkV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGludm9jYXRpb25FdmVudCB3aWxsIG5vdCBiZSBudWxsIHdoZW4gYW4gZXJyb3IgaXMgbm90IHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC50eXBlID09PSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihpbnZvY2F0aW9uRXZlbnQuZXJyb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW52b2NhdGlvbkV2ZW50LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBtZXNzYWdlIHR5cGU6IFwiICsgaW52b2NhdGlvbkV2ZW50LnR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcHJvbWlzZVF1ZXVlID0gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChpbnZvY2F0aW9uRGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgLy8gaW52b2NhdGlvbklkIHdpbGwgYWx3YXlzIGhhdmUgYSB2YWx1ZSBmb3IgYSBub24tYmxvY2tpbmcgaW52b2NhdGlvblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMubGF1bmNoU3RyZWFtcyhzdHJlYW1zLCBwcm9taXNlUXVldWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfTtcbiAgICAvKiogUmVnaXN0ZXJzIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBodWIgbWV0aG9kIHdpdGggdGhlIHNwZWNpZmllZCBtZXRob2QgbmFtZSBpcyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGh1YiBtZXRob2QgdG8gZGVmaW5lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG5ld01ldGhvZCBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgcmFpc2VkIHdoZW4gdGhlIGh1YiBtZXRob2QgaXMgaW52b2tlZC5cbiAgICAgKi9cbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBuZXdNZXRob2QpIHtcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lIHx8ICFuZXdNZXRob2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMubWV0aG9kc1ttZXRob2ROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudGluZyBhZGRpbmcgdGhlIHNhbWUgaGFuZGxlciBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAgaWYgKHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXS5pbmRleE9mKG5ld01ldGhvZCkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdLnB1c2gobmV3TWV0aG9kKTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBtZXRob2QpIHtcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdO1xuICAgICAgICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgICAgdmFyIHJlbW92ZUlkeCA9IGhhbmRsZXJzLmluZGV4T2YobWV0aG9kKTtcbiAgICAgICAgICAgIGlmIChyZW1vdmVJZHggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKHJlbW92ZUlkeCwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuIE9wdGlvbmFsbHkgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgKGlmIGFueSkuXG4gICAgICovXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogUmVnaXN0ZXJzIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN0YXJ0cyByZWNvbm5lY3RpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN0YXJ0cyByZWNvbm5lY3RpbmcuIE9wdGlvbmFsbHkgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGNvbm5lY3Rpb24gdG8gc3RhcnQgcmVjb25uZWN0aW5nIChpZiBhbnkpLlxuICAgICAqL1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9ucmVjb25uZWN0aW5nID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bGx5IHJlY29ubmVjdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgaGFuZGxlciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWxseSByZWNvbm5lY3RzLlxuICAgICAqL1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9ucmVjb25uZWN0ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzSW5jb21pbmdEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xuICAgICAgICBpZiAoIXRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSkge1xuICAgICAgICAgICAgZGF0YSA9IHRoaXMucHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEhhbmRzaGFrZVJlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEYXRhIG1heSBoYXZlIGFsbCBiZWVuIHJlYWQgd2hlbiBwcm9jZXNzaW5nIGhhbmRzaGFrZSByZXNwb25zZVxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIG1lc3NhZ2VzXG4gICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLnByb3RvY29sLnBhcnNlTWVzc2FnZXMoZGF0YSwgdGhpcy5sb2dnZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZXNzYWdlc18xID0gbWVzc2FnZXM7IF9pIDwgbWVzc2FnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuSW52b2NhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52b2tlQ2xpZW50TWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuU3RyZWFtSXRlbTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5Db21wbGV0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja3NbbWVzc2FnZS5pbnZvY2F0aW9uSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYWxsYmFja3NbbWVzc2FnZS5pbnZvY2F0aW9uSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlBpbmc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBjYXJlIGFib3V0IHBpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5DbG9zZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiQ2xvc2UgbWVzc2FnZSByZWNlaXZlZCBmcm9tIHNlcnZlci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBtZXNzYWdlLmVycm9yID8gbmV3IEVycm9yKFwiU2VydmVyIHJldHVybmVkIGFuIGVycm9yIG9uIGNsb3NlOiBcIiArIG1lc3NhZ2UuZXJyb3IpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYWxsb3dSZWNvbm5lY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCBmZWVscyB3cm9uZyBub3QgdG8gYXdhaXQgY29ubmVjdGlvbi5zdG9wKCkgaGVyZSwgYnV0IHByb2Nlc3NJbmNvbWluZ0RhdGEgaXMgY2FsbGVkIGFzIHBhcnQgb2YgYW4gb25yZWNlaXZlIGNhbGxiYWNrIHdoaWNoIGlzIG5vdCBhc3luYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFscmVhZHkgdGhlIGJlaGF2aW9yIGZvciBzZXJ2ZXJUaW1lb3V0KCksIGFuZCBIdHRwQ29ubmVjdGlvbi5TdG9wKCkgc2hvdWxkIGNhdGNoIGFuZCBsb2cgYWxsIHBvc3NpYmxlIGV4Y2VwdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2Fubm90IGF3YWl0IHN0b3BJbnRlcm5hbCgpIGhlcmUsIGJ1dCBzdWJzZXF1ZW50IGNhbGxzIHRvIHN0b3AoKSB3aWxsIGF3YWl0IHRoaXMgaWYgc3RvcEludGVybmFsKCkgaXMgc3RpbGwgb25nb2luZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BQcm9taXNlID0gdGhpcy5zdG9wSW50ZXJuYWwoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiSW52YWxpZCBtZXNzYWdlIHR5cGU6IFwiICsgbWVzc2FnZS50eXBlICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzZXRUaW1lb3V0UGVyaW9kKCk7XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciByZXNwb25zZU1lc3NhZ2U7XG4gICAgICAgIHZhciByZW1haW5pbmdEYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgX2EgPSB0aGlzLmhhbmRzaGFrZVByb3RvY29sLnBhcnNlSGFuZHNoYWtlUmVzcG9uc2UoZGF0YSksIHJlbWFpbmluZ0RhdGEgPSBfYVswXSwgcmVzcG9uc2VNZXNzYWdlID0gX2FbMV07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJFcnJvciBwYXJzaW5nIGhhbmRzaGFrZSByZXNwb25zZTogXCIgKyBlO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgbWVzc2FnZSk7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UuZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJTZXJ2ZXIgcmV0dXJuZWQgaGFuZHNoYWtlIGVycm9yOiBcIiArIHJlc3BvbnNlTWVzc2FnZS5lcnJvcjtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5oYW5kc2hha2VSZWplY3RlcihlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiU2VydmVyIGhhbmRzaGFrZSBjb21wbGV0ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kc2hha2VSZXNvbHZlcigpO1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nRGF0YTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnJlc2V0S2VlcEFsaXZlSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb24uZmVhdHVyZXMuaW5oZXJlbnRLZWVwQWxpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFudXBQaW5nVGltZXIoKTtcbiAgICAgICAgdGhpcy5waW5nU2VydmVySGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gSHViQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZW5kTWVzc2FnZSh0aGlzLmNhY2hlZFBpbmdNZXNzYWdlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIGVycm9yLiBJdCBzaG91bGQgYmUgc2VlbiBlbHNld2hlcmUgaW4gdGhlIGNsaWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIGlzIHByb2JhYmx5IGluIGEgYmFkIG9yIGNsb3NlZCBzdGF0ZSBub3csIGNsZWFudXAgdGhlIHRpbWVyIHNvIGl0IHN0b3BzIHRyaWdnZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfSwgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzKTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnJlc2V0VGltZW91dFBlcmlvZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3Rpb24uZmVhdHVyZXMgfHwgIXRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcy5pbmhlcmVudEtlZXBBbGl2ZSkge1xuICAgICAgICAgICAgLy8gU2V0IHRoZSB0aW1lb3V0IHRpbWVyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlcnZlclRpbWVvdXQoKTsgfSwgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXJ2ZXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgc2VydmVyIGhhc24ndCB0YWxrZWQgdG8gdXMgaW4gYSB3aGlsZS4gSXQgZG9lc24ndCBsaWtlIHVzIGFueW1vcmUgLi4uIDooXG4gICAgICAgIC8vIFRlcm1pbmF0ZSB0aGUgY29ubmVjdGlvbiwgYnV0IHdlIGRvbid0IG5lZWQgdG8gd2FpdCBvbiB0aGUgcHJvbWlzZS4gVGhpcyBjb3VsZCB0cmlnZ2VyIHJlY29ubmVjdGluZy5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5zdG9wKG5ldyBFcnJvcihcIlNlcnZlciB0aW1lb3V0IGVsYXBzZWQgd2l0aG91dCByZWNlaXZpbmcgYSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlci5cIikpO1xuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlQ2xpZW50TWV0aG9kID0gZnVuY3Rpb24gKGludm9jYXRpb25NZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtZXRob2RzID0gdGhpcy5tZXRob2RzW2ludm9jYXRpb25NZXNzYWdlLnRhcmdldC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgaWYgKG1ldGhvZHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmFwcGx5KF90aGlzLCBpbnZvY2F0aW9uTWVzc2FnZS5hcmd1bWVudHMpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBIGNhbGxiYWNrIGZvciB0aGUgbWV0aG9kIFwiICsgaW52b2NhdGlvbk1lc3NhZ2UudGFyZ2V0LnRvTG93ZXJDYXNlKCkgKyBcIiB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uTWVzc2FnZS5pbnZvY2F0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdjEuIFNvIHdlIHJldHVybiBhbiBlcnJvciB0byBhdm9pZCBibG9ja2luZyB0aGUgc2VydmVyIHdhaXRpbmcgZm9yIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiU2VydmVyIHJlcXVlc3RlZCBhIHJlc3BvbnNlLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgY2xpZW50LlwiO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gd2FpdCBvbiB0aGUgc3RvcCBpdHNlbGYuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wUHJvbWlzZSA9IHRoaXMuc3RvcEludGVybmFsKG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiTm8gY2xpZW50IG1ldGhvZCB3aXRoIHRoZSBuYW1lICdcIiArIGludm9jYXRpb25NZXNzYWdlLnRhcmdldCArIFwiJyBmb3VuZC5cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNvbm5lY3Rpb25DbG9zZWQgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJIdWJDb25uZWN0aW9uLmNvbm5lY3Rpb25DbG9zZWQoXCIgKyBlcnJvciArIFwiKSBjYWxsZWQgd2hpbGUgaW4gc3RhdGUgXCIgKyB0aGlzLmNvbm5lY3Rpb25TdGF0ZSArIFwiLlwiKTtcbiAgICAgICAgLy8gVHJpZ2dlcmluZyB0aGlzLmhhbmRzaGFrZVJlamVjdGVyIGlzIGluc3VmZmljaWVudCBiZWNhdXNlIGl0IGNvdWxkIGFscmVhZHkgYmUgcmVzb2x2ZWQgd2l0aG91dCB0aGUgY29udGludWF0aW9uIGhhdmluZyBydW4geWV0LlxuICAgICAgICB0aGlzLnN0b3BEdXJpbmdTdGFydEVycm9yID0gdGhpcy5zdG9wRHVyaW5nU3RhcnRFcnJvciB8fCBlcnJvciB8fCBuZXcgRXJyb3IoXCJUaGUgdW5kZXJseWluZyBjb25uZWN0aW9uIHdhcyBjbG9zZWQgYmVmb3JlIHRoZSBodWIgaGFuZHNoYWtlIGNvdWxkIGNvbXBsZXRlLlwiKTtcbiAgICAgICAgLy8gSWYgdGhlIGhhbmRzaGFrZSBpcyBpbiBwcm9ncmVzcywgc3RhcnQgd2lsbCBiZSB3YWl0aW5nIGZvciB0aGUgaGFuZHNoYWtlIHByb21pc2UsIHNvIHdlIGNvbXBsZXRlIGl0LlxuICAgICAgICAvLyBJZiBpdCBoYXMgYWxyZWFkeSBjb21wbGV0ZWQsIHRoaXMgc2hvdWxkIGp1c3Qgbm9vcC5cbiAgICAgICAgaWYgKHRoaXMuaGFuZHNoYWtlUmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZHNoYWtlUmVzb2x2ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbENhbGxiYWNrc1dpdGhFcnJvcihlcnJvciB8fCBuZXcgRXJyb3IoXCJJbnZvY2F0aW9uIGNhbmNlbGVkIGR1ZSB0byB0aGUgdW5kZXJseWluZyBjb25uZWN0aW9uIGJlaW5nIGNsb3NlZC5cIikpO1xuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgPT09IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlQ2xvc2UoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkICYmIHRoaXMucmVjb25uZWN0UG9saWN5KSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gSHViQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBub25lIG9mIHRoZSBhYm92ZSBpZiBjb25kaXRpb25zIHdlcmUgdHJ1ZSB3ZXJlIGNhbGxlZCB0aGUgSHViQ29ubmVjdGlvbiBtdXN0IGJlIGluIGVpdGhlcjpcbiAgICAgICAgLy8gMS4gVGhlIENvbm5lY3Rpbmcgc3RhdGUgaW4gd2hpY2ggY2FzZSB0aGUgaGFuZHNoYWtlUmVzb2x2ZXIgd2lsbCBjb21wbGV0ZSBpdCBhbmQgc3RvcER1cmluZ1N0YXJ0RXJyb3Igd2lsbCBmYWlsIGl0LlxuICAgICAgICAvLyAyLiBUaGUgUmVjb25uZWN0aW5nIHN0YXRlIGluIHdoaWNoIGNhc2UgdGhlIGhhbmRzaGFrZVJlc29sdmVyIHdpbGwgY29tcGxldGUgaXQgYW5kIHN0b3BEdXJpbmdTdGFydEVycm9yIHdpbGwgZmFpbCB0aGUgY3VycmVudCByZWNvbm5lY3QgYXR0ZW1wdFxuICAgICAgICAvLyAgICBhbmQgcG90ZW50aWFsbHkgY29udGludWUgdGhlIHJlY29ubmVjdCgpIGxvb3AuXG4gICAgICAgIC8vIDMuIFRoZSBEaXNjb25uZWN0ZWQgc3RhdGUgaW4gd2hpY2ggY2FzZSB3ZSdyZSBhbHJlYWR5IGRvbmUuXG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jb21wbGV0ZUNsb3NlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VkQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXBwbHkoX3RoaXMsIFtlcnJvcl0pOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBbiBvbmNsb3NlIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGVycm9yICdcIiArIGVycm9yICsgXCInIHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlY29ubmVjdFN0YXJ0VGltZSwgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cywgcmV0cnlFcnJvciwgbmV4dFJldHJ5RGVsYXksIGVfNDtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3RTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUVycm9yID0gZXJyb3IgIT09IHVuZGVmaW5lZCA/IGVycm9yIDogbmV3IEVycm9yKFwiQXR0ZW1wdGluZyB0byByZWNvbm5lY3QgZHVlIHRvIGEgdW5rbm93biBlcnJvci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0UmV0cnlEZWxheSA9IHRoaXMuZ2V0TmV4dFJldHJ5RGVsYXkocHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cysrLCAwLCByZXRyeUVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UmV0cnlEZWxheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBub3QgcmVjb25uZWN0aW5nIGJlY2F1c2UgdGhlIElSZXRyeVBvbGljeSByZXR1cm5lZCBudWxsIG9uIHRoZSBmaXJzdCByZWNvbm5lY3QgYXR0ZW1wdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUNsb3NlKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5SZWNvbm5lY3Rpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNvbm5lY3Rpb24gcmVjb25uZWN0aW5nIGJlY2F1c2Ugb2YgZXJyb3IgJ1wiICsgZXJyb3IgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJDb25uZWN0aW9uIHJlY29ubmVjdGluZy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbnJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW5nQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXBwbHkoX3RoaXMsIFtlcnJvcl0pOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBbiBvbnJlY29ubmVjdGluZyBjYWxsYmFjayBjYWxsZWQgd2l0aCBlcnJvciAnXCIgKyBlcnJvciArIFwiJyB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBpZiBhbiBvbnJlY29ubmVjdGluZyBjYWxsYmFjayBjYWxsZWQgY29ubmVjdGlvbi5zdG9wKCkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiBsZWZ0IHRoZSByZWNvbm5lY3Rpbmcgc3RhdGUgaW4gb25yZWNvbm5lY3RpbmcgY2FsbGJhY2suIERvbmUgcmVjb25uZWN0aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobmV4dFJldHJ5RGVsYXkgIT09IG51bGwpKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiUmVjb25uZWN0IGF0dGVtcHQgbnVtYmVyIFwiICsgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cyArIFwiIHdpbGwgc3RhcnQgaW4gXCIgKyBuZXh0UmV0cnlEZWxheSArIFwiIG1zLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlID0gc2V0VGltZW91dChyZXNvbHZlLCBuZXh0UmV0cnlEZWxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5SGFuZGxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIGxlZnQgdGhlIHJlY29ubmVjdGluZyBzdGF0ZSBkdXJpbmcgcmVjb25uZWN0IGRlbGF5LiBEb25lIHJlY29ubmVjdGluZy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzMsIDUsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdGFydEludGVybmFsKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkh1YkNvbm5lY3Rpb24gcmVjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ucmVjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdGVkQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXBwbHkoX3RoaXMsIFtfdGhpcy5jb25uZWN0aW9uLmNvbm5lY3Rpb25JZF0pOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCJBbiBvbnJlY29ubmVjdGVkIGNhbGxiYWNrIGNhbGxlZCB3aXRoIGNvbm5lY3Rpb25JZCAnXCIgKyB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkICsgXCI7IHRocmV3IGVycm9yICdcIiArIGUgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgZV80ID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJSZWNvbm5lY3QgYXR0ZW1wdCBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvciAnXCIgKyBlXzQgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSBIdWJDb25uZWN0aW9uU3RhdGUuUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5EZWJ1ZywgXCJDb25uZWN0aW9uIGxlZnQgdGhlIHJlY29ubmVjdGluZyBzdGF0ZSBkdXJpbmcgcmVjb25uZWN0IGF0dGVtcHQuIERvbmUgcmVjb25uZWN0aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUVycm9yID0gZV80IGluc3RhbmNlb2YgRXJyb3IgPyBlXzQgOiBuZXcgRXJyb3IoZV80LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJldHJ5RGVsYXkgPSB0aGlzLmdldE5leHRSZXRyeURlbGF5KHByZXZpb3VzUmVjb25uZWN0QXR0ZW1wdHMrKywgRGF0ZS5ub3coKSAtIHJlY29ubmVjdFN0YXJ0VGltZSwgcmV0cnlFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJSZWNvbm5lY3QgcmV0cmllcyBoYXZlIGJlZW4gZXhoYXVzdGVkIGFmdGVyIFwiICsgKERhdGUubm93KCkgLSByZWNvbm5lY3RTdGFydFRpbWUpICsgXCIgbXMgYW5kIFwiICsgcHJldmlvdXNSZWNvbm5lY3RBdHRlbXB0cyArIFwiIGZhaWxlZCBhdHRlbXB0cy4gQ29ubmVjdGlvbiBkaXNjb25uZWN0aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVDbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmdldE5leHRSZXRyeURlbGF5ID0gZnVuY3Rpb24gKHByZXZpb3VzUmV0cnlDb3VudCwgZWxhcHNlZE1pbGxpc2Vjb25kcywgcmV0cnlSZWFzb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY29ubmVjdFBvbGljeS5uZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzKHtcbiAgICAgICAgICAgICAgICBlbGFwc2VkTWlsbGlzZWNvbmRzOiBlbGFwc2VkTWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzUmV0cnlDb3VudDogcHJldmlvdXNSZXRyeUNvdW50LFxuICAgICAgICAgICAgICAgIHJldHJ5UmVhc29uOiByZXRyeVJlYXNvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIklSZXRyeVBvbGljeS5uZXh0UmV0cnlEZWxheUluTWlsbGlzZWNvbmRzKFwiICsgcHJldmlvdXNSZXRyeUNvdW50ICsgXCIsIFwiICsgZWxhcHNlZE1pbGxpc2Vjb25kcyArIFwiKSB0aHJldyBlcnJvciAnXCIgKyBlICsgXCInLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jYW5jZWxDYWxsYmFja3NXaXRoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhjYWxsYmFja3MpXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3Nba2V5XTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jbGVhbnVwUGluZ1RpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5waW5nU2VydmVySGFuZGxlKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nU2VydmVySGFuZGxlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xlYW51cFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRIYW5kbGUpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRIYW5kbGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVJbnZvY2F0aW9uID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGFyZ3MsIG5vbmJsb2NraW5nLCBzdHJlYW1JZHMpIHtcbiAgICAgICAgaWYgKG5vbmJsb2NraW5nKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtSWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWRzOiBzdHJlYW1JZHMsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuSW52b2NhdGlvbixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb24sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnZvY2F0aW9uSWQgPSB0aGlzLmludm9jYXRpb25JZDtcbiAgICAgICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XG4gICAgICAgICAgICBpZiAoc3RyZWFtSWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpbnZvY2F0aW9uSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWRzOiBzdHJlYW1JZHMsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuSW52b2NhdGlvbixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgICAgICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGludm9jYXRpb25JZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkludm9jYXRpb24sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUubGF1bmNoU3RyZWFtcyA9IGZ1bmN0aW9uIChzdHJlYW1zLCBwcm9taXNlUXVldWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHN0cmVhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3luY2hyb25pemUgc3RyZWFtIGRhdGEgc28gdGhleSBhcnJpdmUgaW4tb3JkZXIgb24gdGhlIHNlcnZlclxuICAgICAgICBpZiAoIXByb21pc2VRdWV1ZSkge1xuICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc3RyZWFtSWQpIHtcbiAgICAgICAgICAgIHN0cmVhbXNbc3RyZWFtSWRdLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChfdGhpcy5jcmVhdGVDb21wbGV0aW9uTWVzc2FnZShzdHJlYW1JZCkpOyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnIgJiYgZXJyLnRvU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZXJyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJVbmtub3duIGVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VuZFdpdGhQcm90b2NvbChfdGhpcy5jcmVhdGVDb21wbGV0aW9uTWVzc2FnZShzdHJlYW1JZCwgbWVzc2FnZSkpOyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VRdWV1ZSA9IHByb21pc2VRdWV1ZS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbmRXaXRoUHJvdG9jb2woX3RoaXMuY3JlYXRlU3RyZWFtSXRlbU1lc3NhZ2Uoc3RyZWFtSWQsIGl0ZW0pKTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBXZSB3YW50IHRvIGl0ZXJhdGUgb3ZlciB0aGUga2V5cywgc2luY2UgdGhlIGtleXMgYXJlIHRoZSBzdHJlYW0gaWRzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgICAgICBmb3IgKHZhciBzdHJlYW1JZCBpbiBzdHJlYW1zKSB7XG4gICAgICAgICAgICBfbG9vcF8xKHN0cmVhbUlkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucmVwbGFjZVN0cmVhbWluZ1BhcmFtcyA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBzdHJlYW1zID0gW107XG4gICAgICAgIHZhciBzdHJlYW1JZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYXJndW1lbnQgPSBhcmdzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPYnNlcnZhYmxlKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgIHZhciBzdHJlYW1JZCA9IHRoaXMuaW52b2NhdGlvbklkO1xuICAgICAgICAgICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHN0cmVhbSBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAgICAgICAgc3RyZWFtc1tzdHJlYW1JZF0gPSBhcmd1bWVudDtcbiAgICAgICAgICAgICAgICBzdHJlYW1JZHMucHVzaChzdHJlYW1JZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgc3RyZWFtIGZyb20gYXJnc1xuICAgICAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbc3RyZWFtcywgc3RyZWFtSWRzXTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmlzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgLy8gVGhpcyBhbGxvd3Mgb3RoZXIgc3RyZWFtIGltcGxlbWVudGF0aW9ucyB0byBqdXN0IHdvcmsgKGxpa2UgcnhqcylcbiAgICAgICAgcmV0dXJuIGFyZyAmJiBhcmcuc3Vic2NyaWJlICYmIHR5cGVvZiBhcmcuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVTdHJlYW1JbnZvY2F0aW9uID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGFyZ3MsIHN0cmVhbUlkcykge1xuICAgICAgICB2YXIgaW52b2NhdGlvbklkID0gdGhpcy5pbnZvY2F0aW9uSWQ7XG4gICAgICAgIHRoaXMuaW52b2NhdGlvbklkKys7XG4gICAgICAgIGlmIChzdHJlYW1JZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGludm9jYXRpb25JZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHN0cmVhbUlkczogc3RyZWFtSWRzLFxuICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5TdHJlYW1JbnZvY2F0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaW52b2NhdGlvbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxuICAgICAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUludm9jYXRpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxuICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ2FuY2VsSW52b2NhdGlvbixcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbUl0ZW1NZXNzYWdlID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLFxuICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLlN0cmVhbUl0ZW0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVDb21wbGV0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChpZCwgZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQsXG4gICAgICAgICAgICAgICAgdHlwZTogSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuQ29tcGxldGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgIHR5cGU6IElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb24sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gSHViQ29ubmVjdGlvbjtcbn0oKSk7XG5leHBvcnRzLkh1YkNvbm5lY3Rpb24gPSBIdWJDb25uZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHViQ29ubmVjdGlvbi5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxIdWJDb25uZWN0aW9uLmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIERlZmF1bHRSZWNvbm5lY3RQb2xpY3lfMSA9IHJlcXVpcmUoXCIuL0RlZmF1bHRSZWNvbm5lY3RQb2xpY3lcIik7XG52YXIgSHR0cENvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h0dHBDb25uZWN0aW9uXCIpO1xudmFyIEh1YkNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h1YkNvbm5lY3Rpb25cIik7XG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcbnZhciBKc29uSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0pzb25IdWJQcm90b2NvbFwiKTtcbnZhciBMb2dnZXJzXzEgPSByZXF1aXJlKFwiLi9Mb2dnZXJzXCIpO1xudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xudmFyIExvZ0xldmVsTmFtZU1hcHBpbmcgPSB7XG4gICAgdHJhY2U6IElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSxcbiAgICBkZWJ1ZzogSUxvZ2dlcl8xLkxvZ0xldmVsLkRlYnVnLFxuICAgIGluZm86IElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbixcbiAgICBpbmZvcm1hdGlvbjogSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLFxuICAgIHdhcm46IElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLFxuICAgIHdhcm5pbmc6IElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLFxuICAgIGVycm9yOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuRXJyb3IsXG4gICAgY3JpdGljYWw6IElMb2dnZXJfMS5Mb2dMZXZlbC5Dcml0aWNhbCxcbiAgICBub25lOiBJTG9nZ2VyXzEuTG9nTGV2ZWwuTm9uZSxcbn07XG5mdW5jdGlvbiBwYXJzZUxvZ0xldmVsKG5hbWUpIHtcbiAgICAvLyBDYXNlLWluc2Vuc2l0aXZlIG1hdGNoaW5nIHZpYSBsb3dlci1jYXNpbmdcbiAgICAvLyBZZXMsIEkga25vdyBjYXNlLWZvbGRpbmcgaXMgYSBjb21wbGljYXRlZCBwcm9ibGVtIGluIFVuaWNvZGUsIGJ1dCB3ZSBvbmx5IHN1cHBvcnRcbiAgICAvLyB0aGUgQVNDSUkgc3RyaW5ncyBkZWZpbmVkIGluIExvZ0xldmVsTmFtZU1hcHBpbmcgYW55d2F5LCBzbyBpdCdzIGZpbmUgLWFudXJzZS5cbiAgICB2YXIgbWFwcGluZyA9IExvZ0xldmVsTmFtZU1hcHBpbmdbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICBpZiAodHlwZW9mIG1hcHBpbmcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIG1hcHBpbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGxvZyBsZXZlbDogXCIgKyBuYW1lKTtcbiAgICB9XG59XG4vKiogQSBidWlsZGVyIGZvciBjb25maWd1cmluZyB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IGluc3RhbmNlcy4gKi9cbnZhciBIdWJDb25uZWN0aW9uQnVpbGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdWJDb25uZWN0aW9uQnVpbGRlcigpIHtcbiAgICB9XG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLmNvbmZpZ3VyZUxvZ2dpbmcgPSBmdW5jdGlvbiAobG9nZ2luZykge1xuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKGxvZ2dpbmcsIFwibG9nZ2luZ1wiKTtcbiAgICAgICAgaWYgKGlzTG9nZ2VyKGxvZ2dpbmcpKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvZ2dpbmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBsb2dMZXZlbCA9IHBhcnNlTG9nTGV2ZWwobG9nZ2luZyk7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IG5ldyBVdGlsc18xLkNvbnNvbGVMb2dnZXIobG9nTGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgVXRpbHNfMS5Db25zb2xlTG9nZ2VyKGxvZ2dpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLndpdGhVcmwgPSBmdW5jdGlvbiAodXJsLCB0cmFuc3BvcnRUeXBlT3JPcHRpb25zKSB7XG4gICAgICAgIFV0aWxzXzEuQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcbiAgICAgICAgVXRpbHNfMS5BcmcuaXNOb3RFbXB0eSh1cmwsIFwidXJsXCIpO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgLy8gRmxvdy10eXBpbmcga25vd3Mgd2hlcmUgaXQncyBhdC4gU2luY2UgSHR0cFRyYW5zcG9ydFR5cGUgaXMgYSBudW1iZXIgYW5kIElIdHRwQ29ubmVjdGlvbk9wdGlvbnMgaXMgZ3VhcmFudGVlZFxuICAgICAgICAvLyB0byBiZSBhbiBvYmplY3QsIHdlIGtub3cgKGFzIGRvZXMgVHlwZVNjcmlwdCkgdGhpcyBjb21wYXJpc29uIGlzIGFsbCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hpY2ggb3ZlcmxvYWQgd2FzIGNhbGxlZC5cbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc3BvcnRUeXBlT3JPcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucywgdHJhbnNwb3J0VHlwZU9yT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucywgeyB0cmFuc3BvcnQ6IHRyYW5zcG9ydFR5cGVPck9wdGlvbnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKiogQ29uZmlndXJlcyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJDb25uZWN0aW9ufSB0byB1c2UgdGhlIHNwZWNpZmllZCBIdWIgUHJvdG9jb2wuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0lIdWJQcm90b2NvbH0gcHJvdG9jb2wgVGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSUh1YlByb3RvY29sfSBpbXBsZW1lbnRhdGlvbiB0byB1c2UuXG4gICAgICovXG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLndpdGhIdWJQcm90b2NvbCA9IGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHByb3RvY29sLCBcInByb3RvY29sXCIpO1xuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSHViQ29ubmVjdGlvbkJ1aWxkZXIucHJvdG90eXBlLndpdGhBdXRvbWF0aWNSZWNvbm5lY3QgPSBmdW5jdGlvbiAocmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSkge1xuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3RQb2xpY3kpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgcmVjb25uZWN0UG9saWN5IGhhcyBhbHJlYWR5IGJlZW4gc2V0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3kpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0UG9saWN5ID0gbmV3IERlZmF1bHRSZWNvbm5lY3RQb2xpY3lfMS5EZWZhdWx0UmVjb25uZWN0UG9saWN5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRyeURlbGF5c09yUmVjb25uZWN0UG9saWN5KSkge1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RQb2xpY3kgPSBuZXcgRGVmYXVsdFJlY29ubmVjdFBvbGljeV8xLkRlZmF1bHRSZWNvbm5lY3RQb2xpY3kocmV0cnlEZWxheXNPclJlY29ubmVjdFBvbGljeSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFBvbGljeSA9IHJldHJ5RGVsYXlzT3JSZWNvbm5lY3RQb2xpY3k7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKiogQ3JlYXRlcyBhIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuSHViQ29ubmVjdGlvbn0gZnJvbSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHNwZWNpZmllZCBpbiB0aGlzIGJ1aWxkZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHViQ29ubmVjdGlvbn0gVGhlIGNvbmZpZ3VyZWQge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJDb25uZWN0aW9ufS5cbiAgICAgKi9cbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIGh0dHBDb25uZWN0aW9uT3B0aW9ucyBoYXMgYSBsb2dnZXIsIHVzZSBpdC4gT3RoZXJ3aXNlLCBvdmVycmlkZSBpdCB3aXRoIHRoZSBvbmVcbiAgICAgICAgLy8gcHJvdmlkZWQgdG8gY29uZmlndXJlTG9nZ2VyXG4gICAgICAgIHZhciBodHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gSWYgaXQncyAnbnVsbCcsIHRoZSB1c2VyICoqZXhwbGljaXRseSoqIGFza2VkIGZvciBudWxsLCBkb24ndCBtZXNzIHdpdGggaXQuXG4gICAgICAgIGlmIChodHRwQ29ubmVjdGlvbk9wdGlvbnMubG9nZ2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIElmIG91ciBsb2dnZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwsIHRoYXQncyBPSywgdGhlIEh0dHBDb25uZWN0aW9uIGNvbnN0cnVjdG9yIHdpbGwgaGFuZGxlIGl0LlxuICAgICAgICAgICAgaHR0cENvbm5lY3Rpb25PcHRpb25zLmxvZ2dlciA9IHRoaXMubG9nZ2VyO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdyBjcmVhdGUgdGhlIGNvbm5lY3Rpb25cbiAgICAgICAgaWYgKCF0aGlzLnVybCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdIdWJDb25uZWN0aW9uQnVpbGRlci53aXRoVXJsJyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGJ1aWxkaW5nIHRoZSBjb25uZWN0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG5ldyBIdHRwQ29ubmVjdGlvbl8xLkh0dHBDb25uZWN0aW9uKHRoaXMudXJsLCBodHRwQ29ubmVjdGlvbk9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gSHViQ29ubmVjdGlvbl8xLkh1YkNvbm5lY3Rpb24uY3JlYXRlKGNvbm5lY3Rpb24sIHRoaXMubG9nZ2VyIHx8IExvZ2dlcnNfMS5OdWxsTG9nZ2VyLmluc3RhbmNlLCB0aGlzLnByb3RvY29sIHx8IG5ldyBKc29uSHViUHJvdG9jb2xfMS5Kc29uSHViUHJvdG9jb2woKSwgdGhpcy5yZWNvbm5lY3RQb2xpY3kpO1xuICAgIH07XG4gICAgcmV0dXJuIEh1YkNvbm5lY3Rpb25CdWlsZGVyO1xufSgpKTtcbmV4cG9ydHMuSHViQ29ubmVjdGlvbkJ1aWxkZXIgPSBIdWJDb25uZWN0aW9uQnVpbGRlcjtcbmZ1bmN0aW9uIGlzTG9nZ2VyKGxvZ2dlcikge1xuICAgIHJldHVybiBsb2dnZXIubG9nICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdWJDb25uZWN0aW9uQnVpbGRlci5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxIdWJDb25uZWN0aW9uQnVpbGRlci5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogRGVmaW5lcyB0aGUgdHlwZSBvZiBhIEh1YiBNZXNzYWdlLiAqL1xudmFyIE1lc3NhZ2VUeXBlO1xuKGZ1bmN0aW9uIChNZXNzYWdlVHlwZSkge1xuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYW4gSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJJbnZvY2F0aW9uXCJdID0gMV0gPSBcIkludm9jYXRpb25cIjtcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgU3RyZWFtSXRlbSBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLlN0cmVhbUl0ZW1NZXNzYWdlfSBpbnRlcmZhY2UuICovXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJTdHJlYW1JdGVtXCJdID0gMl0gPSBcIlN0cmVhbUl0ZW1cIjtcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgQ29tcGxldGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkNvbXBsZXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDb21wbGV0aW9uXCJdID0gM10gPSBcIkNvbXBsZXRpb25cIjtcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgU3RyZWFtIEludm9jYXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5TdHJlYW1JbnZvY2F0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiU3RyZWFtSW52b2NhdGlvblwiXSA9IDRdID0gXCJTdHJlYW1JbnZvY2F0aW9uXCI7XG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENhbmNlbCBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuQ2FuY2VsSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNhbmNlbEludm9jYXRpb25cIl0gPSA1XSA9IFwiQ2FuY2VsSW52b2NhdGlvblwiO1xuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBQaW5nIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAbWljcm9zb2Z0L3NpZ25hbHIuUGluZ01lc3NhZ2V9IGludGVyZmFjZS4gKi9cbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlBpbmdcIl0gPSA2XSA9IFwiUGluZ1wiO1xuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBDbG9zZSBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkNsb3NlTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ2xvc2VcIl0gPSA3XSA9IFwiQ2xvc2VcIjtcbn0pKE1lc3NhZ2VUeXBlID0gZXhwb3J0cy5NZXNzYWdlVHlwZSB8fCAoZXhwb3J0cy5NZXNzYWdlVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JSHViUHJvdG9jb2wuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcSUh1YlByb3RvY29sLmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFRoZXNlIHZhbHVlcyBhcmUgZGVzaWduZWQgdG8gbWF0Y2ggdGhlIEFTUC5ORVQgTG9nIExldmVscyBzaW5jZSB0aGF0J3MgdGhlIHBhdHRlcm4gd2UncmUgZW11bGF0aW5nIGhlcmUuXG4vKiogSW5kaWNhdGVzIHRoZSBzZXZlcml0eSBvZiBhIGxvZyBtZXNzYWdlLlxuICpcbiAqIExvZyBMZXZlbHMgYXJlIG9yZGVyZWQgaW4gaW5jcmVhc2luZyBzZXZlcml0eS4gU28gYERlYnVnYCBpcyBtb3JlIHNldmVyZSB0aGFuIGBUcmFjZWAsIGV0Yy5cbiAqL1xudmFyIExvZ0xldmVsO1xuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIHZlcnkgbG93IHNldmVyaXR5IGRpYWdub3N0aWMgbWVzc2FnZXMuICovXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJUcmFjZVwiXSA9IDBdID0gXCJUcmFjZVwiO1xuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGxvdyBzZXZlcml0eSBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRGVidWdcIl0gPSAxXSA9IFwiRGVidWdcIjtcbiAgICAvKiogTG9nIGxldmVsIGZvciBpbmZvcm1hdGlvbmFsIGRpYWdub3N0aWMgbWVzc2FnZXMuICovXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJbmZvcm1hdGlvblwiXSA9IDJdID0gXCJJbmZvcm1hdGlvblwiO1xuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIG5vbi1mYXRhbCBwcm9ibGVtLiAqL1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV2FybmluZ1wiXSA9IDNdID0gXCJXYXJuaW5nXCI7XG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgZmFpbHVyZSBpbiB0aGUgY3VycmVudCBvcGVyYXRpb24uICovXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFcnJvclwiXSA9IDRdID0gXCJFcnJvclwiO1xuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIGZhaWx1cmUgdGhhdCB3aWxsIHRlcm1pbmF0ZSB0aGUgZW50aXJlIGFwcGxpY2F0aW9uLiAqL1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiQ3JpdGljYWxcIl0gPSA1XSA9IFwiQ3JpdGljYWxcIjtcbiAgICAvKiogVGhlIGhpZ2hlc3QgcG9zc2libGUgbG9nIGxldmVsLiBVc2VkIHdoZW4gY29uZmlndXJpbmcgbG9nZ2luZyB0byBpbmRpY2F0ZSB0aGF0IG5vIGxvZyBtZXNzYWdlcyBzaG91bGQgYmUgZW1pdHRlZC4gKi9cbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIk5vbmVcIl0gPSA2XSA9IFwiTm9uZVwiO1xufSkoTG9nTGV2ZWwgPSBleHBvcnRzLkxvZ0xldmVsIHx8IChleHBvcnRzLkxvZ0xldmVsID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlMb2dnZXIuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcSUxvZ2dlci5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBUaGlzIHdpbGwgYmUgdHJlYXRlZCBhcyBhIGJpdCBmbGFnIGluIHRoZSBmdXR1cmUsIHNvIHdlIGtlZXAgaXQgdXNpbmcgcG93ZXItb2YtdHdvIHZhbHVlcy5cbi8qKiBTcGVjaWZpZXMgYSBzcGVjaWZpYyBIVFRQIHRyYW5zcG9ydCB0eXBlLiAqL1xudmFyIEh0dHBUcmFuc3BvcnRUeXBlO1xuKGZ1bmN0aW9uIChIdHRwVHJhbnNwb3J0VHlwZSkge1xuICAgIC8qKiBTcGVjaWZpZXMgbm8gdHJhbnNwb3J0IHByZWZlcmVuY2UuICovXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBXZWJTb2NrZXRzIHRyYW5zcG9ydC4gKi9cbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIldlYlNvY2tldHNcIl0gPSAxXSA9IFwiV2ViU29ja2V0c1wiO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIFNlcnZlci1TZW50IEV2ZW50cyB0cmFuc3BvcnQuICovXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJTZXJ2ZXJTZW50RXZlbnRzXCJdID0gMl0gPSBcIlNlcnZlclNlbnRFdmVudHNcIjtcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBMb25nIFBvbGxpbmcgdHJhbnNwb3J0LiAqL1xuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiTG9uZ1BvbGxpbmdcIl0gPSA0XSA9IFwiTG9uZ1BvbGxpbmdcIjtcbn0pKEh0dHBUcmFuc3BvcnRUeXBlID0gZXhwb3J0cy5IdHRwVHJhbnNwb3J0VHlwZSB8fCAoZXhwb3J0cy5IdHRwVHJhbnNwb3J0VHlwZSA9IHt9KSk7XG4vKiogU3BlY2lmaWVzIHRoZSB0cmFuc2ZlciBmb3JtYXQgZm9yIGEgY29ubmVjdGlvbi4gKi9cbnZhciBUcmFuc2ZlckZvcm1hdDtcbihmdW5jdGlvbiAoVHJhbnNmZXJGb3JtYXQpIHtcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgb25seSB0ZXh0IGRhdGEgd2lsbCBiZSB0cmFuc21pdHRlZCBvdmVyIHRoZSBjb25uZWN0aW9uLiAqL1xuICAgIFRyYW5zZmVyRm9ybWF0W1RyYW5zZmVyRm9ybWF0W1wiVGV4dFwiXSA9IDFdID0gXCJUZXh0XCI7XG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IGJpbmFyeSBkYXRhIHdpbGwgYmUgdHJhbnNtaXR0ZWQgb3ZlciB0aGUgY29ubmVjdGlvbi4gKi9cbiAgICBUcmFuc2ZlckZvcm1hdFtUcmFuc2ZlckZvcm1hdFtcIkJpbmFyeVwiXSA9IDJdID0gXCJCaW5hcnlcIjtcbn0pKFRyYW5zZmVyRm9ybWF0ID0gZXhwb3J0cy5UcmFuc2ZlckZvcm1hdCB8fCAoZXhwb3J0cy5UcmFuc2ZlckZvcm1hdCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JVHJhbnNwb3J0LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXElUcmFuc3BvcnQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIElIdWJQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSUh1YlByb3RvY29sXCIpO1xudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcbnZhciBMb2dnZXJzXzEgPSByZXF1aXJlKFwiLi9Mb2dnZXJzXCIpO1xudmFyIFRleHRNZXNzYWdlRm9ybWF0XzEgPSByZXF1aXJlKFwiLi9UZXh0TWVzc2FnZUZvcm1hdFwiKTtcbnZhciBKU09OX0hVQl9QUk9UT0NPTF9OQU1FID0gXCJqc29uXCI7XG4vKiogSW1wbGVtZW50cyB0aGUgSlNPTiBIdWIgUHJvdG9jb2wuICovXG52YXIgSnNvbkh1YlByb3RvY29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEpzb25IdWJQcm90b2NvbCgpIHtcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgICAgIHRoaXMubmFtZSA9IEpTT05fSFVCX1BST1RPQ09MX05BTUU7XG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgICAgICB0aGlzLnZlcnNpb24gPSAxO1xuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICAgICAgdGhpcy50cmFuc2ZlckZvcm1hdCA9IElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdC5UZXh0O1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhbiBhcnJheSBvZiB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLkh1Yk1lc3NhZ2V9IG9iamVjdHMgZnJvbSB0aGUgc3BlY2lmaWVkIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0lMb2dnZXJ9IGxvZ2dlciBBIGxvZ2dlciB0aGF0IHdpbGwgYmUgdXNlZCB0byBsb2cgbWVzc2FnZXMgdGhhdCBvY2N1ciBkdXJpbmcgcGFyc2luZy5cbiAgICAgKi9cbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLnBhcnNlTWVzc2FnZXMgPSBmdW5jdGlvbiAoaW5wdXQsIGxvZ2dlcikge1xuICAgICAgICAvLyBUaGUgaW50ZXJmYWNlIGRvZXMgYWxsb3cgXCJBcnJheUJ1ZmZlclwiIHRvIGJlIHBhc3NlZCBpbiwgYnV0IHRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3QuIFNvIGxldCdzIHRocm93IGEgdXNlZnVsIGVycm9yLlxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBKU09OIGh1YiBwcm90b2NvbC4gRXhwZWN0ZWQgYSBzdHJpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9nZ2VyID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIgPSBMb2dnZXJzXzEuTnVsbExvZ2dlci5pbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXJzZSB0aGUgbWVzc2FnZXNcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gVGV4dE1lc3NhZ2VGb3JtYXRfMS5UZXh0TWVzc2FnZUZvcm1hdC5wYXJzZShpbnB1dCk7XG4gICAgICAgIHZhciBodWJNZXNzYWdlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG1lc3NhZ2VzXzEgPSBtZXNzYWdlczsgX2kgPCBtZXNzYWdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc18xW19pXTtcbiAgICAgICAgICAgIHZhciBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkTWVzc2FnZS50eXBlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGFyc2VkTWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5JbnZvY2F0aW9uOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzSW52b2NhdGlvbk1lc3NhZ2UocGFyc2VkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgSUh1YlByb3RvY29sXzEuTWVzc2FnZVR5cGUuU3RyZWFtSXRlbTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1N0cmVhbUl0ZW1NZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIElIdWJQcm90b2NvbF8xLk1lc3NhZ2VUeXBlLkNvbXBsZXRpb246XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb21wbGV0aW9uTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5QaW5nOlxuICAgICAgICAgICAgICAgICAgICAvLyBTaW5nbGUgdmFsdWUsIG5vIG5lZWQgdG8gdmFsaWRhdGVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZS5DbG9zZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsIG9wdGlvbmFsIHZhbHVlcywgbm8gbmVlZCB0byB2YWxpZGF0ZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBGdXR1cmUgcHJvdG9jb2wgY2hhbmdlcyBjYW4gYWRkIG1lc3NhZ2UgdHlwZXMsIG9sZCBjbGllbnRzIGNhbiBpZ25vcmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJVbmtub3duIG1lc3NhZ2UgdHlwZSAnXCIgKyBwYXJzZWRNZXNzYWdlLnR5cGUgKyBcIicgaWdub3JlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHViTWVzc2FnZXMucHVzaChwYXJzZWRNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHViTWVzc2FnZXM7XG4gICAgfTtcbiAgICAvKiogV3JpdGVzIHRoZSBzcGVjaWZpZWQge0BsaW5rIEBtaWNyb3NvZnQvc2lnbmFsci5IdWJNZXNzYWdlfSB0byBhIHN0cmluZyBhbmQgcmV0dXJucyBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SHViTWVzc2FnZX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byB3cml0ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUud3JpdGVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0XzEuVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgIH07XG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc0ludm9jYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLnRhcmdldCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIEludm9jYXRpb24gbWVzc2FnZS5cIik7XG4gICAgICAgIGlmIChtZXNzYWdlLmludm9jYXRpb25JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgSW52b2NhdGlvbiBtZXNzYWdlLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc1N0cmVhbUl0ZW1NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmludm9jYXRpb25JZCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIFN0cmVhbUl0ZW0gbWVzc2FnZS5cIik7XG4gICAgICAgIGlmIChtZXNzYWdlLml0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkIGZvciBTdHJlYW1JdGVtIG1lc3NhZ2UuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLmlzQ29tcGxldGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkIGZvciBDb21wbGV0aW9uIG1lc3NhZ2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmVycm9yLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcbiAgICB9O1xuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuYXNzZXJ0Tm90RW1wdHlTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEpzb25IdWJQcm90b2NvbDtcbn0oKSk7XG5leHBvcnRzLkpzb25IdWJQcm90b2NvbCA9IEpzb25IdWJQcm90b2NvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUpzb25IdWJQcm90b2NvbC5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxKc29uSHViUHJvdG9jb2wuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqIEEgbG9nZ2VyIHRoYXQgZG9lcyBub3RoaW5nIHdoZW4gbG9nIG1lc3NhZ2VzIGFyZSBzZW50IHRvIGl0LiAqL1xudmFyIE51bGxMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTnVsbExvZ2dlcigpIHtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgTnVsbExvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKF9sb2dMZXZlbCwgX21lc3NhZ2UpIHtcbiAgICB9O1xuICAgIC8qKiBUaGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9zaWduYWxyLk51bGxMb2dnZXJ9LiAqL1xuICAgIE51bGxMb2dnZXIuaW5zdGFuY2UgPSBuZXcgTnVsbExvZ2dlcigpO1xuICAgIHJldHVybiBOdWxsTG9nZ2VyO1xufSgpKTtcbmV4cG9ydHMuTnVsbExvZ2dlciA9IE51bGxMb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2dnZXJzLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXExvZ2dlcnMuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFib3J0Q29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vQWJvcnRDb250cm9sbGVyXCIpO1xudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSAnaW5kZXgnLCB0aGlzIHR5cGUgaXMgaW50ZXJuYWwuXG4vKiogQHByaXZhdGUgKi9cbnZhciBMb25nUG9sbGluZ1RyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb25nUG9sbGluZ1RyYW5zcG9ydChodHRwQ2xpZW50LCBhY2Nlc3NUb2tlbkZhY3RvcnksIGxvZ2dlciwgbG9nTWVzc2FnZUNvbnRlbnQsIHdpdGhDcmVkZW50aWFscywgaGVhZGVycykge1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGFjY2Vzc1Rva2VuRmFjdG9yeTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIHRoaXMucG9sbEFib3J0ID0gbmV3IEFib3J0Q29udHJvbGxlcl8xLkFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbnJlY2VpdmUgPSBudWxsO1xuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLCBcInBvbGxBYm9ydGVkXCIsIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcm5hbCB0eXBlLCBub3QgZXhwb3J0ZWQgZnJvbSAnaW5kZXgnIHNvIHRoaXMgaXMgcmVhbGx5IGp1c3QgaW50ZXJuYWwuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9sbEFib3J0LmFib3J0ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgbmFtZSwgdmFsdWUsIGhlYWRlcnMsIHBvbGxPcHRpb25zLCB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlsc18xLkFyZy5pc1JlcXVpcmVkKHRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIENvbm5lY3RpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgYmluYXJ5IGZvcm1hdCBvbiBOb2RlIGFuZCBCcm93c2VycyB0aGF0IHN1cHBvcnQgYmluYXJ5IGNvbnRlbnQgKGluZGljYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgcmVzcG9uc2VUeXBlIHByb3BlcnR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgbmV3IFhNTEh0dHBSZXF1ZXN0KCkucmVzcG9uc2VUeXBlICE9PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJpbmFyeSBwcm90b2NvbHMgb3ZlciBYbWxIdHRwUmVxdWVzdCBub3QgaW1wbGVtZW50aW5nIGFkdmFuY2VkIGZlYXR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gVXRpbHNfMS5nZXRVc2VyQWdlbnRIZWFkZXIoKSwgbmFtZSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IF9fYXNzaWduKChfYSA9IHt9LCBfYVtuYW1lXSA9IHZhbHVlLCBfYSksIHRoaXMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogdGhpcy5wb2xsQWJvcnQuc2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMTAwMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbE9wdGlvbnMucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRBY2Nlc3NUb2tlbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKHBvbGxPcHRpb25zLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsVXJsID0gdXJsICsgXCImXz1cIiArIERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHBvbGxpbmc6IFwiICsgcG9sbFVybCArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cENsaWVudC5nZXQocG9sbFVybCwgcG9sbE9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvciwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBVbmV4cGVjdGVkIHJlc3BvbnNlIGNvZGU6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHJ1bm5pbmcgYXMgZmFsc2Ugc28gdGhhdCB0aGUgcG9sbCBpbW1lZGlhdGVseSBlbmRzIGFuZCBydW5zIHRoZSBjbG9zZSBsb2dpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VFcnJvciA9IG5ldyBFcnJvcnNfMS5IdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCBcIlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IHRoaXMucG9sbCh0aGlzLnVybCwgcG9sbE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5nZXRBY2Nlc3NUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbnVsbF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnVwZGF0ZUhlYWRlclRva2VuID0gZnVuY3Rpb24gKHJlcXVlc3QsIHRva2VuKSB7XG4gICAgICAgIGlmICghcmVxdWVzdC5oZWFkZXJzKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgdG9rZW47XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgICAgIGlmIChyZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICh1cmwsIHBvbGxPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2UsIGVfMTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgLCA4LCA5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0QWNjZXNzVG9rZW4oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFkZXJUb2tlbihwb2xsT3B0aW9ucywgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzMsIDUsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbFVybCA9IHVybCArIFwiJl89XCIgKyBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBwb2xsaW5nOiBcIiArIHBvbGxVcmwgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQuZ2V0KHBvbGxVcmwsIHBvbGxPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCB0ZXJtaW5hdGVkIGJ5IHNlcnZlci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkVycm9yLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFVuZXhwZWN0ZWQgcmVzcG9uc2UgY29kZTogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgc3RhdHVzIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRXJyb3IgPSBuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQgfHwgXCJcIiwgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwocmVzcG9uc2UuY29udGVudCwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ucmVjZWl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbnJlY2VpdmUocmVzcG9uc2UuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW5vdGhlciB3YXkgdGltZW91dCBtYW5pZmVzdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRpbWVkIG91dCwgcmVpc3N1aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb2cgYnV0IGRpc3JlZ2FyZCBlcnJvcnMgdGhhdCBvY2N1ciBhZnRlciBzdG9wcGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCBlcnJvcmVkIGFmdGVyIHNodXRkb3duOiBcIiArIGVfMS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlXzEgaW5zdGFuY2VvZiBFcnJvcnNfMS5UaW1lb3V0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHRpbWVvdXRzIGFuZCByZWlzc3VlIHRoZSBwb2xsLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgdGltZWQgb3V0LCByZWlzc3VpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIGNvbm5lY3Rpb24gd2l0aCB0aGUgZXJyb3IgYXMgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVycm9yID0gZV8xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsaW5nIGNvbXBsZXRlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHdpbGwgcmVhY2ggaGVyZSB3aXRoIHBvbGxBYm9ydGVkPT1mYWxzZSB3aGVuIHRoZSBzZXJ2ZXIgcmV0dXJuZWQgYSByZXNwb25zZSBjYXVzaW5nIHRoZSB0cmFuc3BvcnQgdG8gc3RvcC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHBvbGxBYm9ydGVkPT10cnVlIHRoZW4gY2xpZW50IGluaXRpYXRlZCB0aGUgc3RvcCBhbmQgdGhlIHN0b3AgbWV0aG9kIHdpbGwgcmFpc2UgdGhlIGNsb3NlIGV2ZW50IGFmdGVyIERFTEVURSBpcyBzZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvbGxBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWlzZU9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCB1bnRpbCB0aGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZFwiKSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgVXRpbHNfMS5zZW5kTWVzc2FnZSh0aGlzLmxvZ2dlciwgXCJMb25nUG9sbGluZ1wiLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMudXJsLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCwgdGhpcy53aXRoQ3JlZGVudGlhbHMsIHRoaXMuaGVhZGVycyldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzLCBfYSwgbmFtZV8xLCB2YWx1ZSwgZGVsZXRlT3B0aW9ucywgdG9rZW47XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFN0b3BwaW5nIHBvbGxpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVsbCByZWNlaXZpbmcgbG9vcCB0byBzdG9wLCBhYm9ydCBhbnkgY3VycmVudCByZXF1ZXN0LCBhbmQgdGhlbiB3YWl0IGZvciBpdCB0byBmaW5pc2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2xsQWJvcnQuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDUsIDZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVjZWl2aW5nXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCBERUxFVEUgdG8gY2xlYW4gdXAgbG9uZyBwb2xsaW5nIG9uIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgc2VuZGluZyBERUxFVEUgcmVxdWVzdCB0byBcIiArIHRoaXMudXJsICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBVdGlsc18xLmdldFVzZXJBZ2VudEhlYWRlcigpLCBuYW1lXzEgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbmFtZV8xXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7fSwgaGVhZGVycywgdGhpcy5oZWFkZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0QWNjZXNzVG9rZW4oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFkZXJUb2tlbihkZWxldGVPcHRpb25zLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKHRoaXMudXJsLCBkZWxldGVPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgREVMRVRFIHJlcXVlc3Qgc2VudC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBTdG9wIGZpbmlzaGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJhaXNlIGNsb3NlIGV2ZW50IGhlcmUgaW5zdGVhZCBvZiBpbiBwb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgdGhlIERFTEVURSByZXF1ZXN0IGlzIHNlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmFpc2VPbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUucmFpc2VPbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XG4gICAgICAgICAgICB2YXIgbG9nTWVzc2FnZSA9IFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgRmlyaW5nIG9uY2xvc2UgZXZlbnQuXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nTWVzc2FnZSArPSBcIiBFcnJvcjogXCIgKyB0aGlzLmNsb3NlRXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBsb2dNZXNzYWdlKTtcbiAgICAgICAgICAgIHRoaXMub25jbG9zZSh0aGlzLmNsb3NlRXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTG9uZ1BvbGxpbmdUcmFuc3BvcnQ7XG59KCkpO1xuZXhwb3J0cy5Mb25nUG9sbGluZ1RyYW5zcG9ydCA9IExvbmdQb2xsaW5nVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcTG9uZ1BvbGxpbmdUcmFuc3BvcnQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG4vKiogQHByaXZhdGUgKi9cbnZhciBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCBldmVudFNvdXJjZUNvbnN0cnVjdG9yLCB3aXRoQ3JlZGVudGlhbHMsIGhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBhY2Nlc3NUb2tlbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IgPSBldmVudFNvdXJjZUNvbnN0cnVjdG9yO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XG4gICAgICAgIHRoaXMub25jbG9zZSA9IG51bGw7XG4gICAgfVxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFNTRSB0cmFuc3BvcnQpIENvbm5lY3RpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHVybCBiZWZvcmUgYWNjZXNzVG9rZW5GYWN0b3J5IGJlY2F1c2UgdGhpcy51cmwgaXMgb25seSBmb3Igc2VuZCBhbmQgd2Ugc2V0IHRoZSBhdXRoIGhlYWRlciBpbnN0ZWFkIG9mIHRoZSBxdWVyeSBzdHJpbmcgZm9yIHNlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gKHVybC5pbmRleE9mKFwiP1wiKSA8IDAgPyBcIj9cIiA6IFwiJlwiKSArIChcImFjY2Vzc190b2tlbj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0b2tlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdCAhPT0gSVRyYW5zcG9ydF8xLlRyYW5zZmVyRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRoZSBTZXJ2ZXItU2VudCBFdmVudHMgdHJhbnNwb3J0IG9ubHkgc3VwcG9ydHMgdGhlICdUZXh0JyB0cmFuc2ZlciBmb3JtYXRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVXRpbHNfMS5QbGF0Zm9ybS5pc0Jyb3dzZXIgfHwgVXRpbHNfMS5QbGF0Zm9ybS5pc1dlYldvcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZSA9IG5ldyBfdGhpcy5ldmVudFNvdXJjZUNvbnN0cnVjdG9yKHVybCwgeyB3aXRoQ3JlZGVudGlhbHM6IF90aGlzLndpdGhDcmVkZW50aWFscyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vbi1icm93c2VyIHBhc3NlcyBjb29raWVzIHZpYSB0aGUgZGljdGlvbmFyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llcyA9IF90aGlzLmh0dHBDbGllbnQuZ2V0Q29va2llU3RyaW5nKHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQ29va2llID0gY29va2llcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gVXRpbHNfMS5nZXRVc2VyQWdlbnRIZWFkZXIoKSwgbmFtZV8xID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbmFtZV8xXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZSA9IG5ldyBfdGhpcy5ldmVudFNvdXJjZUNvbnN0cnVjdG9yKHVybCwgeyB3aXRoQ3JlZGVudGlhbHM6IF90aGlzLndpdGhDcmVkZW50aWFscywgaGVhZGVyczogX19hc3NpZ24oe30sIGhlYWRlcnMsIF90aGlzLmhlYWRlcnMpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ucmVjZWl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihTU0UgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIFV0aWxzXzEuZ2V0RGF0YURldGFpbChlLmRhdGEsIF90aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25yZWNlaXZlKGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGUuZGF0YSB8fCBcIkVycm9yIG9jY3VycmVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlNTRSBjb25uZWN0ZWQgdG8gXCIgKyBfdGhpcy51cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRTb3VyY2UgPSBldmVudFNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ldmVudFNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHNlbmQgdW50aWwgdGhlIHRyYW5zcG9ydCBpcyBjb25uZWN0ZWRcIikpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFV0aWxzXzEuc2VuZE1lc3NhZ2UodGhpcy5sb2dnZXIsIFwiU1NFXCIsIHRoaXMuaHR0cENsaWVudCwgdGhpcy51cmwsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCBkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50LCB0aGlzLndpdGhDcmVkZW50aWFscywgdGhpcy5oZWFkZXJzKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTb3VyY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydDtcbn0oKSk7XG5leHBvcnRzLlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQgPSBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG4vKiogU3RyZWFtIGltcGxlbWVudGF0aW9uIHRvIHN0cmVhbSBpdGVtcyB0byB0aGUgc2VydmVyLiAqL1xudmFyIFN1YmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm9ic2VydmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub2JzZXJ2ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbX2ldO1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gbmV3IFV0aWxzXzEuU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBvYnNlcnZlcik7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oKSk7XG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1xcXFxTdWJqZWN0LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIE5vdCBleHBvcnRlZCBmcm9tIGluZGV4XG4vKiogQHByaXZhdGUgKi9cbnZhciBUZXh0TWVzc2FnZUZvcm1hdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUZXh0TWVzc2FnZUZvcm1hdCgpIHtcbiAgICB9XG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUgPSBmdW5jdGlvbiAob3V0cHV0KSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgb3V0cHV0ICsgVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yO1xuICAgIH07XG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQucGFyc2UgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdICE9PSBUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gaW5wdXQuc3BsaXQoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKTtcbiAgICAgICAgbWVzc2FnZXMucG9wKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9O1xuICAgIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvckNvZGUgPSAweDFlO1xuICAgIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XG4gICAgcmV0dXJuIFRleHRNZXNzYWdlRm9ybWF0O1xufSgpKTtcbmV4cG9ydHMuVGV4dE1lc3NhZ2VGb3JtYXQgPSBUZXh0TWVzc2FnZUZvcm1hdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRleHRNZXNzYWdlRm9ybWF0LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXFRleHRNZXNzYWdlRm9ybWF0LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xudmFyIExvZ2dlcnNfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlcnNcIik7XG4vLyBWZXJzaW9uIHRva2VuIHRoYXQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgcHJlcGFjayBjb21tYW5kXG4vKiogVGhlIHZlcnNpb24gb2YgdGhlIFNpZ25hbFIgY2xpZW50LiAqL1xuZXhwb3J0cy5WRVJTSU9OID0gXCI1LjAuNVwiO1xuLyoqIEBwcml2YXRlICovXG52YXIgQXJnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFyZygpIHtcbiAgICB9XG4gICAgQXJnLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiAodmFsLCBuYW1lKSB7XG4gICAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnXCIgKyBuYW1lICsgXCInIGFyZ3VtZW50IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXJnLmlzTm90RW1wdHkgPSBmdW5jdGlvbiAodmFsLCBuYW1lKSB7XG4gICAgICAgIGlmICghdmFsIHx8IHZhbC5tYXRjaCgvXlxccyokLykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnXCIgKyBuYW1lICsgXCInIGFyZ3VtZW50IHNob3VsZCBub3QgYmUgZW1wdHkuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBcmcuaXNJbiA9IGZ1bmN0aW9uICh2YWwsIHZhbHVlcywgbmFtZSkge1xuICAgICAgICAvLyBUeXBlU2NyaXB0IGVudW1zIGhhdmUga2V5cyBmb3IgKipib3RoKiogdGhlIG5hbWUgYW5kIHRoZSB2YWx1ZSBvZiBlYWNoIGVudW0gbWVtYmVyIG9uIHRoZSB0eXBlIGl0c2VsZi5cbiAgICAgICAgaWYgKCEodmFsIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gXCIgKyBuYW1lICsgXCIgdmFsdWU6IFwiICsgdmFsICsgXCIuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXJnO1xufSgpKTtcbmV4cG9ydHMuQXJnID0gQXJnO1xuLyoqIEBwcml2YXRlICovXG52YXIgUGxhdGZvcm0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGxhdGZvcm0oKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybSwgXCJpc0Jyb3dzZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm0sIFwiaXNXZWJXb3JrZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBcImltcG9ydFNjcmlwdHNcIiBpbiBzZWxmO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm0sIFwiaXNOb2RlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNCcm93c2VyICYmICF0aGlzLmlzV2ViV29ya2VyO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUGxhdGZvcm07XG59KCkpO1xuZXhwb3J0cy5QbGF0Zm9ybSA9IFBsYXRmb3JtO1xuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBnZXREYXRhRGV0YWlsKGRhdGEsIGluY2x1ZGVDb250ZW50KSB7XG4gICAgdmFyIGRldGFpbCA9IFwiXCI7XG4gICAgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZGV0YWlsID0gXCJCaW5hcnkgZGF0YSBvZiBsZW5ndGggXCIgKyBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChpbmNsdWRlQ29udGVudCkge1xuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBmb3JtYXRBcnJheUJ1ZmZlcihkYXRhKSArIFwiJ1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGRldGFpbCA9IFwiU3RyaW5nIGRhdGEgb2YgbGVuZ3RoIFwiICsgZGF0YS5sZW5ndGg7XG4gICAgICAgIGlmIChpbmNsdWRlQ29udGVudCkge1xuICAgICAgICAgICAgZGV0YWlsICs9IFwiLiBDb250ZW50OiAnXCIgKyBkYXRhICsgXCInXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRldGFpbDtcbn1cbmV4cG9ydHMuZ2V0RGF0YURldGFpbCA9IGdldERhdGFEZXRhaWw7XG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGZvcm1hdEFycmF5QnVmZmVyKGRhdGEpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIC8vIFVpbnQ4QXJyYXkubWFwIG9ubHkgc3VwcG9ydHMgcmV0dXJuaW5nIGFub3RoZXIgVWludDhBcnJheT9cbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2aWV3LmZvckVhY2goZnVuY3Rpb24gKG51bSkge1xuICAgICAgICB2YXIgcGFkID0gbnVtIDwgMTYgPyBcIjBcIiA6IFwiXCI7XG4gICAgICAgIHN0ciArPSBcIjB4XCIgKyBwYWQgKyBudW0udG9TdHJpbmcoMTYpICsgXCIgXCI7XG4gICAgfSk7XG4gICAgLy8gVHJpbSBvZiB0cmFpbGluZyBzcGFjZS5cbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gMSk7XG59XG5leHBvcnRzLmZvcm1hdEFycmF5QnVmZmVyID0gZm9ybWF0QXJyYXlCdWZmZXI7XG4vLyBBbHNvIGluIHNpZ25hbHItcHJvdG9jb2wtbXNncGFjay9VdGlscy50c1xuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICAgIHJldHVybiB2YWwgJiYgdHlwZW9mIEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICh2YWwgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAgICAgLy8gU29tZXRpbWVzIHdlIGdldCBhbiBBcnJheUJ1ZmZlciB0aGF0IGRvZXNuJ3Qgc2F0aXNmeSBpbnN0YW5jZW9mXG4gICAgICAgICAgICAodmFsLmNvbnN0cnVjdG9yICYmIHZhbC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5QnVmZmVyXCIpKTtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIHNlbmRNZXNzYWdlKGxvZ2dlciwgdHJhbnNwb3J0TmFtZSwgaHR0cENsaWVudCwgdXJsLCBhY2Nlc3NUb2tlbkZhY3RvcnksIGNvbnRlbnQsIGxvZ01lc3NhZ2VDb250ZW50LCB3aXRoQ3JlZGVudGlhbHMsIGRlZmF1bHRIZWFkZXJzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIGhlYWRlcnMsIHRva2VuLCBfYiwgbmFtZSwgdmFsdWUsIHJlc3BvbnNlVHlwZSwgcmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBhY2Nlc3NUb2tlbkZhY3RvcnkoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2IgPSBnZXRVc2VyQWdlbnRIZWFkZXIoKSwgbmFtZSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihcIiArIHRyYW5zcG9ydE5hbWUgKyBcIiB0cmFuc3BvcnQpIHNlbmRpbmcgZGF0YS4gXCIgKyBnZXREYXRhRGV0YWlsKGNvbnRlbnQsIGxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gaXNBcnJheUJ1ZmZlcihjb250ZW50KSA/IFwiYXJyYXlidWZmZXJcIiA6IFwidGV4dFwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBodHRwQ2xpZW50LnBvc3QodXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7fSwgaGVhZGVycywgZGVmYXVsdEhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogd2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihcIiArIHRyYW5zcG9ydE5hbWUgKyBcIiB0cmFuc3BvcnQpIHJlcXVlc3QgY29tcGxldGUuIFJlc3BvbnNlIHN0YXR1czogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBjcmVhdGVMb2dnZXIobG9nZ2VyKSB7XG4gICAgaWYgKGxvZ2dlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29uc29sZUxvZ2dlcihJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb24pO1xuICAgIH1cbiAgICBpZiAobG9nZ2VyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBMb2dnZXJzXzEuTnVsbExvZ2dlci5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKGxvZ2dlci5sb2cpIHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dlcik7XG59XG5leHBvcnRzLmNyZWF0ZUxvZ2dlciA9IGNyZWF0ZUxvZ2dlcjtcbi8qKiBAcHJpdmF0ZSAqL1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmlwdGlvbihzdWJqZWN0LCBvYnNlcnZlcikge1xuICAgICAgICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgfVxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuaW5kZXhPZih0aGlzLm9ic2VydmVyKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdWJqZWN0Lm9ic2VydmVycy5sZW5ndGggPT09IDAgJiYgdGhpcy5zdWJqZWN0LmNhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnN1YmplY3QuY2FuY2VsQ2FsbGJhY2soKS5jYXRjaChmdW5jdGlvbiAoXykgeyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0cy5TdWJqZWN0U3Vic2NyaXB0aW9uID0gU3ViamVjdFN1YnNjcmlwdGlvbjtcbi8qKiBAcHJpdmF0ZSAqL1xudmFyIENvbnNvbGVMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc29sZUxvZ2dlcihtaW5pbXVtTG9nTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5taW5pbXVtTG9nTGV2ZWwgPSBtaW5pbXVtTG9nTGV2ZWw7XG4gICAgICAgIHRoaXMub3V0cHV0Q29uc29sZSA9IGNvbnNvbGU7XG4gICAgfVxuICAgIENvbnNvbGVMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChsb2dMZXZlbCwgbWVzc2FnZSkge1xuICAgICAgICBpZiAobG9nTGV2ZWwgPj0gdGhpcy5taW5pbXVtTG9nTGV2ZWwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5Dcml0aWNhbDpcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5FcnJvcjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlLmVycm9yKFwiW1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCJdIFwiICsgSUxvZ2dlcl8xLkxvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dHB1dENvbnNvbGUud2FybihcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIElMb2dnZXJfMS5Mb2dMZXZlbFtsb2dMZXZlbF0gKyBcIjogXCIgKyBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBJTG9nZ2VyXzEuTG9nTGV2ZWwuSW5mb3JtYXRpb246XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0Q29uc29sZS5pbmZvKFwiW1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCJdIFwiICsgSUxvZ2dlcl8xLkxvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnIG9ubHkgZ29lcyB0byBhdHRhY2hlZCBkZWJ1Z2dlcnMgaW4gTm9kZSwgc28gd2UgdXNlIGNvbnNvbGUubG9nIGZvciBUcmFjZSBhbmQgRGVidWdcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb25zb2xlLmxvZyhcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIElMb2dnZXJfMS5Mb2dMZXZlbFtsb2dMZXZlbF0gKyBcIjogXCIgKyBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zb2xlTG9nZ2VyO1xufSgpKTtcbmV4cG9ydHMuQ29uc29sZUxvZ2dlciA9IENvbnNvbGVMb2dnZXI7XG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGdldFVzZXJBZ2VudEhlYWRlcigpIHtcbiAgICB2YXIgdXNlckFnZW50SGVhZGVyTmFtZSA9IFwiWC1TaWduYWxSLVVzZXItQWdlbnRcIjtcbiAgICBpZiAoUGxhdGZvcm0uaXNOb2RlKSB7XG4gICAgICAgIHVzZXJBZ2VudEhlYWRlck5hbWUgPSBcIlVzZXItQWdlbnRcIjtcbiAgICB9XG4gICAgcmV0dXJuIFt1c2VyQWdlbnRIZWFkZXJOYW1lLCBjb25zdHJ1Y3RVc2VyQWdlbnQoZXhwb3J0cy5WRVJTSU9OLCBnZXRPc05hbWUoKSwgZ2V0UnVudGltZSgpLCBnZXRSdW50aW1lVmVyc2lvbigpKV07XG59XG5leHBvcnRzLmdldFVzZXJBZ2VudEhlYWRlciA9IGdldFVzZXJBZ2VudEhlYWRlcjtcbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gY29uc3RydWN0VXNlckFnZW50KHZlcnNpb24sIG9zLCBydW50aW1lLCBydW50aW1lVmVyc2lvbikge1xuICAgIC8vIE1pY3Jvc29mdCBTaWduYWxSL1tWZXJzaW9uXSAoW0RldGFpbGVkIFZlcnNpb25dOyBbT3BlcmF0aW5nIFN5c3RlbV07IFtSdW50aW1lXTsgW1J1bnRpbWUgVmVyc2lvbl0pXG4gICAgdmFyIHVzZXJBZ2VudCA9IFwiTWljcm9zb2Z0IFNpZ25hbFIvXCI7XG4gICAgdmFyIG1ham9yQW5kTWlub3IgPSB2ZXJzaW9uLnNwbGl0KFwiLlwiKTtcbiAgICB1c2VyQWdlbnQgKz0gbWFqb3JBbmRNaW5vclswXSArIFwiLlwiICsgbWFqb3JBbmRNaW5vclsxXTtcbiAgICB1c2VyQWdlbnQgKz0gXCIgKFwiICsgdmVyc2lvbiArIFwiOyBcIjtcbiAgICBpZiAob3MgJiYgb3MgIT09IFwiXCIpIHtcbiAgICAgICAgdXNlckFnZW50ICs9IG9zICsgXCI7IFwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdXNlckFnZW50ICs9IFwiVW5rbm93biBPUzsgXCI7XG4gICAgfVxuICAgIHVzZXJBZ2VudCArPSBcIlwiICsgcnVudGltZTtcbiAgICBpZiAocnVudGltZVZlcnNpb24pIHtcbiAgICAgICAgdXNlckFnZW50ICs9IFwiOyBcIiArIHJ1bnRpbWVWZXJzaW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdXNlckFnZW50ICs9IFwiOyBVbmtub3duIFJ1bnRpbWUgVmVyc2lvblwiO1xuICAgIH1cbiAgICB1c2VyQWdlbnQgKz0gXCIpXCI7XG4gICAgcmV0dXJuIHVzZXJBZ2VudDtcbn1cbmV4cG9ydHMuY29uc3RydWN0VXNlckFnZW50ID0gY29uc3RydWN0VXNlckFnZW50O1xuZnVuY3Rpb24gZ2V0T3NOYW1lKCkge1xuICAgIGlmIChQbGF0Zm9ybS5pc05vZGUpIHtcbiAgICAgICAgc3dpdGNoIChwcm9jZXNzLnBsYXRmb3JtKSB7XG4gICAgICAgICAgICBjYXNlIFwid2luMzJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJXaW5kb3dzIE5UXCI7XG4gICAgICAgICAgICBjYXNlIFwiZGFyd2luXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibWFjT1NcIjtcbiAgICAgICAgICAgIGNhc2UgXCJsaW51eFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxpbnV4XCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLnBsYXRmb3JtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSdW50aW1lVmVyc2lvbigpIHtcbiAgICBpZiAoUGxhdGZvcm0uaXNOb2RlKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLnZlcnNpb25zLm5vZGU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRSdW50aW1lKCkge1xuICAgIGlmIChQbGF0Zm9ybS5pc05vZGUpIHtcbiAgICAgICAgcmV0dXJuIFwiTm9kZUpTXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJCcm93c2VyXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXRpbHMuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcVXRpbHMuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIElMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0lMb2dnZXJcIik7XG52YXIgSVRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vSVRyYW5zcG9ydFwiKTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG4vKiogQHByaXZhdGUgKi9cbnZhciBXZWJTb2NrZXRUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KGh0dHBDbGllbnQsIGFjY2Vzc1Rva2VuRmFjdG9yeSwgbG9nZ2VyLCBsb2dNZXNzYWdlQ29udGVudCwgd2ViU29ja2V0Q29uc3RydWN0b3IsIGhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5O1xuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29uc3RydWN0b3IgPSB3ZWJTb2NrZXRDb25zdHJ1Y3RvcjtcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgICAgICAgdGhpcy5vbnJlY2VpdmUgPSBudWxsO1xuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIH1cbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHNfMS5BcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzXzEuQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIElUcmFuc3BvcnRfMS5UcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBDb25uZWN0aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZihcIj9cIikgPCAwID8gXCI/XCIgOiBcIiZcIikgKyAoXCJhY2Nlc3NfdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cC8sIFwid3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdlYlNvY2tldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llcyA9IF90aGlzLmh0dHBDbGllbnQuZ2V0Q29va2llU3RyaW5nKHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVdGlsc18xLlBsYXRmb3JtLmlzTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBVdGlsc18xLmdldFVzZXJBZ2VudEhlYWRlcigpLCBuYW1lXzEgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1tuYW1lXzFdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29raWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW1wiQ29va2llXCJdID0gXCJcIiArIGNvb2tpZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBwYXNzIGhlYWRlcnMgd2hlbiBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0ID0gbmV3IF90aGlzLndlYlNvY2tldENvbnN0cnVjdG9yKHVybCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7fSwgaGVhZGVycywgX3RoaXMuaGVhZGVycyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdlYlNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgaXMgbm90IGhhcHB5IHdpdGggcGFzc2luZyAndW5kZWZpbmVkJyBhcyBwcm90b2NvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQgPSBuZXcgX3RoaXMud2ViU29ja2V0Q29uc3RydWN0b3IodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQuQmluYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoX2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLkluZm9ybWF0aW9uLCBcIldlYlNvY2tldCBjb25uZWN0ZWQgdG8gXCIgKyB1cmwgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLndlYlNvY2tldCA9IHdlYlNvY2tldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3JFdmVudCBpcyBhIGJyb3dzZXIgb25seSB0eXBlIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHR5cGUgZXhpc3RzIGJlZm9yZSB1c2luZyBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGV2ZW50LmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXCJUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgdHJhbnNwb3J0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwobWVzc2FnZS5kYXRhLCBfdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbnJlY2VpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25yZWNlaXZlKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBjYWxsIGNsb3NlIGhhbmRsZXIgaWYgY29ubmVjdGlvbiB3YXMgbmV2ZXIgZXN0YWJsaXNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UnbGwgcmVqZWN0IHRoZSBjb25uZWN0IGNhbGwgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3JFdmVudCBpcyBhIGJyb3dzZXIgb25seSB0eXBlIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHR5cGUgZXhpc3RzIGJlZm9yZSB1c2luZyBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBFcnJvckV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGV2ZW50IGluc3RhbmNlb2YgRXJyb3JFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciB3aXRoIHRoZSB0cmFuc3BvcnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMud2ViU29ja2V0Q29uc3RydWN0b3IuT1BFTikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5UcmFjZSwgXCIoV2ViU29ja2V0cyB0cmFuc3BvcnQpIHNlbmRpbmcgZGF0YS4gXCIgKyBVdGlsc18xLmdldERhdGFEZXRhaWwoZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIldlYlNvY2tldCBpcyBub3QgaW4gdGhlIE9QRU4gc3RhdGVcIik7XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLndlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gTWFudWFsbHkgaW52b2tlIG9uY2xvc2UgY2FsbGJhY2sgaW5saW5lIHNvIHdlIGtub3cgdGhlIEh0dHBDb25uZWN0aW9uIHdhcyBjbG9zZWQgcHJvcGVybHkgYmVmb3JlIHJldHVybmluZ1xuICAgICAgICAgICAgLy8gVGhpcyBhbHNvIHNvbHZlcyBhbiBpc3N1ZSB3aGVyZSB3ZWJzb2NrZXQub25jbG9zZSBjb3VsZCB0YWtlIDE4KyBzZWNvbmRzIHRvIHRyaWdnZXIgZHVyaW5nIG5ldHdvcmsgZGlzY29ubmVjdHNcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIHdlYlNvY2tldCB3aWxsIGJlIG51bGwgaWYgdGhlIHRyYW5zcG9ydCBkaWQgbm90IHN0YXJ0IHN1Y2Nlc3NmdWxseVxuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIENsZWFyIHdlYnNvY2tldCBoYW5kbGVycyBiZWNhdXNlIHdlIGFyZSBjb25zaWRlcmluZyB0aGUgc29ja2V0IGNsb3NlZCBub3dcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhJTG9nZ2VyXzEuTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBzb2NrZXQgY2xvc2VkLlwiKTtcbiAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZUV2ZW50KGV2ZW50KSAmJiAoZXZlbnQud2FzQ2xlYW4gPT09IGZhbHNlIHx8IGV2ZW50LmNvZGUgIT09IDEwMDApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKG5ldyBFcnJvcihcIldlYlNvY2tldCBjbG9zZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBldmVudC5jb2RlICsgXCIgKFwiICsgZXZlbnQucmVhc29uICsgXCIpLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmlzQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQgJiYgdHlwZW9mIGV2ZW50Lndhc0NsZWFuID09PSBcImJvb2xlYW5cIiAmJiB0eXBlb2YgZXZlbnQuY29kZSA9PT0gXCJudW1iZXJcIjtcbiAgICB9O1xuICAgIHJldHVybiBXZWJTb2NrZXRUcmFuc3BvcnQ7XG59KCkpO1xuZXhwb3J0cy5XZWJTb2NrZXRUcmFuc3BvcnQgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJTb2NrZXRUcmFuc3BvcnQuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxAbWljcm9zb2Z0XFxcXHNpZ25hbHJcXFxcZGlzdFxcXFxjanNcXFxcV2ViU29ja2V0VHJhbnNwb3J0LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xudmFyIEh0dHBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0h0dHBDbGllbnRcIik7XG52YXIgSUxvZ2dlcl8xID0gcmVxdWlyZShcIi4vSUxvZ2dlclwiKTtcbnZhciBYaHJIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhYaHJIdHRwQ2xpZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFhockh0dHBDbGllbnQobG9nZ2VyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICBYaHJIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBhYm9ydCB3YXMgbm90IHNpZ25hbGVkIGJlZm9yZSBjYWxsaW5nIHNlbmRcbiAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwgJiYgcmVxdWVzdC5hYm9ydFNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yc18xLkFib3J0RXJyb3IoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXF1ZXN0Lm1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG1ldGhvZCBkZWZpbmVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXF1ZXN0LnVybCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHVybCBkZWZpbmVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiByZXF1ZXN0LndpdGhDcmVkZW50aWFscztcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpO1xuICAgICAgICAgICAgLy8gRXhwbGljaXRseSBzZXR0aW5nIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyIGZvciBSZWFjdCBOYXRpdmUgb24gQW5kcm9pZCBwbGF0Zm9ybS5cbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnM7XG4gICAgICAgICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBoZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yc18xLkFib3J0RXJyb3IoKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB4aHIudGltZW91dCA9IHJlcXVlc3QudGltZW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5hYm9ydFNpZ25hbC5vbmFib3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgSHR0cENsaWVudF8xLkh0dHBSZXNwb25zZSh4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCwgeGhyLnJlc3BvbnNlIHx8IHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHhoci5zdGF0dXNUZXh0LCB4aHIuc3RhdHVzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coSUxvZ2dlcl8xLkxvZ0xldmVsLldhcm5pbmcsIFwiRXJyb3IgZnJvbSBIVFRQIHJlcXVlc3QuIFwiICsgeGhyLnN0YXR1cyArIFwiOiBcIiArIHhoci5zdGF0dXNUZXh0ICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JzXzEuSHR0cEVycm9yKHhoci5zdGF0dXNUZXh0LCB4aHIuc3RhdHVzKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKElMb2dnZXJfMS5Mb2dMZXZlbC5XYXJuaW5nLCBcIlRpbWVvdXQgZnJvbSBIVFRQIHJlcXVlc3QuXCIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JzXzEuVGltZW91dEVycm9yKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5zZW5kKHJlcXVlc3QuY29udGVudCB8fCBcIlwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gWGhySHR0cENsaWVudDtcbn0oSHR0cENsaWVudF8xLkh0dHBDbGllbnQpKTtcbmV4cG9ydHMuWGhySHR0cENsaWVudCA9IFhockh0dHBDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1YaHJIdHRwQ2xpZW50LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXFhockh0dHBDbGllbnQuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4vRXJyb3JzXCIpO1xuZXhwb3J0cy5BYm9ydEVycm9yID0gRXJyb3JzXzEuQWJvcnRFcnJvcjtcbmV4cG9ydHMuSHR0cEVycm9yID0gRXJyb3JzXzEuSHR0cEVycm9yO1xuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBFcnJvcnNfMS5UaW1lb3V0RXJyb3I7XG52YXIgSHR0cENsaWVudF8xID0gcmVxdWlyZShcIi4vSHR0cENsaWVudFwiKTtcbmV4cG9ydHMuSHR0cENsaWVudCA9IEh0dHBDbGllbnRfMS5IdHRwQ2xpZW50O1xuZXhwb3J0cy5IdHRwUmVzcG9uc2UgPSBIdHRwQ2xpZW50XzEuSHR0cFJlc3BvbnNlO1xudmFyIERlZmF1bHRIdHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9EZWZhdWx0SHR0cENsaWVudFwiKTtcbmV4cG9ydHMuRGVmYXVsdEh0dHBDbGllbnQgPSBEZWZhdWx0SHR0cENsaWVudF8xLkRlZmF1bHRIdHRwQ2xpZW50O1xudmFyIEh1YkNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0h1YkNvbm5lY3Rpb25cIik7XG5leHBvcnRzLkh1YkNvbm5lY3Rpb24gPSBIdWJDb25uZWN0aW9uXzEuSHViQ29ubmVjdGlvbjtcbmV4cG9ydHMuSHViQ29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvbl8xLkh1YkNvbm5lY3Rpb25TdGF0ZTtcbnZhciBIdWJDb25uZWN0aW9uQnVpbGRlcl8xID0gcmVxdWlyZShcIi4vSHViQ29ubmVjdGlvbkJ1aWxkZXJcIik7XG5leHBvcnRzLkh1YkNvbm5lY3Rpb25CdWlsZGVyID0gSHViQ29ubmVjdGlvbkJ1aWxkZXJfMS5IdWJDb25uZWN0aW9uQnVpbGRlcjtcbnZhciBJSHViUHJvdG9jb2xfMSA9IHJlcXVpcmUoXCIuL0lIdWJQcm90b2NvbFwiKTtcbmV4cG9ydHMuTWVzc2FnZVR5cGUgPSBJSHViUHJvdG9jb2xfMS5NZXNzYWdlVHlwZTtcbnZhciBJTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9JTG9nZ2VyXCIpO1xuZXhwb3J0cy5Mb2dMZXZlbCA9IElMb2dnZXJfMS5Mb2dMZXZlbDtcbnZhciBJVHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9JVHJhbnNwb3J0XCIpO1xuZXhwb3J0cy5IdHRwVHJhbnNwb3J0VHlwZSA9IElUcmFuc3BvcnRfMS5IdHRwVHJhbnNwb3J0VHlwZTtcbmV4cG9ydHMuVHJhbnNmZXJGb3JtYXQgPSBJVHJhbnNwb3J0XzEuVHJhbnNmZXJGb3JtYXQ7XG52YXIgTG9nZ2Vyc18xID0gcmVxdWlyZShcIi4vTG9nZ2Vyc1wiKTtcbmV4cG9ydHMuTnVsbExvZ2dlciA9IExvZ2dlcnNfMS5OdWxsTG9nZ2VyO1xudmFyIEpzb25IdWJQcm90b2NvbF8xID0gcmVxdWlyZShcIi4vSnNvbkh1YlByb3RvY29sXCIpO1xuZXhwb3J0cy5Kc29uSHViUHJvdG9jb2wgPSBKc29uSHViUHJvdG9jb2xfMS5Kc29uSHViUHJvdG9jb2w7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4vU3ViamVjdFwiKTtcbmV4cG9ydHMuU3ViamVjdCA9IFN1YmplY3RfMS5TdWJqZWN0O1xudmFyIFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbmV4cG9ydHMuVkVSU0lPTiA9IFV0aWxzXzEuVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcQG1pY3Jvc29mdFxcXFxzaWduYWxyXFxcXGRpc3RcXFxcY2pzXFxcXGluZGV4LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXEBtaWNyb3NvZnRcXFxcc2lnbmFsclxcXFxkaXN0XFxcXGNqc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxiYXNlNjQtanNcXFxcbGliXFxcXGI2NC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxiYXNlNjQtanNcXFxcbGliXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MlxuXG4vKipcbiAqIElmIGBCdWZmZXIuX3VzZVR5cGVkQXJyYXlzYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKGNvbXBhdGlibGUgZG93biB0byBJRTYpXG4gKi9cbkJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBEZXRlY3QgaWYgYnJvd3NlciBzdXBwb3J0cyBUeXBlZCBBcnJheXMuIFN1cHBvcnRlZCBicm93c2VycyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLFxuICAvLyBDaHJvbWUgNyssIFNhZmFyaSA1LjErLCBPcGVyYSAxMS42KywgaU9TIDQuMisuIElmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYWRkaW5nXG4gIC8vIHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcywgdGhlbiB0aGF0J3MgdGhlIHNhbWUgYXMgbm8gYFVpbnQ4QXJyYXlgIHN1cHBvcnRcbiAgLy8gYmVjYXVzZSB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gYWRkIGFsbCB0aGUgbm9kZSBCdWZmZXIgQVBJIG1ldGhvZHMuIFRoaXMgaXMgYW4gaXNzdWVcbiAgLy8gaW4gRmlyZWZveCA0LTI5LiBOb3cgZml4ZWQ6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOFxuICB0cnkge1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMClcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGFyci5mb28gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gICAgcmV0dXJuIDQyID09PSBhcnIuZm9vKCkgJiZcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAvLyBDaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgdHlwZSA9IHR5cGVvZiBzdWJqZWN0XG5cbiAgLy8gV29ya2Fyb3VuZDogbm9kZSdzIGJhc2U2NCBpbXBsZW1lbnRhdGlvbiBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgc3RyaW5nc1xuICAvLyB3aGlsZSBiYXNlNjQtanMgZG9lcyBub3QuXG4gIGlmIChlbmNvZGluZyA9PT0gJ2Jhc2U2NCcgJiYgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzdWJqZWN0ID0gc3RyaW5ndHJpbShzdWJqZWN0KVxuICAgIHdoaWxlIChzdWJqZWN0Lmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0ICsgJz0nXG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGhcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgIGxlbmd0aCA9IGNvZXJjZShzdWJqZWN0KVxuICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJylcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpXG4gICAgbGVuZ3RoID0gY29lcmNlKHN1YmplY3QubGVuZ3RoKSAvLyBhc3N1bWUgdGhhdCBvYmplY3QgaXMgYXJyYXktbGlrZVxuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBhIG51bWJlciwgYXJyYXkgb3Igc3RyaW5nLicpXG5cbiAgdmFyIGJ1ZlxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgIC8vIFByZWZlcnJlZDogUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICBidWYgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXNcbiAgICBidWYubGVuZ3RoID0gbGVuZ3RoXG4gICAgYnVmLl9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzICYmIHR5cGVvZiBzdWJqZWN0LmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gU3BlZWQgb3B0aW1pemF0aW9uIC0tIHVzZSBzZXQgaWYgd2UncmUgY29weWluZyBmcm9tIGEgdHlwZWQgYXJyYXlcbiAgICBidWYuX3NldChzdWJqZWN0KVxuICB9IGVsc2UgaWYgKGlzQXJyYXlpc2goc3ViamVjdCkpIHtcbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXlcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkpXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3QucmVhZFVJbnQ4KGkpXG4gICAgICBlbHNlXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3RbaV1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBidWYud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJiYgIW5vWmVybykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmW2ldID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuLy8gU1RBVElDIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiAoYikge1xuICByZXR1cm4gISEoYiAhPT0gbnVsbCAmJiBiICE9PSB1bmRlZmluZWQgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gKHN0ciwgZW5jb2RpbmcpIHtcbiAgdmFyIHJldFxuICBzdHIgPSBzdHIgKyAnJ1xuICBzd2l0Y2ggKGVuY29kaW5nIHx8ICd1dGY4Jykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoIC8gMlxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdyYXcnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAqIDJcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGFzc2VydChpc0FycmF5KGxpc3QpLCAnVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdCwgW3RvdGFsTGVuZ3RoXSlcXG4nICtcbiAgICAgICdsaXN0IHNob3VsZCBiZSBhbiBBcnJheS4nKVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gIH0gZWxzZSBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGlzdFswXVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB0b3RhbExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICB0b3RhbExlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdG90YWxMZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpXG4gICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG4vLyBCVUZGRVIgSU5TVEFOQ0UgTUVUSE9EU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gX2hleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgYXNzZXJ0KHN0ckxlbiAlIDIgPT09IDAsICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBhc3NlcnQoIWlzTmFOKGJ5dGUpLCAnSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPSBpICogMlxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBfdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2FzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2JpbmFyeVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIF9hc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBfdXRmMTZsZVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcbiAgc3RhcnQgPSBOdW1iZXIoc3RhcnQpIHx8IDBcbiAgZW5kID0gKGVuZCAhPT0gdW5kZWZpbmVkKVxuICAgID8gTnVtYmVyKGVuZClcbiAgICA6IGVuZCA9IHNlbGYubGVuZ3RoXG5cbiAgLy8gRmFzdHBhdGggZW1wdHkgc3RyaW5nc1xuICBpZiAoZW5kID09PSBzdGFydClcbiAgICByZXR1cm4gJydcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpU2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzXG5cbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpXG4gIGFzc2VydCh0YXJnZXRfc3RhcnQgPj0gMCAmJiB0YXJnZXRfc3RhcnQgPCB0YXJnZXQubGVuZ3RoLFxuICAgICAgJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHNvdXJjZS5sZW5ndGgsICdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSBzb3VyY2UubGVuZ3RoLCAnc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aClcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCA8IGVuZCAtIHN0YXJ0KVxuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgKyBzdGFydFxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmIChsZW4gPCAxMDAgfHwgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRfc3RhcnQpXG4gIH1cbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJlcyA9ICcnXG4gIHZhciB0bXAgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoYnVmW2ldIDw9IDB4N0YpIHtcbiAgICAgIHJlcyArPSBkZWNvZGVVdGY4Q2hhcih0bXApICsgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gICAgICB0bXAgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgKz0gJyUnICsgYnVmW2ldLnRvU3RyaW5nKDE2KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXMgKyBkZWNvZGVVdGY4Q2hhcih0bXApXG59XG5cbmZ1bmN0aW9uIF9hc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gX2JpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIF9hc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZClcbn1cblxuZnVuY3Rpb24gX2hleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSsxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSBjbGFtcChzdGFydCwgbGVuLCAwKVxuICBlbmQgPSBjbGFtcChlbmQsIGxlbiwgbGVuKVxuXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgdmFyIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgICByZXR1cm4gbmV3QnVmXG4gIH1cbn1cblxuLy8gYGdldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMucmVhZFVJbnQ4KG9mZnNldClcbn1cblxuLy8gYHNldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMud3JpdGVVSW50OCh2LCBvZmZzZXQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbmZ1bmN0aW9uIF9yZWFkVUludDE2IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbFxuICBpZiAobGl0dGxlRW5kaWFuKSB7XG4gICAgdmFsID0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV0gPDwgOFxuICB9IGVsc2Uge1xuICAgIHZhbCA9IGJ1ZltvZmZzZXRdIDw8IDhcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV1cbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZFVJbnQzMiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWxcbiAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgIGlmIChvZmZzZXQgKyAyIDwgbGVuKVxuICAgICAgdmFsID0gYnVmW29mZnNldCArIDJdIDw8IDE2XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDhcbiAgICB2YWwgfD0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMyA8IGxlbilcbiAgICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0ICsgM10gPDwgMjQgPj4+IDApXG4gIH0gZWxzZSB7XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgPSBidWZbb2Zmc2V0ICsgMV0gPDwgMTZcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMl0gPDwgOFxuICAgIGlmIChvZmZzZXQgKyAzIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAzXVxuICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0XSA8PCAyNCA+Pj4gMClcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICB2YXIgbmVnID0gdGhpc1tvZmZzZXRdICYgMHg4MFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTFcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuZnVuY3Rpb24gX3JlYWRJbnQxNiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWwgPSBfcmVhZFVJbnQxNihidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCB0cnVlKVxuICB2YXIgbmVnID0gdmFsICYgMHg4MDAwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkSW50MzIgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsID0gX3JlYWRVSW50MzIoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSlcbiAgdmFyIG5lZyA9IHZhbCAmIDB4ODAwMDAwMDBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmZmZmZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MzIodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkRmxvYXQgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEZsb2F0KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRGbG9hdCh0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWREb3VibGUgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDcgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aCkgcmV0dXJuXG5cbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZilcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4obGVuIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9XG4gICAgICAgICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAgICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZmZmZmYpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2YsIC0weDgwKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICB0aGlzLndyaXRlVUludDgodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICB0aGlzLndyaXRlVUludDgoMHhmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmLCAtMHg4MDAwKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgX3dyaXRlVUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbiAgZWxzZVxuICAgIF93cml0ZVVJbnQxNihidWYsIDB4ZmZmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIF93cml0ZVVJbnQzMihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICBfd3JpdGVVSW50MzIoYnVmLCAweGZmZmZmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyA3IDwgYnVmLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApXG4gIH1cblxuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpLCAndmFsdWUgaXMgbm90IGEgbnVtYmVyJylcbiAgYXNzZXJ0KGVuZCA+PSBzdGFydCwgJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGFzc2VydChzdGFydCA+PSAwICYmIHN0YXJ0IDwgdGhpcy5sZW5ndGgsICdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSB0aGlzLmxlbmd0aCwgJ2VuZCBvdXQgb2YgYm91bmRzJylcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHRoaXNbaV0gPSB2YWx1ZVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG91dCA9IFtdXG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gdG9IZXgodGhpc1tpXSlcbiAgICBpZiAoaSA9PT0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUykge1xuICAgICAgb3V0W2kgKyAxXSA9ICcuLi4nXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIG91dC5qb2luKCcgJykgKyAnPidcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICAgIHJldHVybiAobmV3IEJ1ZmZlcih0aGlzKSkuYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzLmxlbmd0aClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpXG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyLnRvQXJyYXlCdWZmZXIgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKVxuICB9XG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxudmFyIEJQID0gQnVmZmVyLnByb3RvdHlwZVxuXG4vKipcbiAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcbiAqL1xuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX2lzQnVmZmVyID0gdHJ1ZVxuXG4gIC8vIHNhdmUgcmVmZXJlbmNlIHRvIG9yaWdpbmFsIFVpbnQ4QXJyYXkgZ2V0L3NldCBtZXRob2RzIGJlZm9yZSBvdmVyd3JpdGluZ1xuICBhcnIuX2dldCA9IGFyci5nZXRcbiAgYXJyLl9zZXQgPSBhcnIuc2V0XG5cbiAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIGluIG5vZGUgMC4xMytcbiAgYXJyLmdldCA9IEJQLmdldFxuICBhcnIuc2V0ID0gQlAuc2V0XG5cbiAgYXJyLndyaXRlID0gQlAud3JpdGVcbiAgYXJyLnRvU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvTG9jYWxlU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvSlNPTiA9IEJQLnRvSlNPTlxuICBhcnIuY29weSA9IEJQLmNvcHlcbiAgYXJyLnNsaWNlID0gQlAuc2xpY2VcbiAgYXJyLnJlYWRVSW50OCA9IEJQLnJlYWRVSW50OFxuICBhcnIucmVhZFVJbnQxNkxFID0gQlAucmVhZFVJbnQxNkxFXG4gIGFyci5yZWFkVUludDE2QkUgPSBCUC5yZWFkVUludDE2QkVcbiAgYXJyLnJlYWRVSW50MzJMRSA9IEJQLnJlYWRVSW50MzJMRVxuICBhcnIucmVhZFVJbnQzMkJFID0gQlAucmVhZFVJbnQzMkJFXG4gIGFyci5yZWFkSW50OCA9IEJQLnJlYWRJbnQ4XG4gIGFyci5yZWFkSW50MTZMRSA9IEJQLnJlYWRJbnQxNkxFXG4gIGFyci5yZWFkSW50MTZCRSA9IEJQLnJlYWRJbnQxNkJFXG4gIGFyci5yZWFkSW50MzJMRSA9IEJQLnJlYWRJbnQzMkxFXG4gIGFyci5yZWFkSW50MzJCRSA9IEJQLnJlYWRJbnQzMkJFXG4gIGFyci5yZWFkRmxvYXRMRSA9IEJQLnJlYWRGbG9hdExFXG4gIGFyci5yZWFkRmxvYXRCRSA9IEJQLnJlYWRGbG9hdEJFXG4gIGFyci5yZWFkRG91YmxlTEUgPSBCUC5yZWFkRG91YmxlTEVcbiAgYXJyLnJlYWREb3VibGVCRSA9IEJQLnJlYWREb3VibGVCRVxuICBhcnIud3JpdGVVSW50OCA9IEJQLndyaXRlVUludDhcbiAgYXJyLndyaXRlVUludDE2TEUgPSBCUC53cml0ZVVJbnQxNkxFXG4gIGFyci53cml0ZVVJbnQxNkJFID0gQlAud3JpdGVVSW50MTZCRVxuICBhcnIud3JpdGVVSW50MzJMRSA9IEJQLndyaXRlVUludDMyTEVcbiAgYXJyLndyaXRlVUludDMyQkUgPSBCUC53cml0ZVVJbnQzMkJFXG4gIGFyci53cml0ZUludDggPSBCUC53cml0ZUludDhcbiAgYXJyLndyaXRlSW50MTZMRSA9IEJQLndyaXRlSW50MTZMRVxuICBhcnIud3JpdGVJbnQxNkJFID0gQlAud3JpdGVJbnQxNkJFXG4gIGFyci53cml0ZUludDMyTEUgPSBCUC53cml0ZUludDMyTEVcbiAgYXJyLndyaXRlSW50MzJCRSA9IEJQLndyaXRlSW50MzJCRVxuICBhcnIud3JpdGVGbG9hdExFID0gQlAud3JpdGVGbG9hdExFXG4gIGFyci53cml0ZUZsb2F0QkUgPSBCUC53cml0ZUZsb2F0QkVcbiAgYXJyLndyaXRlRG91YmxlTEUgPSBCUC53cml0ZURvdWJsZUxFXG4gIGFyci53cml0ZURvdWJsZUJFID0gQlAud3JpdGVEb3VibGVCRVxuICBhcnIuZmlsbCA9IEJQLmZpbGxcbiAgYXJyLmluc3BlY3QgPSBCUC5pbnNwZWN0XG4gIGFyci50b0FycmF5QnVmZmVyID0gQlAudG9BcnJheUJ1ZmZlclxuXG4gIHJldHVybiBhcnJcbn1cblxuLy8gc2xpY2Uoc3RhcnQsIGVuZClcbmZ1bmN0aW9uIGNsYW1wIChpbmRleCwgbGVuLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgaW5kZXggPSB+fmluZGV4OyAgLy8gQ29lcmNlIHRvIGludGVnZXIuXG4gIGlmIChpbmRleCA+PSBsZW4pIHJldHVybiBsZW5cbiAgaWYgKGluZGV4ID49IDApIHJldHVybiBpbmRleFxuICBpbmRleCArPSBsZW5cbiAgaWYgKGluZGV4ID49IDApIHJldHVybiBpbmRleFxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiBjb2VyY2UgKGxlbmd0aCkge1xuICAvLyBDb2VyY2UgbGVuZ3RoIHRvIGEgbnVtYmVyIChwb3NzaWJseSBOYU4pLCByb3VuZCB1cFxuICAvLyBpbiBjYXNlIGl0J3MgZnJhY3Rpb25hbCAoZS5nLiAxMjMuNDU2KSB0aGVuIGRvIGFcbiAgLy8gZG91YmxlIG5lZ2F0ZSB0byBjb2VyY2UgYSBOYU4gdG8gMC4gRWFzeSwgcmlnaHQ/XG4gIGxlbmd0aCA9IH5+TWF0aC5jZWlsKCtsZW5ndGgpXG4gIHJldHVybiBsZW5ndGggPCAwID8gMCA6IGxlbmd0aFxufVxuXG5mdW5jdGlvbiBpc0FycmF5IChzdWJqZWN0KSB7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ViamVjdCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgfSkoc3ViamVjdClcbn1cblxuZnVuY3Rpb24gaXNBcnJheWlzaCAoc3ViamVjdCkge1xuICByZXR1cm4gaXNBcnJheShzdWJqZWN0KSB8fCBCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkgfHxcbiAgICAgIHN1YmplY3QgJiYgdHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2Ygc3ViamVjdC5sZW5ndGggPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYiA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGIgPD0gMHg3RilcbiAgICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHN0YXJ0ID0gaVxuICAgICAgaWYgKGIgPj0gMHhEODAwICYmIGIgPD0gMHhERkZGKSBpKytcbiAgICAgIHZhciBoID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5zbGljZShzdGFydCwgaSsxKSkuc3Vic3RyKDEpLnNwbGl0KCclJylcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaC5sZW5ndGg7IGorKylcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gocGFyc2VJbnQoaFtqXSwgMTYpKVxuICAgIH1cbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShzdHIpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgcG9zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyIChzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSAvLyBVVEYgOCBpbnZhbGlkIGNoYXJcbiAgfVxufVxuXG4vKlxuICogV2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYSB2YWxpZCBpbnRlZ2VyLiBUaGlzIG1lYW5zIHRoYXQgaXRcbiAqIGlzIG5vbi1uZWdhdGl2ZS4gSXQgaGFzIG5vIGZyYWN0aW9uYWwgY29tcG9uZW50IGFuZCB0aGF0IGl0IGRvZXMgbm90XG4gKiBleGNlZWQgdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gdmVyaWZ1aW50ICh2YWx1ZSwgbWF4KSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA+PSAwLCAnc3BlY2lmaWVkIGEgbmVnYXRpdmUgdmFsdWUgZm9yIHdyaXRpbmcgYW4gdW5zaWduZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgaXMgbGFyZ2VyIHRoYW4gbWF4aW11bSB2YWx1ZSBmb3IgdHlwZScpXG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpXG59XG5cbmZ1bmN0aW9uIHZlcmlmc2ludCAodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBsYXJnZXIgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPj0gbWluLCAndmFsdWUgc21hbGxlciB0aGFuIG1pbmltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpXG59XG5cbmZ1bmN0aW9uIHZlcmlmSUVFRTc1NCAodmFsdWUsIG1heCwgbWluKSB7XG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLCAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBsYXJnZXIgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQodmFsdWUgPj0gbWluLCAndmFsdWUgc21hbGxlciB0aGFuIG1pbmltdW0gYWxsb3dlZCB2YWx1ZScpXG59XG5cbmZ1bmN0aW9uIGFzc2VydCAodGVzdCwgbWVzc2FnZSkge1xuICBpZiAoIXRlc3QpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdGYWlsZWQgYXNzZXJ0aW9uJylcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcYnVmZmVyXFxcXGluZGV4LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGJ1ZmZlclwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcaWVlZTc1NFxcXFxpbmRleC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxpZWVlNzU0XCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXHByb2Nlc3NcXFxcYnJvd3Nlci5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxwcm9jZXNzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Bc2tEaWFsb2cgPSBleHBvcnRzLkFza0RpYWxvZ1Byb3BzID0gdm9pZCAwO1xyXG52YXIgcmFuZG9tXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9yYW5kb21cIik7XHJcbnZhciBBc2tEaWFsb2dQcm9wcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFza0RpYWxvZ1Byb3BzKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFza0RpYWxvZ1Byb3BzO1xyXG59KCkpO1xyXG5leHBvcnRzLkFza0RpYWxvZ1Byb3BzID0gQXNrRGlhbG9nUHJvcHM7XHJcbnZhciBBc2tEaWFsb2cgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBc2tEaWFsb2cocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICB9XHJcbiAgICBBc2tEaWFsb2cucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYWxsb3dCdXR0b25JZCA9IFwiYWxsb3ctXCIgKyByYW5kb21fMS5yYW5kb21TZXNzb25JZCgpO1xyXG4gICAgICAgIHZhciBkZW55QnV0dG9uSWQgPSBcImRlbnktXCIgKyByYW5kb21fMS5yYW5kb21TZXNzb25JZCgpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5wcm9wcy5tZXNzYWdlICsgXCJcXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgaWQ9XFxcIlwiICsgYWxsb3dCdXR0b25JZCArIFwiXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbVxcXCI+QWNjZXB0PC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcIiNcXFwiIGlkPVxcXCJcIiArIGRlbnlCdXR0b25JZCArIFwiXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbVxcXCI+RGVueTwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvcD5cIjtcclxuICAgICAgICAkLnRvYXN0KHtcclxuICAgICAgICAgICAgaGVhZGluZzogdGhpcy5wcm9wcy50aXRsZSxcclxuICAgICAgICAgICAgdGV4dDogY29udGVudCxcclxuICAgICAgICAgICAgc2hvd0hpZGVUcmFuc2l0aW9uOiAnc2xpZGUnLFxyXG4gICAgICAgICAgICBoaWRlQWZ0ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBiZ0NvbG9yOiB0aGlzLnByb3BzLmlzV2FybmluZyA/IFwiIzgwMDAwMFwiIDogXCIjMTY0MTU3XCIsXHJcbiAgICAgICAgICAgIGljb246IHRoaXMucHJvcHMuaWNvbixcclxuICAgICAgICAgICAgc3RhY2s6IDUsXHJcbiAgICAgICAgICAgIGxvYWRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIGFmdGVyU2hvd246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFsbG93QnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFsbG93QnV0dG9uSWQpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZGVueUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZW55QnV0dG9uSWQpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdCA9ICQoX3RoaXMuYWxsb3dCdXR0b25FbGVtZW50KS5jbG9zZXN0KFwiLmpxLXRvYXN0LXNpbmdsZVwiKVswXTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmF0dGFjaEhhbmRsZXJzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBc2tEaWFsb2cucHJvdG90eXBlLmF0dGFjaEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hbGxvd0J1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuYWxsb3dDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuYWxsb3dDYWxsYmFjayhfdGhpcy5wcm9wcy5wYXJhbSk7XHJcbiAgICAgICAgICAgIChfdGhpcy5yb290KS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRlbnlCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLnByb3BzLmRlbnlDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5kZW55Q2FsbGJhY2soX3RoaXMucHJvcHMucGFyYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoX3RoaXMucm9vdCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFza0RpYWxvZztcclxufSgpKTtcclxuZXhwb3J0cy5Bc2tEaWFsb2cgPSBBc2tEaWFsb2c7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFza0RpYWxvZy5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxBc2tEaWFsb2cuanNcIixcIi9jb21wb25lbnRzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkNoYXR0aW5nV2lkZ2V0ID0gZXhwb3J0cy5DaGF0dGluZ1BhbmVsUHJvcHMgPSB2b2lkIDA7XHJcbnZhciBGaWxlUmVjZWl2ZXJfMSA9IHJlcXVpcmUoXCIuLi9maWxlL0ZpbGVSZWNlaXZlclwiKTtcclxudmFyIEZpbGVTZW5kZXJfMSA9IHJlcXVpcmUoXCIuLi9maWxlL0ZpbGVTZW5kZXJcIik7XHJcbnZhciByYW5kb21fMSA9IHJlcXVpcmUoXCIuLi91dGlsL3JhbmRvbVwiKTtcclxudmFyIHNuaXBwZXRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3NuaXBwZXRcIik7XHJcbnZhciBUaW1lVXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWwvVGltZVV0aWxcIik7XHJcbnZhciBDaGF0dGluZ1BhbmVsUHJvcHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDaGF0dGluZ1BhbmVsUHJvcHMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ2hhdHRpbmdQYW5lbFByb3BzO1xyXG59KCkpO1xyXG5leHBvcnRzLkNoYXR0aW5nUGFuZWxQcm9wcyA9IENoYXR0aW5nUGFuZWxQcm9wcztcclxudmFyIENoYXR0aW5nV2lkZ2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hhdHRpbmdXaWRnZXQoKSB7XHJcbiAgICAgICAgdGhpcy51bnJlYWRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1ByaXZhdGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5hbWVDb2xvcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnJlbWFpbkNvbG9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmlsZVNlbmRpbmdQb29sID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuZmlsZVJlY2VpdmluZ1Bvb2wgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgICAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNpZGVUb29sYmFyQ29udGFpbmVyXCIpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoYXQtY2xvc2UtYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2hhdC1pbnB1dCAjdXNlcm1zZ1wiKTtcclxuICAgICAgICB0aGlzLnNlbmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlbmQtYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuZmlsZXNlbmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZpbGUtc2hhcmUtYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuZmlsZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbGUtc2VsZWN0b3JcIik7XHJcbiAgICAgICAgdGhpcy5maWxlU2VuZGluZ1BhbmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWxlLXNlbmRpbmdcIik7XHJcbiAgICAgICAgdGhpcy5wcml2YXRlUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NoYXQtcmVjaXBpZW50XCIpO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUxhYmVsRWxlbWVudCA9ICQodGhpcy5wcml2YXRlUGFuZWwpLmZpbmQoXCI+c3BhblwiKVswXTtcclxuICAgICAgICB0aGlzLnByaXZhdGVDbG9zZUVsZW1lbnQgPSAkKHRoaXMucHJpdmF0ZVBhbmVsKS5maW5kKFwiPmRpdlwiKVswXTtcclxuICAgICAgICB0aGlzLm5hbWVDb2xvcnMucHVzaChcIiMwMGJmZmZcIik7IC8vZGVlcHNreWJsdWVcclxuICAgICAgICB0aGlzLm5hbWVDb2xvcnMucHVzaChcIiM5YWNkMzJcIik7IC8veWVsbG93Z3JlZW5cclxuICAgICAgICB0aGlzLm5hbWVDb2xvcnMucHVzaChcIiNkMjY5MWVcIik7IC8vY2hvY29sYXRlXHJcbiAgICAgICAgdGhpcy5uYW1lQ29sb3JzLnB1c2goXCIjZWU4MmVlXCIpOyAvL3Zpb2xldFxyXG4gICAgICAgIHRoaXMubmFtZUNvbG9ycy5wdXNoKFwiIzY0OTVlZFwiKTsgLy9jb3JuZmxvd2VyYmx1ZVxyXG4gICAgICAgIHRoaXMubmFtZUNvbG9ycy5wdXNoKFwiI2ZmZDcwMFwiKTsgLy9nb2xkXHJcbiAgICAgICAgdGhpcy5uYW1lQ29sb3JzLnB1c2goXCIjODA4MDAwXCIpOyAvL29saXZlXHJcbiAgICAgICAgdGhpcy5uYW1lQ29sb3JzLnB1c2goXCIjY2Q4NTNmXCIpOyAvL3BlcnVcclxuICAgICAgICB0aGlzLnJlbWFpbkNvbG9ycyA9IF9fc3ByZWFkQXJyYXkoW10sIHRoaXMubmFtZUNvbG9ycyk7XHJcbiAgICAgICAgdGhpcy5uYW1lQ29sb3JNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hFdmVudEhhbmRsZXJzKCk7XHJcbiAgICAgICAgdGhpcy5vcGVuKHRoaXMub3BlbmVkKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuYXR0YWNoRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgJCh0aGlzLmNsb3NlQnV0dG9uKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEub3BlbihmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLmlucHV0RmllbGQpLmtleXByZXNzKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgoZS5rZXlDb2RlIHx8IGUud2hpY2gpID09IDEzKSB7IC8vRW50ZXIga2V5Y29kZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzXzEub25TZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMuc2VuZEJ1dHRvbikub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpc18xLm9uU2VuZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJChcIi5zbWlsZXlDb250YWluZXJcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaWQgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKTtcclxuICAgICAgICAgICAgdmFyIGltb25hbWUgPSBfdGhpcy5pZFRvRW1vbmFtZShpZCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGltb25hbWUpO1xyXG4gICAgICAgICAgICB2YXIgc2VuZGVsID0gJChcIiN1c2VybXNnXCIpO1xyXG4gICAgICAgICAgICB2YXIgc21zID0gc2VuZGVsLnZhbCgpO1xyXG4gICAgICAgICAgICBzbXMgKz0gaW1vbmFtZTtcclxuICAgICAgICAgICAgc2VuZGVsLnZhbChzbXMpO1xyXG4gICAgICAgICAgICAvL3ZhciBlbCA9ICQoXCIuc21pbGV5cy1wYW5lbFwiKTtcclxuICAgICAgICAgICAgLy9lbC5yZW1vdmVDbGFzcyhcInNob3ctc21pbGV5c1wiKTtcclxuICAgICAgICAgICAgLy9lbC5hZGRDbGFzcyhcImhpZGUtc21pbGV5c1wiKTtcclxuICAgICAgICAgICAgc2VuZGVsLmZvY3VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChcIiNzbWlsZXlzXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJChcIi5zbWlsZXlzLXBhbmVsXCIpO1xyXG4gICAgICAgICAgICBpZiAoZWwuaGFzQ2xhc3MoXCJoaWRlLXNtaWxleXNcIikpIHtcclxuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUNsYXNzKFwiaGlkZS1zbWlsZXlzXCIpO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkQ2xhc3MoXCJzaG93LXNtaWxleXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVDbGFzcyhcInNob3ctc21pbGV5c1wiKTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZENsYXNzKFwiaGlkZS1zbWlsZXlzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnByaXZhdGVDbG9zZUVsZW1lbnQpLmNsaWNrKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEuY2xlYXJQcml2YXRlU3RhdGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMuZmlsZXNlbmRCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICQoX3RoaXNfMS5maWxlRWxlbWVudCkuY2xpY2soKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMuZmlsZUVsZW1lbnQpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEuc2VuZEZpbGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcGVuZWQpIHtcclxuICAgICAgICBpZiAob3BlbmVkKSB7XHJcbiAgICAgICAgICAgICQoXCIjdmlkZW8tcGFuZWxcIikuYWRkQ2xhc3MoXCJzaGlmdC1yaWdodFwiKTtcclxuICAgICAgICAgICAgJChcIiNuZXctdG9vbGJveFwiKS5hZGRDbGFzcyhcInNoaWZ0LXJpZ2h0XCIpO1xyXG4gICAgICAgICAgICAkKHRoaXMucm9vdCkucmVtb3ZlQ2xhc3MoXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgICAgICQodGhpcy5pbnB1dEZpZWxkKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAvLyQoXCIudG9vbGJveC1pY29uXCIsIHRoaXMucHJvcHMuY2hhdE9wZW5CdXR0b24pLmFkZENsYXNzKFwidG9nZ2xlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICQoXCIjdmlkZW8tcGFuZWxcIikucmVtb3ZlQ2xhc3MoXCJzaGlmdC1yaWdodFwiKTtcclxuICAgICAgICAgICAgJChcIiNuZXctdG9vbGJveFwiKS5yZW1vdmVDbGFzcyhcInNoaWZ0LXJpZ2h0XCIpO1xyXG4gICAgICAgICAgICAkKHRoaXMucm9vdCkuYWRkQ2xhc3MoXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgICAgIC8vJChcIi50b29sYm94LWljb25cIiwgdGhpcy5wcm9wcy5jaGF0T3BlbkJ1dHRvbikucmVtb3ZlQ2xhc3MoXCJ0b2dnbGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVucmVhZENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnByb3BzLnNob3dVbnJlYWRCYWRnZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5vcGVuZWQgPSBvcGVuZWQ7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vcGVuQ2FsbGJhY2soKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuY2xlYXJJbnB1dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMuaW5wdXRGaWVsZCkudmFsKCcnKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUudG9nZ2xlT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm9wZW5lZCA9ICF0aGlzLm9wZW5lZDtcclxuICAgICAgICB0aGlzLm9wZW4odGhpcy5vcGVuZWQpO1xyXG4gICAgfTtcclxuICAgIENoYXR0aW5nV2lkZ2V0LnByb3RvdHlwZS5vblNlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1zZyA9ICQodGhpcy5pbnB1dEZpZWxkKS52YWwoKS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICB0aGlzLmNsZWFySW5wdXQoKTtcclxuICAgICAgICBpZiAoIW1zZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIG1zZyA9IHRoaXMuZW1vbmFtZVRvRW1vaWNvbihtc2cpO1xyXG4gICAgICAgIHZhciB0aW1lID0gVGltZVV0aWxfMS5nZXRDdXJUaW1lKCk7XHJcbiAgICAgICAgdmFyIHByaXZhdGVDbGFzcyA9IHRoaXMuaXNQcml2YXRlID8gXCJwcml2YXRlXCIgOiBcIlwiO1xyXG4gICAgICAgIHZhciBwcml2YXRlRGV0YWlsID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5pc1ByaXZhdGUpIHtcclxuICAgICAgICAgICAgcHJpdmF0ZURldGFpbCA9IFwiPGRpdiBzdHlsZT1cXFwiY29sb3I6Izc3ODg5OVxcXCI+cHJpdmF0ZTogXCIgKyB0aGlzLnByaXZhdGVTZW5kZXJOYW1lICsgXCI8L2Rpdj5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVsID0gJChcIi5zbWlsZXlzLXBhbmVsXCIpO1xyXG4gICAgICAgIGVsLnJlbW92ZUNsYXNzKFwic2hvdy1zbWlsZXlzXCIpO1xyXG4gICAgICAgIGVsLmFkZENsYXNzKFwiaGlkZS1zbWlsZXlzXCIpO1xyXG4gICAgICAgIHZhciBzZWwgPSAkKFwiI2NoYXRjb252ZXJzYXRpb24gZGl2LmNoYXQtbWVzc2FnZS1ncm91cDpsYXN0LWNoaWxkXCIpO1xyXG4gICAgICAgIGlmIChzZWwuaGFzQ2xhc3MoXCJsb2NhbFwiKSkge1xyXG4gICAgICAgICAgICBzZWwuZmluZChcIi50aW1lc3RhbXBcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHNlbC5hcHBlbmQoXCI8ZGl2IGNsYXNzPSBcXFwiY2hhdG1lc3NhZ2Utd3JhcHBlclxcXCIgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGF0bWVzc2FnZSBcIiArIHByaXZhdGVDbGFzcyArIFwiXFxcIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInJlcGx5d3JhcHBlclxcXCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWVzc2FnZWNvbnRlbnRcXFwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1c2VybWVzc2FnZVxcXCI+IFwiICsgbXNnICsgXCIgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiICsgcHJpdmF0ZURldGFpbCArIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInRpbWVzdGFtcFxcXCI+IFwiICsgdGltZSArIFwiIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2ID5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkKFwiI2NoYXRjb252ZXJzYXRpb25cIikuYXBwZW5kKFwiPGRpdiBjbGFzcz1cXFwiY2hhdC1tZXNzYWdlLWdyb3VwIGxvY2FsXFxcIj4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSBcXFwiY2hhdG1lc3NhZ2Utd3JhcHBlclxcXCIgPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNoYXRtZXNzYWdlIFwiICsgcHJpdmF0ZUNsYXNzICsgXCJcXFwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyZXBseXdyYXBwZXJcXFwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWVzc2FnZWNvbnRlbnRcXFwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVzZXJtZXNzYWdlXFxcIj4gXCIgKyBtc2cgKyBcIiA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiArIHByaXZhdGVEZXRhaWwgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInRpbWVzdGFtcFxcXCI+IFwiICsgdGltZSArIFwiIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXYgPiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcclxuICAgICAgICBpZiAodGhpcy5pc1ByaXZhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZW5kUHJpdmF0ZUNoYXQodGhpcy5wcml2YXRlU2VuZGVySWQsIG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNlbmRDaGF0KG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vY2hhdFxyXG4gICAgQ2hhdHRpbmdXaWRnZXQucHJvdG90eXBlLnJlY2VpdmVNZXNzYWdlID0gZnVuY3Rpb24gKGlkLCB1c2VybmFtZSwgbWVzc2FnZSwgaXNQcml2YXRlKSB7XHJcbiAgICAgICAgaWYgKGlzUHJpdmF0ZSA9PT0gdm9pZCAwKSB7IGlzUHJpdmF0ZSA9IGZhbHNlOyB9XHJcbiAgICAgICAgLy91cGRhdGUgdW5yZWFkIGNvdW50XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wZW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVucmVhZENvdW50Kys7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0VW5yZWFkQ291bnQodGhpcy51bnJlYWRDb3VudCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2hvd1VucmVhZEJhZGdlKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3VwZGF0ZSB1aVxyXG4gICAgICAgIHZhciBlbW9NZXNzYWdlID0gdGhpcy5lbW9uYW1lVG9FbW9pY29uKG1lc3NhZ2UpO1xyXG4gICAgICAgIHZhciBuYW1lQ29sb3IgPSB0aGlzLmdldE5hbWVDb2xvcih1c2VybmFtZSk7XHJcbiAgICAgICAgdmFyIHByaXZhdGVDbGFzcyA9IGlzUHJpdmF0ZSA/IFwicHJpdmF0ZVwiIDogXCJcIjtcclxuICAgICAgICB2YXIgcmVwbHlFbGVtID0gXCJcIjtcclxuICAgICAgICBpZiAoaXNQcml2YXRlKSB7XHJcbiAgICAgICAgICAgIHJlcGx5RWxlbSA9IFwiXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJqaXRzaS1pY29uXFxcIiBqaXRzaS1pZD1cXFwiXCIgKyBpZCArIFwiXFxcIiBqaXRzaS1uYW1lPVxcXCJcIiArIHVzZXJuYW1lICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBoZWlnaHQ9XFxcIjIyXFxcIiB3aWR0aD1cXFwiMjJcXFwiIHZpZXdCb3g9XFxcIjAgMCAzNiAzNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cXFwiTTMwLDI5YTEsMSwwLDAsMS0uODEtLjQxbC0yLjEyLTIuOTJBMTguNjYsMTguNjYsMCwwLDAsMTUsMTguMjVWMjJhMSwxLDAsMCwxLTEuNi44bC0xMi05YTEsMSwwLDAsMSwwLTEuNmwxMi05QTEsMSwwLDAsMSwxNSw0VjguMjRBMTksMTksMCwwLDEsMzEsMjd2MWExLDEsMCwwLDEtLjY5Ljk1QTEuMTIsMS4xMiwwLDAsMSwzMCwyOVpNMTQsMTYuMTFoLjFBMjAuNjgsMjAuNjgsMCwwLDEsMjguNjksMjQuNWwuMTYuMjFhMTcsMTcsMCwwLDAtMTUtMTQuNiwxLDEsMCwwLDEtLjg5LTFWNkwzLjY3LDEzLDEzLDIwVjE3LjExYTEsMSwwLDAsMSwuMzMtLjc0QTEsMSwwLDAsMSwxNCwxNi4xMVpcXFwiPjwvcGF0aD5cXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciAkY2hhdGl0ZW0gPSAkKFwiPGRpdiBjbGFzcz1cXFwiY2hhdC1tZXNzYWdlLWdyb3VwIHJlbW90ZVxcXCI+ICAgICAgICAgPGRpdiBjbGFzcz0gXFxcImNoYXRtZXNzYWdlLXdyYXBwZXJcXFwiID4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2hhdG1lc3NhZ2UgXCIgKyBwcml2YXRlQ2xhc3MgKyBcIlxcXCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyZXBseXdyYXBwZXJcXFwiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1lc3NhZ2Vjb250ZW50XFxcIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGlzcGxheS1uYW1lXFxcIiBzdHlsZT1cXFwiY29sb3I6XCIgKyBuYW1lQ29sb3IgKyBcIlxcXCI+XCIgKyB1c2VybmFtZSArIHJlcGx5RWxlbSArICc8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1c2VybWVzc2FnZVwiPicgKyBlbW9NZXNzYWdlICsgJzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWVzdGFtcFwiPicgKyBUaW1lVXRpbF8xLmdldEN1clRpbWUoKSArICc8L2Rpdj5cXFxuICAgICAgICAgICAgPC9kaXYgPlxcXG4gICAgICAgIDwvZGl2PicpO1xyXG4gICAgICAgICQoXCIjY2hhdGNvbnZlcnNhdGlvblwiKS5hcHBlbmQoJGNoYXRpdGVtKTtcclxuICAgICAgICBpZiAoaXNQcml2YXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpc18yID0gdGhpcztcclxuICAgICAgICAgICAgJGNoYXRpdGVtLmZpbmQoXCIuaml0c2ktaWNvblwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gJCh0aGlzKS5hdHRyKFwiaml0c2ktaWRcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICQodGhpcykuYXR0cihcImppdHNpLW5hbWVcIik7XHJcbiAgICAgICAgICAgICAgICBfdGhpc18yLnNldFByaXZhdGVTdGF0ZShpZCwgbmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XHJcbiAgICAgICAgaWYgKGlzUHJpdmF0ZSlcclxuICAgICAgICAgICAgdGhpcy5zZXRQcml2YXRlU3RhdGUoaWQsIHVzZXJuYW1lKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuc2Nyb2xsVG9Cb3R0b20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG92ZXJoZWlnaHQgPSAwO1xyXG4gICAgICAgICQoXCIuY2hhdC1tZXNzYWdlLWdyb3VwXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvdmVyaGVpZ2h0ICs9ICQodGhpcykuaGVpZ2h0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGxpbWl0ID0gJCgnI2NoYXRjb252ZXJzYXRpb24nKS5oZWlnaHQoKTtcclxuICAgICAgICB2YXIgcG9zID0gb3ZlcmhlaWdodCAtIGxpbWl0O1xyXG4gICAgICAgICQoXCIjY2hhdGNvbnZlcnNhdGlvblwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBwb3MgfSwgMjAwKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuaWRUb0Vtb25hbWUgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTEnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzopJztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTInKVxyXG4gICAgICAgICAgICByZXR1cm4gJzooJztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTMnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzpEJztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTQnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzorMTonO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5NScpXHJcbiAgICAgICAgICAgIHJldHVybiAnOlAnO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5NicpXHJcbiAgICAgICAgICAgIHJldHVybiAnOndhdmU6JztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTcnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzpibHVzaDonO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5OCcpXHJcbiAgICAgICAgICAgIHJldHVybiAnOnNsaWdodGx5X3NtaWxpbmdfZmFjZTonO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5OScpXHJcbiAgICAgICAgICAgIHJldHVybiAnOnNjcmVhbTonO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5MTAnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzoqJztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTExJylcclxuICAgICAgICAgICAgcmV0dXJuICc6LTE6JztcclxuICAgICAgICBpZiAoaWQgPT0gJ3NtaWxleTEyJylcclxuICAgICAgICAgICAgcmV0dXJuICc6bWFnOic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxMycpXHJcbiAgICAgICAgICAgIHJldHVybiAnOmhlYXJ0Oic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxNCcpXHJcbiAgICAgICAgICAgIHJldHVybiAnOmlubm9jZW50Oic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxNScpXHJcbiAgICAgICAgICAgIHJldHVybiAnOmFuZ3J5Oic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxNicpXHJcbiAgICAgICAgICAgIHJldHVybiAnOmFuZ2VsOic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxNycpXHJcbiAgICAgICAgICAgIHJldHVybiAnOygnO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5MTgnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzpjbGFwOic7XHJcbiAgICAgICAgaWYgKGlkID09ICdzbWlsZXkxOScpXHJcbiAgICAgICAgICAgIHJldHVybiAnOyknO1xyXG4gICAgICAgIGlmIChpZCA9PSAnc21pbGV5MjAnKVxyXG4gICAgICAgICAgICByZXR1cm4gJzpiZWVyOic7XHJcbiAgICB9O1xyXG4gICAgQ2hhdHRpbmdXaWRnZXQucHJvdG90eXBlLmVtb25hbWVUb0Vtb2ljb24gPSBmdW5jdGlvbiAoc21zKSB7XHJcbiAgICAgICAgdmFyIHNtc291dCA9IHNtcztcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOiknLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIiBzdHlsZT1cIndpZHRoOiAyMHB4OyBoZWlnaHQ6MjBweDtcIj7wn5iDPC9zcGFuPicpO1xyXG4gICAgICAgIHNtc291dCA9IHNtc291dC5yZXBsYWNlKCc6KCcsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCfmKY8L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzpEJywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+YhDwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOisxOicsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCfkY08L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzpQJywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+Ymzwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOndhdmU6JywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+Rizwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOmJsdXNoOicsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCfmIo8L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzpzbGlnaHRseV9zbWlsaW5nX2ZhY2U6JywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+Zgjwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOnNjcmVhbTonLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7wn5ixPC9zcGFuPicpO1xyXG4gICAgICAgIHNtc291dCA9IHNtc291dC5yZXBsYWNlKCc6KicsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCfmJc8L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzotMTonLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7wn5GOPC9zcGFuPicpO1xyXG4gICAgICAgIHNtc291dCA9IHNtc291dC5yZXBsYWNlKCc6bWFnOicsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCflI08L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzpoZWFydDonLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7inaTvuI88L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzppbm5vY2VudDonLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7wn5iHPC9zcGFuPicpO1xyXG4gICAgICAgIHNtc291dCA9IHNtc291dC5yZXBsYWNlKCc6YW5ncnk6JywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+YoDwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOmFuZ2VsOicsICc8c3BhbiBjbGFzcz1cInNtaWxleVwiPvCfkbw8L3NwYW4+Jyk7XHJcbiAgICAgICAgc21zb3V0ID0gc21zb3V0LnJlcGxhY2UoJzsoJywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+YrTwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOmNsYXA6JywgJzxzcGFuIGNsYXNzPVwic21pbGV5XCI+8J+Rjzwvc3Bhbj4nKTtcclxuICAgICAgICBzbXNvdXQgPSBzbXNvdXQucmVwbGFjZSgnOyknLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7wn5iJPC9zcGFuPicpO1xyXG4gICAgICAgIHNtc291dCA9IHNtc291dC5yZXBsYWNlKCc6YmVlcjonLCAnPHNwYW4gY2xhc3M9XCJzbWlsZXlcIj7wn426PC9zcGFuPicpO1xyXG4gICAgICAgIHJldHVybiBzbXNvdXQ7XHJcbiAgICB9O1xyXG4gICAgQ2hhdHRpbmdXaWRnZXQucHJvdG90eXBlLmdldE5hbWVDb2xvciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubmFtZUNvbG9yTWFwLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZUNvbG9yTWFwLmdldChuYW1lKTtcclxuICAgICAgICBpZiAodGhpcy5yZW1haW5Db2xvcnMubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgIHRoaXMucmVtYWluQ29sb3JzID0gX19zcHJlYWRBcnJheShbXSwgdGhpcy5uYW1lQ29sb3JzKTtcclxuICAgICAgICAvL1ttaW4sIG1heClcclxuICAgICAgICB2YXIgcmFuZEluZGV4ID0gc25pcHBldF8xLnJhbmRvbSgwLCB0aGlzLnJlbWFpbkNvbG9ycy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciByYW5kb21Db2xvciA9IHRoaXMucmVtYWluQ29sb3JzW3JhbmRJbmRleF07XHJcbiAgICAgICAgdGhpcy5yZW1haW5Db2xvcnMuc3BsaWNlKHJhbmRJbmRleCwgMSk7XHJcbiAgICAgICAgdGhpcy5uYW1lQ29sb3JNYXAuc2V0KG5hbWUsIHJhbmRvbUNvbG9yKTtcclxuICAgICAgICByZXR1cm4gcmFuZG9tQ29sb3I7XHJcbiAgICB9O1xyXG4gICAgQ2hhdHRpbmdXaWRnZXQucHJvdG90eXBlLnNldFByaXZhdGVTdGF0ZSA9IGZ1bmN0aW9uIChqaXRzaUlkLCBuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5pc1ByaXZhdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZVNlbmRlcklkID0gaml0c2lJZDtcclxuICAgICAgICB0aGlzLnByaXZhdGVTZW5kZXJOYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnByaXZhdGVQYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgdGhpcy5wcml2YXRlTGFiZWxFbGVtZW50LmlubmVySFRNTCA9IFwiUHJpdmF0ZSBtZXNzYWdlIHRvIFwiICsgbmFtZTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUuY2xlYXJQcml2YXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc1ByaXZhdGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByaXZhdGVTZW5kZXJJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcml2YXRlUGFuZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfTtcclxuICAgIENoYXR0aW5nV2lkZ2V0LnByb3RvdHlwZS5zZW5kRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcHJvcHMgPSBuZXcgRmlsZVNlbmRlcl8xLkZpbGVTZW5kZXJQcm9wcygpO1xyXG4gICAgICAgIHByb3BzLmZpbGVFbGVtZW50ID0gdGhpcy5maWxlRWxlbWVudDtcclxuICAgICAgICBwcm9wcy5maWxlU2VuZGluZ1BhbmVsID0gdGhpcy5maWxlU2VuZGluZ1BhbmVsO1xyXG4gICAgICAgIHByb3BzLnNlc3Npb25JZCA9IHJhbmRvbV8xLnJhbmRvbVNlc3NvbklkKCk7XHJcbiAgICAgICAgcHJvcHMub25FcnJvciA9IHRoaXMucHJvcHMub25GaWxlU2VuZEVycnJvcjtcclxuICAgICAgICBwcm9wcy5vbkZpbmlzaGVkID0gdGhpcy5wcm9wcy5vbkZpbGVTZW5kRmluaXNoZWQ7XHJcbiAgICAgICAgcHJvcHMuc2VuZEZpbGVEYXRhID0gdGhpcy5wcm9wcy5zZW5kRmlsZURhdGE7XHJcbiAgICAgICAgcHJvcHMuc2VuZEZpbGVNZXRhID0gdGhpcy5wcm9wcy5zZW5kRmlsZU1ldGE7XHJcbiAgICAgICAgdmFyIGZpbGVTZW5kZXIgPSBuZXcgRmlsZVNlbmRlcl8xLkZpbGVTZW5kZXIocHJvcHMpO1xyXG4gICAgICAgIGZpbGVTZW5kZXIuc2VuZEZpbGUoKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUub25GaWxlTWV0YSA9IGZ1bmN0aW9uIChzZXNzaW9uSWQsIG1ldGEsIHNlbmRlcklkLCBzZW5kZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIHByb3BzID0gbmV3IEZpbGVSZWNlaXZlcl8xLkZpbGVSZWNlaXZlclByb3BzKCk7XHJcbiAgICAgICAgcHJvcHMubWV0YSA9IG1ldGE7XHJcbiAgICAgICAgcHJvcHMuc2VuZGVySWQgPSBzZW5kZXJJZDtcclxuICAgICAgICBwcm9wcy5zZW5kZXJOYW1lID0gc2VuZGVyTmFtZTtcclxuICAgICAgICBwcm9wcy5vbkZpbmlzaGVkID0gdGhpcy5vbkZpbGVSZWNlaXZlRmluaXNoZWQuYmluZCh0aGlzKTtcclxuICAgICAgICBwcm9wcy5vbkVycm9yID0gdGhpcy5vbkZpbGVSZWNlaXZlRXJyb3IuYmluZCh0aGlzKTtcclxuICAgICAgICBwcm9wcy5hZGRDaGF0SXRlbSA9IHRoaXMucmVjZWl2ZU1lc3NhZ2UuYmluZCh0aGlzKTtcclxuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBuZXcgRmlsZVJlY2VpdmVyXzEuRmlsZVJlY2VpdmVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLmZpbGVSZWNlaXZpbmdQb29sLnNldChzZXNzaW9uSWQsIHJlY2VpdmVyKTtcclxuICAgICAgICByZWNlaXZlci5zaG93KCk7XHJcbiAgICB9O1xyXG4gICAgQ2hhdHRpbmdXaWRnZXQucHJvdG90eXBlLm9uRmlsZURhdGEgPSBmdW5jdGlvbiAoc2Vzc2lvbklkLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gdGhpcy5maWxlUmVjZWl2aW5nUG9vbC5nZXQoc2Vzc2lvbklkKTtcclxuICAgICAgICBpZiAocmVjZWl2ZXIpXHJcbiAgICAgICAgICAgIHJlY2VpdmVyLnJlYWRGaWxlRGF0YShkYXRhKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUub25GaWxlUmVjZWl2ZUVycm9yID0gZnVuY3Rpb24gKHNlc3Npb25JZCwgZmlsZW5hbWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmZpbGVSZWNlaXZpbmdQb29sLmRlbGV0ZShzZXNzaW9uSWQpO1xyXG4gICAgICAgIHRoaXMucHJvcHMub25GaWxlUmVjZWl2ZUVycm9yKGZpbGVuYW1lLCBtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUub25GaWxlUmVjZWl2ZUZpbmlzaGVkID0gZnVuY3Rpb24gKHNlc3Npb25JZCwgZmlsZW5hbWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmZpbGVSZWNlaXZpbmdQb29sLmRlbGV0ZShzZXNzaW9uSWQpO1xyXG4gICAgICAgIHRoaXMucHJvcHMub25GaWxlUmVjZWl2ZUZpbmlzaGVkKGZpbGVuYW1lLCBtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICBDaGF0dGluZ1dpZGdldC5wcm90b3R5cGUub3BlblByaXZhdGVDaGF0ID0gZnVuY3Rpb24gKGppdHNpSWQsIG5hbWUpIHtcclxuICAgICAgICB0aGlzLm9wZW4odHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zZXRQcml2YXRlU3RhdGUoaml0c2lJZCwgbmFtZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoYXR0aW5nV2lkZ2V0O1xyXG59KCkpO1xyXG5leHBvcnRzLkNoYXR0aW5nV2lkZ2V0ID0gQ2hhdHRpbmdXaWRnZXQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXR0aW5nUGFuZWwuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL2NvbXBvbmVudHNcXFxcQ2hhdHRpbmdQYW5lbC5qc1wiLFwiL2NvbXBvbmVudHNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk1lZXRpbmdEZXNjcmlwdGlvbldpZGdldCA9IHZvaWQgMDtcclxudmFyIE1lZXRpbmdEZXNjcmlwdGlvbldpZGdldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lZXRpbmdEZXNjcmlwdGlvbldpZGdldCgpIHtcclxuICAgICAgICAvL3N0YXRlXHJcbiAgICAgICAgdGhpcy5maXJzdFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50aW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLnN1YmplY3QgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3ViamVjdFwiKTtcclxuICAgICAgICB0aGlzLnN1YmplY3RFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJqZWN0LXRleHRcIik7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJqZWN0LXRpbWVyXCIpO1xyXG4gICAgfVxyXG4gICAgTWVldGluZ0Rlc2NyaXB0aW9uV2lkZ2V0LnByb3RvdHlwZS51cGRhdGVUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcclxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lLnRyaW0oKTtcclxuICAgICAgICB0aGlzLnRpbWVzdGFtcEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy50aW1lO1xyXG4gICAgICAgIHRoaXMuc2hvd09uSW5pdCgpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdEZXNjcmlwdGlvbldpZGdldC5wcm90b3R5cGUuc2V0U3ViamVjdCA9IGZ1bmN0aW9uIChzdWJqZWN0LCBob3N0TmFtZSkge1xyXG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3QudHJpbSgpO1xyXG4gICAgICAgIHZhciBzdWJqZWN0TGFiZWwgPSB0aGlzLnN1YmplY3Q7XHJcbiAgICAgICAgaWYgKGhvc3ROYW1lICYmIGhvc3ROYW1lLnRyaW0oKS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICBzdWJqZWN0TGFiZWwgKz0gXCIoXCIgKyBob3N0TmFtZS50cmltKCkgKyBcIilcIjtcclxuICAgICAgICB0aGlzLnN1YmplY3RFbGVtZW50LmlubmVySFRNTCA9IHN1YmplY3RMYWJlbDtcclxuICAgICAgICB0aGlzLnNob3dPbkluaXQoKTtcclxuICAgIH07XHJcbiAgICBNZWV0aW5nRGVzY3JpcHRpb25XaWRnZXQucHJvdG90eXBlLnNob3dPbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RVcGRhdGUgJiYgdGhpcy50aW1lLmxlbmd0aCA+IDAgJiYgdGhpcy5zdWJqZWN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5maXJzdFVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmZhZGVJbigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZWV0aW5nRGVzY3JpcHRpb25XaWRnZXQucHJvdG90eXBlLmZhZGVJbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMucm9vdCkuYWRkQ2xhc3MoXCJ2aXNpYmxlXCIpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdEZXNjcmlwdGlvbldpZGdldC5wcm90b3R5cGUuZmFkZU91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMucm9vdCkucmVtb3ZlQ2xhc3MoXCJ2aXNpYmxlXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNZWV0aW5nRGVzY3JpcHRpb25XaWRnZXQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTWVldGluZ0Rlc2NyaXB0aW9uV2lkZ2V0ID0gTWVldGluZ0Rlc2NyaXB0aW9uV2lkZ2V0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1NZWV0aW5nRGVzY3JpcHRpb25XaWRnZXQuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL2NvbXBvbmVudHNcXFxcTWVldGluZ0Rlc2NyaXB0aW9uV2lkZ2V0LmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUGFydGljaXBhbnRMaXN0V2lkZ2V0ID0gZXhwb3J0cy5QYXJ0aWNpcGFudExpc3RQYW5lbFByb3BzID0gdm9pZCAwO1xyXG52YXIgc25pcHBldF8xID0gcmVxdWlyZShcIi4uL3V0aWwvc25pcHBldFwiKTtcclxudmFyIHZlY3Rvcl9pY29uXzEgPSByZXF1aXJlKFwiLi92ZWN0b3JfaWNvblwiKTtcclxudmFyIFBhcnRpY2lwYW50SXRlbVByb3BzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFydGljaXBhbnRJdGVtUHJvcHMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUGFydGljaXBhbnRJdGVtUHJvcHM7XHJcbn0oKSk7XHJcbnZhciBQYXJ0aWNpcGFudEl0ZW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQYXJ0aWNpcGFudEl0ZW0ocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgdGhpcy5tdXRlQ2FtZXJhID0gdGhpcy5wcm9wcy5tdXRlQ2FtZXJhO1xyXG4gICAgICAgIHRoaXMubXV0ZU1pYyA9IHRoaXMucHJvcHMubXV0ZU1pYztcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuICAgIFBhcnRpY2lwYW50SXRlbS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBib2R5ID0gXCJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJqaXRzaS1wYXJ0aWNpcGFudFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBhcnRpY2lwYW50LWF2YXRhclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdmF0YXIgIHVzZXJBdmF0YXIgdy00MHB4IGgtNDBweFxcXCIgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IHJnYmEoMjM0LCAyNTUsIDEyOCwgMC40KTtcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XFxcImF2YXRhci1zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDAgMTAwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHhtbG5zOnhsaW5rPVxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgZG9taW5hbnQtYmFzZWxpbmU9XFxcImNlbnRyYWxcXFwiIGZpbGw9XFxcInJnYmEoMjU1LDI1NSwyNTUsLjYpXFxcIiBmb250LXNpemU9XFxcIjQwcHRcXFwiIHRleHQtYW5jaG9yPVxcXCJtaWRkbGVcXFwiIHg9XFxcIjUwXFxcIiB5PVxcXCI1MFxcXCI+PzwvdGV4dD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFydGljaXBhbnQtY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibmFtZVxcXCIgY2xhc3M9XFxcImZzLTIgZnctYm9sZGVyXFxcIj4/PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNwYWNlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaml0c2ktaWNvbiBjYW1lcmEtdG9nZ2xlLWJ1dHRvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBpZD1cXFwiY2FtZXJhLWRpc2FibGVkXFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIlxcXCI+PC9wYXRoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJqaXRzaS1pY29uIG1pYy10b2dnbGUtYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGlkPVxcXCJtaWMtZGlzYWJsZWRcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cXFwiXFxcIj48L3BhdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICBcIjtcclxuICAgICAgICB2YXIgJHJvb3QgPSAkKGJvZHkpO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSAkcm9vdFswXTtcclxuICAgICAgICB0aGlzLmF2YXRhckVsZW1lbnQgPSAkcm9vdC5maW5kKFwiLmF2YXRhclwiKVswXTtcclxuICAgICAgICB0aGlzLmF2YXRhclRleHRFbGVtZW50ID0gJCh0aGlzLmF2YXRhckVsZW1lbnQpLmZpbmQoXCJ0ZXh0XCIpWzBdO1xyXG4gICAgICAgIHRoaXMubmFtZUVsZW1lbnQgPSAkcm9vdC5maW5kKFwiLm5hbWVcIilbMF07XHJcbiAgICAgICAgdGhpcy5jYW1lcmFCdXR0b25FbGVtZW50ID0gJHJvb3QuZmluZChcIi5jYW1lcmEtdG9nZ2xlLWJ1dHRvblwiKVswXTtcclxuICAgICAgICB0aGlzLm1pY0J1dHRvbkVsZW1lbnQgPSAkcm9vdC5maW5kKFwiLm1pYy10b2dnbGUtYnV0dG9uXCIpWzBdO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhSWNvbkVsZW1lbnQgPSAkKHRoaXMuY2FtZXJhQnV0dG9uRWxlbWVudCkuZmluZChcInBhdGhcIilbMF07XHJcbiAgICAgICAgdGhpcy5taWNJY29uRWxlbWVudCA9ICQodGhpcy5taWNCdXR0b25FbGVtZW50KS5maW5kKFwicGF0aFwiKVswXTtcclxuICAgICAgICAvL2F2YXRhclxyXG4gICAgICAgIHRoaXMuYXZhdGFyVGV4dEVsZW1lbnQuaW5uZXJIVE1MID0gc25pcHBldF8xLmF2YXRhck5hbWUodGhpcy5wcm9wcy5uYW1lKTtcclxuICAgICAgICB2YXIgYXZhdGFyQ29sb3JzID0gW1xyXG4gICAgICAgICAgICBcInJnYmEoMjM0LCAyNTUsIDEyOCwgMC40KVwiLFxyXG4gICAgICAgICAgICBcInJnYmEoMTE0LCA5MSwgNjAsIDEuMClcIixcclxuICAgICAgICAgICAgXCJyZ2JhKDYzLCA2NSwgMTEzLCAxLjApXCIsXHJcbiAgICAgICAgICAgIFwicmdiYSg1NiwgMTA1LCA5MSwgMS4wKVwiXHJcbiAgICAgICAgXTtcclxuICAgICAgICAkKHRoaXMuYXZhdGFyRWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBhdmF0YXJDb2xvcnNbc25pcHBldF8xLnJhbmRvbSgwLCBhdmF0YXJDb2xvcnMubGVuZ3RoKV0pO1xyXG4gICAgICAgIC8vbmFtZVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1lKVxyXG4gICAgICAgICAgICAkKHRoaXMubmFtZUVsZW1lbnQpLmh0bWwodGhpcy5wcm9wcy5uYW1lICsgXCIgKE1lKVwiKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICQodGhpcy5uYW1lRWxlbWVudCkuaHRtbCh0aGlzLnByb3BzLm5hbWUpO1xyXG4gICAgICAgIC8vaWNvblxyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FtZXJhSWNvbigpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTWljSWNvbigpO1xyXG4gICAgICAgICQodGhpcy5jYW1lcmFCdXR0b25FbGVtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICBfdGhpcy5vblRvZ2dsZUNhbWVyYSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQodGhpcy5taWNCdXR0b25FbGVtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICBfdGhpcy5vblRvZ2dsZU1pYygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50SXRlbS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290RWxlbWVudDtcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudEl0ZW0ucHJvdG90eXBlLnJlbW92ZVNlbGYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzLnJvb3RFbGVtZW50KS5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudEl0ZW0ucHJvdG90eXBlLm9uVG9nZ2xlQ2FtZXJhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0hvc3QpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvL3RoaXMubXV0ZUNhbWVyYSA9ICF0aGlzLm11dGVDYW1lcmE7XHJcbiAgICAgICAgLy90aGlzLnVwZGF0ZUNhbWVyYUljb24oKTtcclxuICAgICAgICB0aGlzLnByb3BzLm9uTXV0ZUNhbWVyYSh0aGlzLnByb3BzLmppdHNpSWQsICF0aGlzLm11dGVDYW1lcmEpO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50SXRlbS5wcm90b3R5cGUub25Ub2dnbGVNaWMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSG9zdClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vdGhpcy5tdXRlTWljID0gIXRoaXMubXV0ZU1pYztcclxuICAgICAgICAvL3RoaXMudXBkYXRlTWljSWNvbigpO1xyXG4gICAgICAgIHRoaXMucHJvcHMub25NdXRlTWljKHRoaXMucHJvcHMuaml0c2lJZCwgIXRoaXMubXV0ZU1pYyk7XHJcbiAgICB9O1xyXG4gICAgUGFydGljaXBhbnRJdGVtLnByb3RvdHlwZS5ibG9ja01pYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMubXV0ZU1pYylcclxuICAgICAgICAgICAgdGhpcy5vblRvZ2dsZU1pYygpO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50SXRlbS5wcm90b3R5cGUuc2V0TXV0ZUF1ZGlvID0gZnVuY3Rpb24gKHVzZSkge1xyXG4gICAgICAgIHRoaXMubXV0ZU1pYyA9IHVzZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZU1pY0ljb24oKTtcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudEl0ZW0ucHJvdG90eXBlLnNldE11dGVDYW1lcmEgPSBmdW5jdGlvbiAodXNlKSB7XHJcbiAgICAgICAgdGhpcy5tdXRlQ2FtZXJhID0gdXNlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FtZXJhSWNvbigpO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50SXRlbS5wcm90b3R5cGUuc2V0Um9sZSA9IGZ1bmN0aW9uIChpc0hvc3QpIHtcclxuICAgICAgICB0aGlzLmlzSG9zdCA9IGlzSG9zdDtcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudEl0ZW0ucHJvdG90eXBlLnVwZGF0ZUNhbWVyYUljb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGljb24gPSB0aGlzLm11dGVDYW1lcmEgPyB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uVklERU9fTVVURV9JQ09OIDogdmVjdG9yX2ljb25fMS5WZWN0b3JJY29uLlZJREVPX1VOTVVURV9JQ09OO1xyXG4gICAgICAgICQodGhpcy5jYW1lcmFJY29uRWxlbWVudCkuYXR0cihcImRcIiwgaWNvbik7XHJcbiAgICB9O1xyXG4gICAgUGFydGljaXBhbnRJdGVtLnByb3RvdHlwZS51cGRhdGVNaWNJY29uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpY29uID0gdGhpcy5tdXRlTWljID8gdmVjdG9yX2ljb25fMS5WZWN0b3JJY29uLkFVRElPX01VVEVfSUNPTiA6IHZlY3Rvcl9pY29uXzEuVmVjdG9ySWNvbi5BVURJT19VTk1VVEVfSUNPTjtcclxuICAgICAgICAkKHRoaXMubWljSWNvbkVsZW1lbnQpLmF0dHIoXCJkXCIsIGljb24pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQYXJ0aWNpcGFudEl0ZW07XHJcbn0oKSk7XHJcbnZhciBQYXJ0aWNpcGFudExpc3RQYW5lbFByb3BzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFydGljaXBhbnRMaXN0UGFuZWxQcm9wcygpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBQYXJ0aWNpcGFudExpc3RQYW5lbFByb3BzO1xyXG59KCkpO1xyXG5leHBvcnRzLlBhcnRpY2lwYW50TGlzdFBhbmVsUHJvcHMgPSBQYXJ0aWNpcGFudExpc3RQYW5lbFByb3BzO1xyXG52YXIgUGFydGljaXBhbnRMaXN0V2lkZ2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFydGljaXBhbnRMaXN0V2lkZ2V0KCkge1xyXG4gICAgICAgIC8vc3RhdGVzXHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5pc0hvc3QgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJ0aWNpcGFudHMtbGlzdFwiKTtcclxuICAgICAgICB2YXIgJHJvb3QgPSAkKHRoaXMucm9vdEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRDb3VudEVsZW1lbnQgPSAkcm9vdC5maW5kKFwiI3BhcnRpY2lwYW50LWNvdW50XCIpWzBdO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRMaXN0RWxlbWVudCA9ICRyb290LmZpbmQoXCIjcGFydGljaXBhbnRzLWxpc3QtYm9keVwiKVswXTtcclxuICAgICAgICB0aGlzLm11dGVBbGxCdXR0b25FbGVtZW50ID0gJHJvb3QuZmluZChcIiNwYXJ0aWNpcGFudHMtbGlzdC1mb290ZXI+LmJ0blwiKVswXTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUNvcHlKb2luaW5nSW5mb0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvcHktam9pbmluZy1pbmZvXCIpO1xyXG4gICAgICAgIHRoaXMuam9pbmluZ0luZm9FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNqb2luaW5nLWluZm9cIik7XHJcbiAgICB9XHJcbiAgICBQYXJ0aWNpcGFudExpc3RXaWRnZXQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0aWNpcGFudENvdW50KCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hIYW5kbGVycygpO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50TGlzdFdpZGdldC5wcm90b3R5cGUuYXR0YWNoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAkKHRoaXMubXV0ZUFsbEJ1dHRvbkVsZW1lbnQpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzSG9zdClcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcnRpY2lwYW50SXRlbU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0aWNpcGFudEl0ZW0sIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50SXRlbS5ibG9ja01pYygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnRvZ2dsZUNvcHlKb2luaW5nSW5mb0VsZW1lbnQpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnByb3BzLnRvZ2dsZUNvcHlKb2luaW5nSW5mbygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50TGlzdFdpZGdldC5wcm90b3R5cGUuYWRkUGFydGljaXBhbnQgPSBmdW5jdGlvbiAoaml0c2lJZCwgbmFtZSwgbWUsIG11dGVDYW1lcmEsIG11dGVNaWMpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuaGFzKGppdHNpSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlUGFydGljaXBhbnQoaml0c2lJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwcm9wcyA9IG5ldyBQYXJ0aWNpcGFudEl0ZW1Qcm9wcygpO1xyXG4gICAgICAgIHByb3BzLmppdHNpSWQgPSBqaXRzaUlkO1xyXG4gICAgICAgIHByb3BzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHByb3BzLm1lID0gbWU7XHJcbiAgICAgICAgcHJvcHMubXV0ZUNhbWVyYSA9IG11dGVDYW1lcmE7XHJcbiAgICAgICAgcHJvcHMubXV0ZU1pYyA9IG11dGVNaWM7XHJcbiAgICAgICAgcHJvcHMub25NdXRlQ2FtZXJhID0gdGhpcy5wcm9wcy5vbk11dGVDYW1lcmE7XHJcbiAgICAgICAgcHJvcHMub25NdXRlTWljID0gdGhpcy5wcm9wcy5vbk11dGVNaWM7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBuZXcgUGFydGljaXBhbnRJdGVtKHByb3BzKTtcclxuICAgICAgICBpdGVtLnNldFJvbGUodGhpcy5pc0hvc3QpO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRJdGVtTWFwLnNldChqaXRzaUlkLCBpdGVtKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50Q291bnQoKTtcclxuICAgICAgICBpZiAobWUpIHtcclxuICAgICAgICAgICAgJCh0aGlzLnBhcnRpY2lwYW50TGlzdEVsZW1lbnQpLnByZXBlbmQoaXRlbS5lbGVtZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJCh0aGlzLnBhcnRpY2lwYW50TGlzdEVsZW1lbnQpLmFwcGVuZChpdGVtLmVsZW1lbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhcnRpY2lwYW50TGlzdFdpZGdldC5wcm90b3R5cGUucmVtb3ZlUGFydGljaXBhbnQgPSBmdW5jdGlvbiAoaml0c2lJZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuaGFzKGppdHNpSWQpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuZ2V0KGppdHNpSWQpLnJlbW92ZVNlbGYoKTtcclxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50SXRlbU1hcC5kZWxldGUoaml0c2lJZCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0aWNpcGFudENvdW50KCk7XHJcbiAgICB9O1xyXG4gICAgUGFydGljaXBhbnRMaXN0V2lkZ2V0LnByb3RvdHlwZS51cGRhdGVKb2luaW5nSW5mbyA9IGZ1bmN0aW9uIChpbmZvKSB7XHJcbiAgICAgICAgdGhpcy5qb2luaW5nSW5mb0VsZW1lbnQuaW5uZXJIVE1MID0gaW5mbztcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudExpc3RXaWRnZXQucHJvdG90eXBlLnVwZGF0ZVBhcnRpY2lwYW50Q291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudENvdW50RWxlbWVudC5pbm5lckhUTUwgPSBcIlwiICsgdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuc2l6ZTtcclxuICAgIH07XHJcbiAgICBQYXJ0aWNpcGFudExpc3RXaWRnZXQucHJvdG90eXBlLnNldE11dGVDYW1lcmEgPSBmdW5jdGlvbiAoaml0c2lJZCwgbXV0ZUNhbWVyYSkge1xyXG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuZ2V0KGppdHNpSWQpO1xyXG4gICAgICAgIGlmIChpdGVtKVxyXG4gICAgICAgICAgICBpdGVtLnNldE11dGVDYW1lcmEobXV0ZUNhbWVyYSk7XHJcbiAgICB9O1xyXG4gICAgUGFydGljaXBhbnRMaXN0V2lkZ2V0LnByb3RvdHlwZS5zZXRNdXRlTWljID0gZnVuY3Rpb24gKGppdHNpSWQsIG11dGVNaWMpIHtcclxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMucGFydGljaXBhbnRJdGVtTWFwLmdldChqaXRzaUlkKTtcclxuICAgICAgICBpZiAoaXRlbSlcclxuICAgICAgICAgICAgaXRlbS5zZXRNdXRlQXVkaW8obXV0ZU1pYyk7XHJcbiAgICB9O1xyXG4gICAgUGFydGljaXBhbnRMaXN0V2lkZ2V0LnByb3RvdHlwZS51cGRhdGVCeVJvbGUgPSBmdW5jdGlvbiAoaXNIb3N0KSB7XHJcbiAgICAgICAgdGhpcy5pc0hvc3QgPSBpc0hvc3Q7XHJcbiAgICAgICAgaWYgKGlzSG9zdClcclxuICAgICAgICAgICAgJCh0aGlzLnJvb3RFbGVtZW50KS5hZGRDbGFzcyhcImlzLWhvc3RcIik7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAkKHRoaXMucm9vdEVsZW1lbnQpLnJlbW92ZUNsYXNzKFwiaXMtaG9zdFwiKTtcclxuICAgICAgICB0aGlzLm11dGVBbGxCdXR0b25FbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBpc0hvc3QgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudEl0ZW1NYXAuZm9yRWFjaChmdW5jdGlvbiAocGFydGljaXBhbnRJdGVtLCBrZXkpIHtcclxuICAgICAgICAgICAgcGFydGljaXBhbnRJdGVtLnNldFJvbGUoaXNIb3N0KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGFydGljaXBhbnRMaXN0V2lkZ2V0O1xyXG59KCkpO1xyXG5leHBvcnRzLlBhcnRpY2lwYW50TGlzdFdpZGdldCA9IFBhcnRpY2lwYW50TGlzdFdpZGdldDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFydGljaXBhbnRMaXN0UGFuZWwuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL2NvbXBvbmVudHNcXFxcUGFydGljaXBhbnRMaXN0UGFuZWwuanNcIixcIi9jb21wb25lbnRzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TZXR0aW5nRGlhbG9nID0gZXhwb3J0cy5TZXR0aW5nRGlhbG9nUHJvcHMgPSB2b2lkIDA7XHJcbnZhciBNZWRpYVR5cGVfMSA9IHJlcXVpcmUoXCIuLi9lbnVtL01lZGlhVHlwZVwiKTtcclxudmFyIEFjdGl2ZURldmljZXNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbC9BY3RpdmVEZXZpY2VzXCIpO1xyXG52YXIgU2V0dGluZ0RpYWxvZ1Byb3BzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2V0dGluZ0RpYWxvZ1Byb3BzKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNldHRpbmdEaWFsb2dQcm9wcztcclxufSgpKTtcclxuZXhwb3J0cy5TZXR0aW5nRGlhbG9nUHJvcHMgPSBTZXR0aW5nRGlhbG9nUHJvcHM7XHJcbnZhciBTZXR0aW5nRGlhbG9nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2V0dGluZ0RpYWxvZygpIHtcclxuICAgICAgICB0aGlzLkppdHNpTWVldEpTID0gd2luZG93LkppdHNpTWVldEpTO1xyXG4gICAgICAgIHRoaXMuYXVkaW9UcmFja0Vycm9yID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpZGVvVHJhY2tFcnJvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVDYW1lcmFEZXZpY2VJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVNaWNEZXZpY2VJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVTcGVha2VyRGV2aWNlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubG9jYWxUcmFja3MgPSBbXTtcclxuICAgIH1cclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNldHRpbmctZGlhbG9nLXdyYXBwZXJcIik7XHJcbiAgICAgICAgdGhpcy5zaG93QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZXR0aW5nLWRpYWxvZy13cmFwcGVyPmJ1dHRvblwiKTtcclxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5hZGRDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgICAgICB0aGlzLm9rQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZXR0aW5nLWRpYWxvZy1vay1idXR0b25cIik7XHJcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2V0dGluZy1kaWFsb2ctY2FuY2VsLWJ1dHRvblwiKTtcclxuICAgICAgICB0aGlzLnZpZGVvUHJldmlld0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYS1wcmV2aWV3XCIpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QcmV2aWV3RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWljLXByZXZpZXdcIik7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFMaXN0RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhLWxpc3RcIik7XHJcbiAgICAgICAgdGhpcy5taWNMaXN0RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWljLWxpc3RcIik7XHJcbiAgICAgICAgdGhpcy5zcGVha2VyTGlzdEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwZWFrZXItbGlzdFwiKTtcclxuICAgICAgICB0aGlzLmF0dGFjaEV2ZW50SGFuZGxlcnMoKTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hEZXZpY2VMaXN0KCk7XHJcbiAgICB9O1xyXG4gICAgU2V0dGluZ0RpYWxvZy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgICAgICAkKHRoaXMuc2hvd0J1dHRvbikudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLmF0dGFjaEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJCh0aGlzLmNhbWVyYUxpc3RFbGVtKS5vZmYoJ2NoYW5nZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uQ2FtZXJhQ2hhbmdlZCgkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMubWljTGlzdEVsZW0pLm9mZignY2hhbmdlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub25NaWNDaGFuZ2VkKCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQodGhpcy5zcGVha2VyTGlzdEVsZW0pLm9mZignY2hhbmdlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub25TcGVha2VyQ2hhbmdlZCgkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMub2tCdXR0b24pLm9mZignY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEub25PSygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLnJlZnJlc2hEZXZpY2VMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpc18xID0gdGhpcztcclxuICAgICAgICB0aGlzLkppdHNpTWVldEpTLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKGZ1bmN0aW9uIChkZXZpY2VzKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEuY2FtZXJhTGlzdCA9IGRldmljZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmtpbmQgPT09ICd2aWRlb2lucHV0JzsgfSk7XHJcbiAgICAgICAgICAgIF90aGlzXzEubWljTGlzdCA9IGRldmljZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmtpbmQgPT09ICdhdWRpb2lucHV0JzsgfSk7XHJcbiAgICAgICAgICAgIF90aGlzXzEuc3BlYWtlckxpc3QgPSBkZXZpY2VzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5raW5kID09PSAnYXVkaW9vdXRwdXQnOyB9KTtcclxuICAgICAgICAgICAgX3RoaXNfMS5yZW5kZXJEZXZpY2VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2V0dGluZ0RpYWxvZy5wcm90b3R5cGUucmVuZGVyRGV2aWNlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVDYW1lcmFEZXZpY2VJZCA9IHRoaXMucHJvcHMuY3VyRGV2aWNlcy5jYW1lcmFJZDtcclxuICAgICAgICB0aGlzLmFjdGl2ZU1pY0RldmljZUlkID0gdGhpcy5wcm9wcy5jdXJEZXZpY2VzLm1pY0lkO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3BlYWtlckRldmljZUlkID0gdGhpcy5wcm9wcy5jdXJEZXZpY2VzLnNwZWFrZXJJZDtcclxuICAgICAgICB0aGlzLmNsZWFyRE9NRWxlbWVudCh0aGlzLmNhbWVyYUxpc3RFbGVtKTtcclxuICAgICAgICB0aGlzLmNhbWVyYUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoY2FtZXJhKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IChfdGhpc18xLmFjdGl2ZUNhbWVyYURldmljZUlkICYmIGNhbWVyYS5kZXZpY2VJZCA9PT0gX3RoaXNfMS5hY3RpdmVDYW1lcmFEZXZpY2VJZClcclxuICAgICAgICAgICAgICAgID8gXCJzZWxlY3RlZFwiIDogXCJcIjtcclxuICAgICAgICAgICAgJChfdGhpc18xLmNhbWVyYUxpc3RFbGVtKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPVxcXCJcIiArIGNhbWVyYS5kZXZpY2VJZCArIFwiXFxcIiBcIiArIHNlbGVjdGVkICsgXCI+XCIgKyBjYW1lcmEubGFiZWwgKyBcIjwvb3B0aW9uPlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsZWFyRE9NRWxlbWVudCh0aGlzLm1pY0xpc3RFbGVtKTtcclxuICAgICAgICB0aGlzLm1pY0xpc3QuZm9yRWFjaChmdW5jdGlvbiAobWljKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IChfdGhpc18xLmFjdGl2ZU1pY0RldmljZUlkICYmIG1pYy5kZXZpY2VJZCA9PT0gX3RoaXNfMS5hY3RpdmVNaWNEZXZpY2VJZClcclxuICAgICAgICAgICAgICAgID8gXCJzZWxlY3RlZFwiIDogXCJcIjtcclxuICAgICAgICAgICAgJChfdGhpc18xLm1pY0xpc3RFbGVtKS5hcHBlbmQoXCI8b3B0aW9uIHZhbHVlPVxcXCJcIiArIG1pYy5kZXZpY2VJZCArIFwiXFxcIiBcIiArIHNlbGVjdGVkICsgXCI+XCIgKyBtaWMubGFiZWwgKyBcIjwvb3B0aW9uPlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsZWFyRE9NRWxlbWVudCh0aGlzLnNwZWFrZXJMaXN0RWxlbSk7XHJcbiAgICAgICAgdGhpcy5zcGVha2VyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzcGVha2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IChfdGhpc18xLmFjdGl2ZVNwZWFrZXJEZXZpY2VJZCAmJiBzcGVha2VyLmRldmljZUlkID09PSBfdGhpc18xLmFjdGl2ZVNwZWFrZXJEZXZpY2VJZClcclxuICAgICAgICAgICAgICAgID8gXCJzZWxlY3RlZFwiIDogXCJcIjtcclxuICAgICAgICAgICAgJChfdGhpc18xLnNwZWFrZXJMaXN0RWxlbSkuYXBwZW5kKFwiPG9wdGlvbiB2YWx1ZT1cXFwiXCIgKyBzcGVha2VyLmRldmljZUlkICsgXCJcXFwiIFwiICsgc2VsZWN0ZWQgKyBcIj5cIiArIHNwZWFrZXIubGFiZWwgKyBcIjwvb3B0aW9uPlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKFwiLmZvcm0tc2VsZWN0XCIpLnNlbGVjdDIoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxvY2FsVHJhY2tzKHRoaXMuYWN0aXZlQ2FtZXJhRGV2aWNlSWQsIHRoaXMuYWN0aXZlTWljRGV2aWNlSWQpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHtcclxuICAgICAgICAgICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5hdHRhY2goX3RoaXNfMS52aWRlb1ByZXZpZXdFbGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHQuZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmF0dGFjaChfdGhpc18xLmF1ZGlvUHJldmlld0VsZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXNfMS5sb2NhbFRyYWNrcyA9IHRyYWNrcztcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZXR0aW5nRGlhbG9nLnByb3RvdHlwZS5pbml0Q3VycmVudERldmljZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJChcIm9wdGlvblwiLCB0aGlzLmNhbWVyYUxpc3RFbGVtKS5lYWNoKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIGlmICgkKF90aGlzXzEpLnZhbCgpID09PSBfdGhpcy5wcm9wcy5jdXJEZXZpY2VzLm1pY0lkKVxyXG4gICAgICAgICAgICAgICAgJChfdGhpc18xKS5hdHRyKFwic2VsZWN0ZWRcIiwgXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZXR0aW5nRGlhbG9nLnByb3RvdHlwZS5jbGVhckRPTUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgIHdoaWxlIChlbGVtLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgZWxlbS5yZW1vdmVDaGlsZChlbGVtLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZXR0aW5nRGlhbG9nLnByb3RvdHlwZS5jcmVhdGVMb2NhbFRyYWNrcyA9IGZ1bmN0aW9uIChjYW1lcmFEZXZpY2VJZCwgbWljRGV2aWNlSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy52aWRlb1RyYWNrRXJyb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYXVkaW9UcmFja0Vycm9yID0gbnVsbDtcclxuICAgICAgICBpZiAoY2FtZXJhRGV2aWNlSWQgIT0gbnVsbCAmJiBtaWNEZXZpY2VJZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkppdHNpTWVldEpTLmNyZWF0ZUxvY2FsVHJhY2tzKHtcclxuICAgICAgICAgICAgICAgIGRldmljZXM6IFsnYXVkaW8nLCAndmlkZW8nXSxcclxuICAgICAgICAgICAgICAgIGNhbWVyYURldmljZUlkOiBjYW1lcmFEZXZpY2VJZCxcclxuICAgICAgICAgICAgICAgIG1pY0RldmljZUlkOiBtaWNEZXZpY2VJZFxyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgICAgICBfdGhpc18xLmNyZWF0ZUF1ZGlvVHJhY2sobWljRGV2aWNlSWQpLnRoZW4oZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IF9hWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIF90aGlzXzEuY3JlYXRlVmlkZW9UcmFjayhjYW1lcmFEZXZpY2VJZCkudGhlbihmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWFtID0gX2FbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIF0pOyB9KS50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpc18xLmF1ZGlvVHJhY2tFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGlzcGxheSBlcnJvclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzXzEudmlkZW9UcmFja0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kaXNwbGF5IGVycm9yXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tzLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdHlwZW9mIHQgIT09ICd1bmRlZmluZWQnOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNhbWVyYURldmljZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVmlkZW9UcmFjayhjYW1lcmFEZXZpY2VJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG1pY0RldmljZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXVkaW9UcmFjayhtaWNEZXZpY2VJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLmNyZWF0ZVZpZGVvVHJhY2sgPSBmdW5jdGlvbiAoY2FtZXJhRGV2aWNlSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSml0c2lNZWV0SlMuY3JlYXRlTG9jYWxUcmFja3Moe1xyXG4gICAgICAgICAgICBkZXZpY2VzOiBbJ3ZpZGVvJ10sXHJcbiAgICAgICAgICAgIGNhbWVyYURldmljZUlkOiBjYW1lcmFEZXZpY2VJZCxcclxuICAgICAgICAgICAgbWljRGV2aWNlSWQ6IG51bGxcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF90aGlzXzEudmlkZW9UcmFja0Vycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLmNyZWF0ZUF1ZGlvVHJhY2sgPSBmdW5jdGlvbiAobWljRGV2aWNlSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLkppdHNpTWVldEpTLmNyZWF0ZUxvY2FsVHJhY2tzKHtcclxuICAgICAgICAgICAgZGV2aWNlczogWydhdWRpbyddLFxyXG4gICAgICAgICAgICBjYW1lcmFEZXZpY2VJZDogbnVsbCxcclxuICAgICAgICAgICAgbWljRGV2aWNlSWQ6IG1pY0RldmljZUlkXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpc18xLmF1ZGlvVHJhY2tFcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgU2V0dGluZ0RpYWxvZy5wcm90b3R5cGUub25DYW1lcmFDaGFuZ2VkID0gZnVuY3Rpb24gKGNhbWVyYURldmljZUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlQ2FtZXJhRGV2aWNlSWQgPSBjYW1lcmFEZXZpY2VJZDtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxvY2FsVHJhY2tzKHRoaXMuYWN0aXZlQ2FtZXJhRGV2aWNlSWQsIG51bGwpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1RyYWNrID0gdHJhY2tzLmZpbmQoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU87IH0pO1xyXG4gICAgICAgICAgICAvL3JlbW92ZSBleGlzdGluZyB0cmFja1xyXG4gICAgICAgICAgICB2YXIgb2xkVHJhY2sgPSBfdGhpc18xLmxvY2FsVHJhY2tzLmZpbmQoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU87IH0pO1xyXG4gICAgICAgICAgICBpZiAob2xkVHJhY2spIHtcclxuICAgICAgICAgICAgICAgIG9sZFRyYWNrLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzXzEubG9jYWxUcmFja3Muc3BsaWNlKF90aGlzXzEubG9jYWxUcmFja3MuaW5kZXhPZihvbGRUcmFjayksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZXdUcmFjaykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXNfMS5sb2NhbFRyYWNrcy5wdXNoKG5ld1RyYWNrKTtcclxuICAgICAgICAgICAgICAgIG5ld1RyYWNrLmF0dGFjaChfdGhpc18xLnZpZGVvUHJldmlld0VsZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2V0dGluZ0RpYWxvZy5wcm90b3R5cGUub25NaWNDaGFuZ2VkID0gZnVuY3Rpb24gKG1pY0RldmljZUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlTWljRGV2aWNlSWQgPSBtaWNEZXZpY2VJZDtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxvY2FsVHJhY2tzKG51bGwsIHRoaXMuYWN0aXZlTWljRGV2aWNlSWQpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1RyYWNrID0gdHJhY2tzLmZpbmQoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU87IH0pO1xyXG4gICAgICAgICAgICAvL3JlbW92ZSBleGlzdGluZyB0cmFja1xyXG4gICAgICAgICAgICB2YXIgb2xkVHJhY2sgPSBfdGhpc18xLmxvY2FsVHJhY2tzLmZpbmQoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU87IH0pO1xyXG4gICAgICAgICAgICBpZiAob2xkVHJhY2spIHtcclxuICAgICAgICAgICAgICAgIG9sZFRyYWNrLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzXzEubG9jYWxUcmFja3Muc3BsaWNlKF90aGlzXzEubG9jYWxUcmFja3MuaW5kZXhPZihvbGRUcmFjayksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZXdUcmFjaykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXNfMS5sb2NhbFRyYWNrcy5wdXNoKG5ld1RyYWNrKTtcclxuICAgICAgICAgICAgICAgIG5ld1RyYWNrLmF0dGFjaChfdGhpc18xLmF1ZGlvUHJldmlld0VsZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2V0dGluZ0RpYWxvZy5wcm90b3R5cGUub25TcGVha2VyQ2hhbmdlZCA9IGZ1bmN0aW9uIChzcGVha2VyRGV2aWNlSWQpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZVNwZWFrZXJEZXZpY2VJZCA9IHNwZWFrZXJEZXZpY2VJZDtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVTcGVha2VyRGV2aWNlSWQgJiYgdGhpcy5KaXRzaU1lZXRKUy5tZWRpYURldmljZXMuaXNEZXZpY2VDaGFuZ2VBdmFpbGFibGUoJ291dHB1dCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSml0c2lNZWV0SlMubWVkaWFEZXZpY2VzLnNldEF1ZGlvT3V0cHV0RGV2aWNlKHRoaXMuYWN0aXZlU3BlYWtlckRldmljZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLm9uT0sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgIHZhciBuZXdEZXZpY2VzID0gbmV3IEFjdGl2ZURldmljZXNfMS5BY3RpdmVEZXZpY2VzKCk7XHJcbiAgICAgICAgbmV3RGV2aWNlcy5jYW1lcmFJZCA9IHRoaXMuYWN0aXZlQ2FtZXJhRGV2aWNlSWQ7XHJcbiAgICAgICAgbmV3RGV2aWNlcy5taWNJZCA9IHRoaXMuYWN0aXZlTWljRGV2aWNlSWQ7XHJcbiAgICAgICAgbmV3RGV2aWNlcy5zcGVha2VySWQgPSB0aGlzLmFjdGl2ZVNwZWFrZXJEZXZpY2VJZDtcclxuICAgICAgICB0aGlzLnByb3BzLm9uRGV2aWNlQ2hhbmdlKG5ld0RldmljZXMpO1xyXG4gICAgfTtcclxuICAgIFNldHRpbmdEaWFsb2cucHJvdG90eXBlLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcy5jbG9zZUJ1dHRvbikudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgICAgIHRoaXMubG9jYWxUcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICAgICAgdHJhY2suZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTZXR0aW5nRGlhbG9nO1xyXG59KCkpO1xyXG5leHBvcnRzLlNldHRpbmdEaWFsb2cgPSBTZXR0aW5nRGlhbG9nO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXR0aW5nRGlhbG9nLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9jb21wb25lbnRzXFxcXFNldHRpbmdEaWFsb2cuanNcIixcIi9jb21wb25lbnRzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Ub29sQmFyID0gZXhwb3J0cy5Ub29sQmFyUHJvcHMgPSB2b2lkIDA7XHJcbnZhciBNZWRpYVR5cGVfMSA9IHJlcXVpcmUoXCIuLi9lbnVtL01lZGlhVHlwZVwiKTtcclxudmFyIHZlY3Rvcl9pY29uXzEgPSByZXF1aXJlKFwiLi92ZWN0b3JfaWNvblwiKTtcclxudmFyIFRvb2xCYXJQcm9wcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRvb2xCYXJQcm9wcygpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBUb29sQmFyUHJvcHM7XHJcbn0oKSk7XHJcbmV4cG9ydHMuVG9vbEJhclByb3BzID0gVG9vbEJhclByb3BzO1xyXG52YXIgVG9vbEJhciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRvb2xCYXIocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnJvb3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgICAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5ldy10b29sYm94XCIpO1xyXG4gICAgICAgIHRoaXMudG9vbGJhclRpbGVWaWV3QnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGlsZXZpZXdcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyTXV0ZUFsbEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI211dGVhbGxcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyTXV0ZUFsbFZpZGVvQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXV0ZWFsbHZpZGVvXCIpO1xyXG4gICAgICAgIHRoaXMudG9vbGJhckF1ZGlvQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWljLWVuYWJsZVwiKTtcclxuICAgICAgICB0aGlzLnRvb2xiYXJWaWRlb0J1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhbWVyYS1lbmFibGVcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyRGVza3RvcFNoYXJlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2hhcmVcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyRGVza3RvcFNoYXJlTWVudUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NoYXJlc2NyZWVuXCIpO1xyXG4gICAgICAgIHRoaXMudG9vbGJhclJlY29yZEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3JlY29yZFwiKTtcclxuICAgICAgICB0aGlzLnRvb2xiYXJIYW5kUmFpc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNoYW5kcmFpc2VcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyQ2hhdEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NoYXRcIik7XHJcbiAgICAgICAgdGhpcy50b29sYmFyTGVhdmVCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsZWF2ZVwiKTtcclxuICAgICAgICB0aGlzLnRvb2xiYXJTZXR0aW5nQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2V0dGluZ1wiKTtcclxuICAgICAgICB0aGlzLmNoYXR0aW5nVW5yZWFkQmFkZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoYXQtYmFkZ2VcIik7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hIYW5kbGVycygpO1xyXG4gICAgfVxyXG4gICAgVG9vbEJhci5wcm90b3R5cGUuYXR0YWNoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAkKHRoaXMudG9vbGJhclRpbGVWaWV3QnV0dG9uRWxlbWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy50b2dnbGVUaWxlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQodGhpcy50b29sYmFyTXV0ZUFsbEJ1dHRvbkVsZW1lbnQpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMudG9nZ2xlTXV0ZUFsbCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQodGhpcy50b29sYmFyTXV0ZUFsbFZpZGVvQnV0dG9uRWxlbWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy50b2dnbGVNdXRlQWxsVmlkZW8oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhclZpZGVvQnV0dG9uRWxlbWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy50b2dnbGVWaWRlb011dGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhckF1ZGlvQnV0dG9uRWxlbWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy50b2dnbGVBdWRpb011dGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhckNoYXRCdXR0b25FbGVtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vcGVuQ2hhdHRpbmcodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnRvb2xiYXJEZXNrdG9wU2hhcmVCdXR0b25FbGVtZW50KS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMudG9nZ2xlU2NyZWVuU2hhcmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhckRlc2t0b3BTaGFyZU1lbnVCdXR0b25FbGVtZW50KS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMudG9nZ2xlU2NyZWVuU2hhcmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhclJlY29yZEJ1dHRvbkVsZW1lbnQpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMudG9nZ2xlUmVjb3JkaW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnRvb2xiYXJIYW5kUmFpc2VCdXR0b25FbGVtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnByb3BzLnRvZ2dsZUhhbmRSYWlzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQodGhpcy50b29sYmFyU2V0dGluZ0J1dHRvbkVsZW1lbnQpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMub3BlblNldHRpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudG9vbGJhckxlYXZlQnV0dG9uRWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5sZWF2ZU1lZXRpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBUb29sQmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodXNlckluZm8sIGxvY2FsVHJhY2tzKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvTXV0ZWQgPSBmYWxzZSwgdmlkZW9NdXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBoYXNBdWRpb1RyYWNrID0gZmFsc2UsIGhhc1ZpZGVvVHJhY2sgPSBmYWxzZTtcclxuICAgICAgICBsb2NhbFRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8pIHtcclxuICAgICAgICAgICAgICAgIGhhc1ZpZGVvVHJhY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrLmlzTXV0ZWQoKSlcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb011dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTykge1xyXG4gICAgICAgICAgICAgICAgaGFzQXVkaW9UcmFjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvTXV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b29sYmFyVmlkZW9CdXR0b25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBoYXNWaWRlb1RyYWNrID8gXCJpbmxpbmUtYmxvY2tcIiA6IFwiXCI7XHJcbiAgICAgICAgdGhpcy50b29sYmFyRGVza3RvcFNoYXJlQnV0dG9uRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gaGFzVmlkZW9UcmFjayA/IFwiaW5saW5lLWJsb2NrXCIgOiBcIlwiO1xyXG4gICAgICAgIHRoaXMudG9vbGJhckF1ZGlvQnV0dG9uRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gaGFzQXVkaW9UcmFjayA/IFwiaW5saW5lLWJsb2NrXCIgOiBcIlwiO1xyXG4gICAgICAgIGlmIChhdWRpb011dGVkKSB7XHJcbiAgICAgICAgICAgICQodGhpcy50b29sYmFyQXVkaW9CdXR0b25FbGVtZW50KS5maW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uQVVESU9fTVVURV9JQ09OKTtcclxuICAgICAgICAgICAgJCh0aGlzLnRvb2xiYXJBdWRpb0J1dHRvbkVsZW1lbnQpLmFkZENsYXNzKFwibXV0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMudG9vbGJhckF1ZGlvQnV0dG9uRWxlbWVudCkuZmluZChcInBhdGhcIikuYXR0cihcImRcIiwgdmVjdG9yX2ljb25fMS5WZWN0b3JJY29uLkFVRElPX1VOTVVURV9JQ09OKTtcclxuICAgICAgICAgICAgJCh0aGlzLnRvb2xiYXJBdWRpb0J1dHRvbkVsZW1lbnQpLnJlbW92ZUNsYXNzKFwibXV0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2aWRlb011dGVkKSB7XHJcbiAgICAgICAgICAgICQodGhpcy50b29sYmFyVmlkZW9CdXR0b25FbGVtZW50KS5maW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uVklERU9fTVVURV9JQ09OKTtcclxuICAgICAgICAgICAgJCh0aGlzLnRvb2xiYXJWaWRlb0J1dHRvbkVsZW1lbnQpLmFkZENsYXNzKFwibXV0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMudG9vbGJhclZpZGVvQnV0dG9uRWxlbWVudCkuZmluZChcInBhdGhcIikuYXR0cihcImRcIiwgdmVjdG9yX2ljb25fMS5WZWN0b3JJY29uLlZJREVPX1VOTVVURV9JQ09OKTtcclxuICAgICAgICAgICAgJCh0aGlzLnRvb2xiYXJWaWRlb0J1dHRvbkVsZW1lbnQpLnJlbW92ZUNsYXNzKFwibXV0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRvb2xCYXIucHJvdG90eXBlLnNldFNjcmVlblNoYXJlID0gZnVuY3Rpb24gKG9uKSB7XHJcbiAgICAgICAgaWYgKG9uKSB7XHJcbiAgICAgICAgICAgICQoXCIudG9vbGJveC1pY29uXCIsIHRoaXMudG9vbGJhckRlc2t0b3BTaGFyZUJ1dHRvbkVsZW1lbnQpLmFkZENsYXNzKFwidG9nZ2xlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICQoXCIudG9vbGJveC1pY29uXCIsIHRoaXMudG9vbGJhckRlc2t0b3BTaGFyZUJ1dHRvbkVsZW1lbnQpLnJlbW92ZUNsYXNzKFwidG9nZ2xlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVG9vbEJhci5wcm90b3R5cGUuc2V0UmVjb3JkaW5nID0gZnVuY3Rpb24gKG9uKSB7XHJcbiAgICAgICAgaWYgKG9uKSB7XHJcbiAgICAgICAgICAgICQodGhpcy50b29sYmFyUmVjb3JkQnV0dG9uRWxlbWVudCkuYWRkQ2xhc3MoXCJsaXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJCh0aGlzLnRvb2xiYXJSZWNvcmRCdXR0b25FbGVtZW50KS5yZW1vdmVDbGFzcyhcImxpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRvb2xCYXIucHJvdG90eXBlLmZhZGVJbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMucm9vdCkuYWRkQ2xhc3MoXCJ2aXNpYmxlXCIpO1xyXG4gICAgfTtcclxuICAgIFRvb2xCYXIucHJvdG90eXBlLmZhZGVPdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzLnJvb3QpLnJlbW92ZUNsYXNzKFwidmlzaWJsZVwiKTtcclxuICAgIH07XHJcbiAgICBUb29sQmFyLnByb3RvdHlwZS5zaG93VW5yZWFkQmFkZ2UgPSBmdW5jdGlvbiAoc2hvdykge1xyXG4gICAgICAgIHRoaXMuY2hhdHRpbmdVbnJlYWRCYWRnZS5zdHlsZS5kaXNwbGF5ID0gISFzaG93ID8gXCJmbGV4XCIgOiBcIm5vbmVcIjtcclxuICAgIH07XHJcbiAgICBUb29sQmFyLnByb3RvdHlwZS5zZXRVbnJlYWRDb3VudCA9IGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgIHRoaXMuY2hhdHRpbmdVbnJlYWRCYWRnZS5pbm5lckhUTUwgPSBcIlwiICsgY291bnQ7XHJcbiAgICB9O1xyXG4gICAgVG9vbEJhci5wcm90b3R5cGUudXBkYXRlQnlSb2xlID0gZnVuY3Rpb24gKGlzSG9zdCkge1xyXG4gICAgICAgIHRoaXMudG9vbGJhckhhbmRSYWlzZUJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGlzSG9zdCA/IFwibm9uZVwiIDogXCJpbmxpbmUtYmxvY2tcIjtcclxuICAgICAgICB0aGlzLnRvb2xiYXJNdXRlQWxsQnV0dG9uRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gIWlzSG9zdCA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xyXG4gICAgICAgIHRoaXMudG9vbGJhck11dGVBbGxWaWRlb0J1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICFpc0hvc3QgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVG9vbEJhcjtcclxufSgpKTtcclxuZXhwb3J0cy5Ub29sQmFyID0gVG9vbEJhcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9vbEJhci5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxUb29sQmFyLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmlkZW9QYW5lbCA9IGV4cG9ydHMuVmlkZW9QYW5lbFByb3BzID0gdm9pZCAwO1xyXG52YXIgTWVkaWFUeXBlXzEgPSByZXF1aXJlKFwiLi4vZW51bS9NZWRpYVR5cGVcIik7XHJcbnZhciBVc2VyUHJvcGVydHlfMSA9IHJlcXVpcmUoXCIuLi9lbnVtL1VzZXJQcm9wZXJ0eVwiKTtcclxudmFyIHNuaXBwZXRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3NuaXBwZXRcIik7XHJcbnZhciB2ZWN0b3JfaWNvbl8xID0gcmVxdWlyZShcIi4vdmVjdG9yX2ljb25cIik7XHJcbnZhciBWaWRlb1BhbmVsUHJvcHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWaWRlb1BhbmVsUHJvcHMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVmlkZW9QYW5lbFByb3BzO1xyXG59KCkpO1xyXG5leHBvcnRzLlZpZGVvUGFuZWxQcm9wcyA9IFZpZGVvUGFuZWxQcm9wcztcclxudmFyIFZpZGVvUGFuZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWaWRlb1BhbmVsKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRDbGFzcyA9IFwidmlkZW8tZWxlbWVudFwiO1xyXG4gICAgICAgIHRoaXMubW9kZXJhdG9yQ2xhc3MgPSBcIm1vZGVyYXRvci1pY29uXCI7XHJcbiAgICAgICAgdGhpcy5hdWRpb011dGVDbGFzcyA9IFwiYXVkaW9NdXRlZFwiO1xyXG4gICAgICAgIHRoaXMudmlkZW9NdXRlQ2xhc3MgPSBcInZpZGVvTXV0ZWRcIjtcclxuICAgICAgICB0aGlzLnVzZXJOYW1lQ2xhc3MgPSBcImRpc3BsYXluYW1lXCI7XHJcbiAgICAgICAgdGhpcy5zaG9ydE5hbWVDbGFzcyA9IFwiYXZhdGFyLWNvbnRhaW5lclwiO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3BlYWtlckNsYXNzID0gXCJhY3RpdmUtc3BlYWtlclwiO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUNoYXRDbGFzcyA9IFwicHJpdmF0ZS1jaGF0XCI7XHJcbiAgICAgICAgdGhpcy5wb3B1cE1lbnVCdXR0b25DbGFzcyA9IFwicmVtb3RldmlkZW9tZW51XCI7XHJcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHRoaXMucGFuZWxDbGFzcyA9IHRoaXMucHJvcHMucGFuZWxDbGFzcztcclxuICAgICAgICB0aGlzLmZ1bGxzY3JlZW5DbGFzcyA9IHRoaXMucHJvcHMuZnVsbHNjcmVlbkNsYXNzO1xyXG4gICAgICAgIHRoaXMucG9wdXBNZW51Q2xhc3MgPSB0aGlzLnByb3BzLnBvcHVwTWVudUNsYXNzO1xyXG4gICAgICAgIHRoaXMuSWQgPSArK1ZpZGVvUGFuZWwublBhbmVsSW5zdGFuY2VJZDtcclxuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLmNyZWF0ZSgpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtID0gJChcInZpZGVvXCIsIHRoaXMucm9vdClbMF07XHJcbiAgICAgICAgdGhpcy5hdWRpb0VsZW0gPSAkKFwiYXVkaW9cIiwgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLm5hbWVFbGVtID0gJChcIi5cIiArIHRoaXMudXNlck5hbWVDbGFzcywgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLmF2YXRhck5hbWVFbGVtID0gJChcIi5cIiArIHRoaXMuc2hvcnROYW1lQ2xhc3MsIHRoaXMucm9vdClbMF07XHJcbiAgICAgICAgLy93aGl0ZSBzbWFsbCBpY29ucyBhdCB0aGUgYm90dG9tIG9mIHBhbmVsXHJcbiAgICAgICAgdGhpcy5hdWRpb011dGVJY29uRWxlbSA9ICQoXCIuXCIgKyB0aGlzLmF1ZGlvTXV0ZUNsYXNzLCB0aGlzLnJvb3QpWzBdO1xyXG4gICAgICAgIHRoaXMudmlkZW9NdXRlSWNvbkVsZW0gPSAkKFwiLlwiICsgdGhpcy52aWRlb011dGVDbGFzcywgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLm1vZGVyYXRvckljb25FbGVtID0gJChcIi5cIiArIHRoaXMubW9kZXJhdG9yQ2xhc3MsIHRoaXMucm9vdClbMF07XHJcbiAgICAgICAgLy9tZW51IGl0ZW1zIFxyXG4gICAgICAgIHRoaXMuZ3JhbnRNb2RlcmF0b3JNZW51SXRlbSA9ICQoXCJsaS5ncmFudC1tb2RlcmF0b3JcIiwgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtID0gJChcImxpLmF1ZGlvLW11dGVcIiwgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtID0gJChcImxpLnZpZGVvLW11dGVcIiwgdGhpcy5yb290KVswXTtcclxuICAgICAgICB0aGlzLmZ1bGxzY3JlZW5NdXRlSXRlbSA9ICQoXCJsaS5mdWxsc2NyZWVuXCIsIHRoaXMucm9vdClbMF07XHJcbiAgICAgICAgdGhpcy5raWNrUGFydGljaXBhbnRNZW51SXRlbSA9ICQoXCJsaS5raWNrLXBhcnRpY2lwYW50XCIsIHRoaXMucm9vdClbMF07XHJcbiAgICAgICAgdGhpcy5yZW1vdGVDb250cm9sTWVudUl0ZW0gPSAkKFwibGkucmVtb3RlLWNvbnRyb2xcIiwgdGhpcy5yb290KVswXTtcclxuICAgICAgICAvL3RoaXMuYXR0YWNoSGFuZGxlcnMoKTtcclxuICAgIH1cclxuICAgIFZpZGVvUGFuZWwucHJvdG90eXBlLmF0dGFjaEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy50aWxlSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGlsZXZpZXdcIik7XHJcbiAgICAgICAgJCh0aGlzLnJvb3QpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBcIi5cIiArIF90aGlzLnBvcHVwTWVudUJ1dHRvbkNsYXNzLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAkKFwiLlwiICsgX3RoaXMucG9wdXBNZW51Q2xhc3MpLnJlbW92ZUNsYXNzKFwidmlzaWJsZVwiKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiLlwiICsgX3RoaXMucG9wdXBNZW51Q2xhc3MpLmFkZENsYXNzKFwidmlzaWJsZVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAnbGkub3ZlcmZsb3ctbWVudS1pdGVtJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KFwiLlwiICsgX3RoaXMucG9wdXBNZW51Q2xhc3MpLnJlbW92ZUNsYXNzKFwidmlzaWJsZVwiKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgJy5mdWxsc2NyZWVuJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgJChfdGhpcy5yb290KS50b2dnbGVDbGFzcyhfdGhpcy5mdWxsc2NyZWVuQ2xhc3MpO1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5yZWZyZXNoR3JpZCgpO1xyXG4gICAgICAgICAgICB2YXIgbGFiZWwgPSAkKHRoaXMpLmZpbmQoXCIubGFiZWxcIik7XHJcbiAgICAgICAgICAgIGlmICgkKF90aGlzLnJvb3QpLmhhc0NsYXNzKF90aGlzLmZ1bGxzY3JlZW5DbGFzcykpIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsLmh0bWwoXCJFeGl0IGZ1bGwgc2NyZWVuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwuaHRtbChcIlZpZXcgZnVsbCBzY3JlZW5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImRpc3BsYXktdmlkZW9cIik7XHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJkaXNwbGF5LW5hbWUtb24tdmlkZW9cIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImRpc3BsYXktbmFtZS1vbi12aWRlb1wiKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImRpc3BsYXktdmlkZW9cIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKCdkYmxjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuZmluZChcIi5mdWxsc2NyZWVuXCIpLnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHRoaXMudGlsZUljb24pLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJChfdGhpcy5yb290KS50b2dnbGVDbGFzcyhfdGhpcy5mdWxsc2NyZWVuQ2xhc3MpO1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5yZWZyZXNoR3JpZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZpZGVvUGFuZWwucHJvdG90eXBlLnNldFNob3RuYW1lVmlzaWJsZSA9IGZ1bmN0aW9uIChzaG93KSB7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJOYW1lRWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtLnN0eWxlLnZpc2liaWxpdHkgPSBzaG93ID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiO1xyXG4gICAgfTtcclxuICAgIFZpZGVvUGFuZWwucHJvdG90eXBlLnNldFVzZXJOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWVFbGVtLmlubmVySFRNTCA9IG5hbWU7XHJcbiAgICAgICAgJChcInRleHRcIiwgdGhpcy5hdmF0YXJOYW1lRWxlbSkuaHRtbChzbmlwcGV0XzEuYXZhdGFyTmFtZShuYW1lKSk7XHJcbiAgICB9O1xyXG4gICAgVmlkZW9QYW5lbC5wcm90b3R5cGUuc2hvd01vZGVyYXRvckljb24gPSBmdW5jdGlvbiAoc2hvdykge1xyXG4gICAgICAgIHRoaXMubW9kZXJhdG9ySWNvbkVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcclxuICAgIH07XHJcbiAgICBWaWRlb1BhbmVsLnByb3RvdHlwZS5zZXRIaWdobGlnaHQgPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgIGlmIChoKVxyXG4gICAgICAgICAgICAkKHRoaXMucm9vdCkuYWRkQ2xhc3ModGhpcy5hY3RpdmVTcGVha2VyQ2xhc3MpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgJCh0aGlzLnJvb3QpLnJlbW92ZUNsYXNzKHRoaXMuYWN0aXZlU3BlYWtlckNsYXNzKTtcclxuICAgIH07XHJcbiAgICBWaWRlb1BhbmVsLnByb3RvdHlwZS51cGRhdGVQYW5lbE9uSml0c2lVc2VyID0gZnVuY3Rpb24gKG15SW5mbywgaml0c2lVc2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIC8vc2V0IG5hbWVcclxuICAgICAgICB0aGlzLnNldFVzZXJOYW1lKGppdHNpVXNlci5nZXREaXNwbGF5TmFtZSgpKTtcclxuICAgICAgICAvL2hpZGUgc2hvdG5hbWUgaWYgZXhpc3QgdmlzaWJsZSB2aWRlbyB0cmFja1xyXG4gICAgICAgIHZhciBpc1Zpc2libGVWaWRlbyA9IGZhbHNlO1xyXG4gICAgICAgIGppdHNpVXNlci5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8gJiYgIXRyYWNrLmlzTXV0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgaXNWaXNpYmxlVmlkZW8gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXRTaG90bmFtZVZpc2libGUoIWlzVmlzaWJsZVZpZGVvKTtcclxuICAgICAgICAvL2JvdHRvbSBzbWFsbCBpY29uc1xyXG4gICAgICAgIHRoaXMudmlkZW9NdXRlSWNvbkVsZW0uc3R5bGUuZGlzcGxheSA9IGppdHNpVXNlci5pc1ZpZGVvTXV0ZWQoKSA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMuYXVkaW9NdXRlSWNvbkVsZW0uc3R5bGUuZGlzcGxheSA9IGppdHNpVXNlci5pc0F1ZGlvTXV0ZWQoKSA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMubW9kZXJhdG9ySWNvbkVsZW0uc3R5bGUuZGlzcGxheSA9IGppdHNpVXNlci5nZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkuSXNIb3N0KSA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xyXG4gICAgICAgIC8vcG9wdXAgbWVudVxyXG4gICAgICAgIGlmIChteUluZm8uSXNIb3N0KSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VySGF2ZUNhbWVyYV8xID0gZmFsc2UsIHVzZXJIYXZlTWljcm9waG9uZV8xID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGppdHNpVXNlci5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPKVxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJIYXZlQ2FtZXJhXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU8pXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckhhdmVNaWNyb3Bob25lXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy52aWRlb011dGVNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gdXNlckhhdmVDYW1lcmFfMSA/IFwiZmxleFwiIDogXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9NdXRlTWVudUl0ZW0uc3R5bGUuZGlzcGxheSA9IHVzZXJIYXZlTWljcm9waG9uZV8xID8gXCJmbGV4XCIgOiBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5ncmFudE1vZGVyYXRvck1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICAgICAgdGhpcy5raWNrUGFydGljaXBhbnRNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3RlQ29udHJvbE1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9NdXRlTWVudUl0ZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5ncmFudE1vZGVyYXRvck1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5raWNrUGFydGljaXBhbnRNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3RlQ29udHJvbE1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGppdHNpVXNlci5nZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkuSXNIb3N0KSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyYW50TW9kZXJhdG9yTWVudUl0ZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmtpY2tQYXJ0aWNpcGFudE1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdGVDb250cm9sTWVudUl0ZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3BvcHVwIG1lbnUgYXVkaW8gaWNvbi9sYWJlbCBjaGFuZ2VcclxuICAgICAgICBpZiAodGhpcy5hdWRpb011dGVNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID09PSAnZmxleCcpIHtcclxuICAgICAgICAgICAgaWYgKGppdHNpVXNlci5pc0F1ZGlvTXV0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJVbm11dGUgQXVkaW9cIik7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMuYXVkaW9NdXRlTWVudUl0ZW0pLmZpbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIHZlY3Rvcl9pY29uXzEuVmVjdG9ySWNvbi5BVURJT19NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJNdXRlIEF1ZGlvXCIpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uQVVESU9fVU5NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPT09ICdmbGV4Jykge1xyXG4gICAgICAgICAgICBpZiAoaml0c2lVc2VyLmlzVmlkZW9NdXRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMudmlkZW9NdXRlTWVudUl0ZW0pLmZpbmQoXCIubGFiZWxcIikuaHRtbChcIlVubXV0ZSBWaWRlb1wiKTtcclxuICAgICAgICAgICAgICAgICQodGhpcy52aWRlb011dGVNZW51SXRlbSkuZmluZChcInBhdGhcIikuYXR0cihcImRcIiwgdmVjdG9yX2ljb25fMS5WZWN0b3JJY29uLlZJREVPX01VVEVfSUNPTik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMudmlkZW9NdXRlTWVudUl0ZW0pLmZpbmQoXCIubGFiZWxcIikuaHRtbChcIk11dGUgVmlkZW9cIik7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMudmlkZW9NdXRlTWVudUl0ZW0pLmZpbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIHZlY3Rvcl9pY29uXzEuVmVjdG9ySWNvbi5WSURFT19VTk1VVEVfSUNPTik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9wb3B1cCBtZW51IGhhbmRsZXJzXHJcbiAgICAgICAgaWYgKG15SW5mby5Jc0hvc3QpIHtcclxuICAgICAgICAgICAgJCh0aGlzLmdyYW50TW9kZXJhdG9yTWVudUl0ZW0pLnVuYmluZCgnY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpc18xLnByb3BzLmdyYW50TW9kZXJhdG9yUm9sZShqaXRzaVVzZXIuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKHRoaXMuYXVkaW9NdXRlTWVudUl0ZW0pLnVuYmluZCgnY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpc18xLnByb3BzLm11dGVVc2VyQXVkaW8oaml0c2lVc2VyLmdldElkKCksICFqaXRzaVVzZXIuaXNBdWRpb011dGVkKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtKS51bmJpbmQoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXNfMS5wcm9wcy5tdXRlVXNlclZpZGVvKGppdHNpVXNlci5nZXRJZCgpLCAhaml0c2lVc2VyLmlzVmlkZW9NdXRlZCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQodGhpcy5raWNrUGFydGljaXBhbnRNZW51SXRlbSkudW5iaW5kKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzXzEucHJvcHMua2lja1BhcnRpY2lwYW50T3V0KGppdHNpVXNlci5nZXRJZCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQodGhpcy5yZW1vdGVDb250cm9sTWVudUl0ZW0pLnVuYmluZCgnY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpc18xLnByb3BzLnNlbmRSZW1vdGVDb250cm9sUmVwbHkoJ3Blcm1pc3Npb25zJywge30sIGppdHNpVXNlci5nZXRJZCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcHJpdmF0ZSBjaGF0IGhhbmRsZXJcclxuICAgICAgICAkKHRoaXMucm9vdCkuZmluZChcIi5cIiArIHRoaXMucHJpdmF0ZUNoYXRDbGFzcykudW5iaW5kKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXNfMS5wcm9wcy5vcGVuUHJpdmF0ZUNoYXQoaml0c2lVc2VyLmdldElkKCksIGppdHNpVXNlci5nZXREaXNwbGF5TmFtZSgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL2FjdGl2ZSBzcGVha2VyKGJsdWUgYm9yZGVyKVxyXG4gICAgICAgICQodGhpcy5yb290KS5yZW1vdmVDbGFzcyh0aGlzLmFjdGl2ZVNwZWFrZXJDbGFzcyk7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAkKHRoaXMucm9vdCkub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLWkgYW0gaGVyZVwiKTtcclxuICAgICAgICAgICAgaWYgKGUud2hpY2ggPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0taSBhbSBoZXJlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhZSA9IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbjogZS5idXR0b24gKyAxLFxyXG4gICAgICAgICAgICAgICAgeDogZS5vZmZzZXRYLFxyXG4gICAgICAgICAgICAgICAgeTogZS5vZmZzZXRZXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF90aGlzLnByb3BzLnNlbmRSZW1vdGVDb250cm9sUmVwbHkoJ21vdXNlZG93bicsIGFlLCBqaXRzaVVzZXIuZ2V0SWQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnJvb3QpLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy9lLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0teW91IGFyZSBoZXJlXCIpO1xyXG4gICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMylcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGFlID0ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uOiBlLmJ1dHRvbiArIDEsXHJcbiAgICAgICAgICAgICAgICB4OiBlLm9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICB5OiBlLm9mZnNldFlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMuc2VuZFJlbW90ZUNvbnRyb2xSZXBseSgnbW91c2V1cCcsIGFlLCBqaXRzaVVzZXIuZ2V0SWQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh0aGlzLnJvb3QpLm9uKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGAke3RoaXMub2Zmc2V0SGVpZ2h0fS0tLSR7dGhpcy5vZmZzZXRXaWR0aH0tJHt0aGlzLnNjcm9sbFdpZHRofS0ke3RoaXMuY2xpZW50SGVpZ2h0fWApO1xyXG4gICAgICAgICAgICAvL2UucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS1oZSBpcyBoZXJlXCIpO1xyXG4gICAgICAgICAgICB2YXIgYWUgPSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b246IGUuYnV0dG9uICsgMSxcclxuICAgICAgICAgICAgICAgIHg6IGUub2Zmc2V0WCAvIHRoaXMub2Zmc2V0V2lkdGgsXHJcbiAgICAgICAgICAgICAgICB5OiBlLm9mZnNldFkgLyB0aGlzLm9mZnNldEhlaWdodFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5zZW5kUmVtb3RlQ29udHJvbFJlcGx5KCdtb3VzZW1vdmUnLCBhZSwgaml0c2lVc2VyLmdldElkKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKi9cclxuICAgICAgICAkKHdpbmRvdykudW5iaW5kKCkub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGAke3RoaXMub2Zmc2V0SGVpZ2h0fS0tLSR7dGhpcy5vZmZzZXRXaWR0aH0tJHt0aGlzLnNjcm9sbFdpZHRofS0ke3RoaXMuY2xpZW50SGVpZ2h0fWApO1xyXG4gICAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gW107XHJcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMucHVzaCgnc2hpZnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMucHVzaCgnY29udHJvbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLmFsdEtleSkge1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ2FsdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLm1ldGFLZXkpIHtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVycy5wdXNoKCdjb21tYW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFlID0ge1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXHJcbiAgICAgICAgICAgICAgICBrZXk6IGUua2V5Q29kZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS1rZXkgaXMgaGVyZS0tLS0tXCIgKyBlLmtleUNvZGUpO1xyXG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5zZW5kUmVtb3RlQ29udHJvbFJlcGx5KCdrZXlkb3duJywgYWUsIGppdHNpVXNlci5nZXRJZCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKHdpbmRvdykub24oJ2tleXVwJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgJHt0aGlzLm9mZnNldEhlaWdodH0tLS0ke3RoaXMub2Zmc2V0V2lkdGh9LSR7dGhpcy5zY3JvbGxXaWR0aH0tJHt0aGlzLmNsaWVudEhlaWdodH1gKTtcclxuICAgICAgICAgICAgdmFyIG1vZGlmaWVycyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3NoaWZ0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ2NvbnRyb2wnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5hbHRLZXkpIHtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVycy5wdXNoKCdhbHQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5tZXRhS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMucHVzaCgnY29tbWFuZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhZSA9IHtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzLFxyXG4gICAgICAgICAgICAgICAga2V5OiBlLmtleUNvZGUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0ta2V5IGlzIGhlcmUtLS0tLVwiICsgZS5rZXlDb2RlKTtcclxuICAgICAgICAgICAgX3RoaXMucHJvcHMuc2VuZFJlbW90ZUNvbnRyb2xSZXBseSgna2V5dXAnLCBhZSwgaml0c2lVc2VyLmdldElkKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZpZGVvUGFuZWwucHJvdG90eXBlLnVwZGF0ZVBhbmVsT25NeUJHVXNlciA9IGZ1bmN0aW9uIChteUluZm8sIGxvY2FsVHJhY2tzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhdWRpb011dGVkID0gdHJ1ZSwgdmlkZW9NdXRlZCA9IHRydWU7XHJcbiAgICAgICAgbG9jYWxUcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPICYmICF0cmFjay5pc011dGVkKCkpXHJcbiAgICAgICAgICAgICAgICB2aWRlb011dGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLkFVRElPICYmICF0cmFjay5pc011dGVkKCkpXHJcbiAgICAgICAgICAgICAgICBhdWRpb011dGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9uYW1lXHJcbiAgICAgICAgdGhpcy5zZXRVc2VyTmFtZShteUluZm8uTmFtZSk7XHJcbiAgICAgICAgdmFyIGlzVmlzaWJsZVZpZGVvID0gZmFsc2U7XHJcbiAgICAgICAgbG9jYWxUcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPICYmICF0cmFjay5pc011dGVkKCkpIHtcclxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZVZpZGVvID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2V0U2hvdG5hbWVWaXNpYmxlKCFpc1Zpc2libGVWaWRlbyk7XHJcbiAgICAgICAgLy9ib3R0b20gc21hbGwgaWNvbnNcclxuICAgICAgICB0aGlzLnZpZGVvTXV0ZUljb25FbGVtLnN0eWxlLmRpc3BsYXkgPSB2aWRlb011dGVkID8gXCJibG9ja1wiIDogXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5hdWRpb011dGVJY29uRWxlbS5zdHlsZS5kaXNwbGF5ID0gYXVkaW9NdXRlZCA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMubW9kZXJhdG9ySWNvbkVsZW0uc3R5bGUuZGlzcGxheSA9IG15SW5mby5Jc0hvc3QgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcclxuICAgICAgICAvL3BvcHVwIG1lbnVcclxuICAgICAgICBpZiAobXlJbmZvLklzSG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBteUluZm8ubWVkaWFQb2xpY3kudXNlQ2FtZXJhID8gXCJmbGV4XCIgOiBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb011dGVNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gbXlJbmZvLm1lZGlhUG9saWN5LnVzZU1pYyA/IFwiZmxleFwiIDogXCJub25lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb011dGVNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ3JhbnRNb2RlcmF0b3JNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5raWNrUGFydGljaXBhbnRNZW51SXRlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVDb250cm9sTWVudUl0ZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIC8vcG9wdXAgbWVudSBhdWRpbyBpY29uL2xhYmVsIGNoYW5nZVxyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPT09ICdmbGV4Jykge1xyXG4gICAgICAgICAgICBpZiAoYXVkaW9NdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJVbm11dGUgQXVkaW9cIik7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMuYXVkaW9NdXRlTWVudUl0ZW0pLmZpbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIHZlY3Rvcl9pY29uXzEuVmVjdG9ySWNvbi5BVURJT19NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJNdXRlIEF1ZGlvXCIpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLmF1ZGlvTXV0ZU1lbnVJdGVtKS5maW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uQVVESU9fVU5NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtLnN0eWxlLmRpc3BsYXkgPT09ICdmbGV4Jykge1xyXG4gICAgICAgICAgICBpZiAodmlkZW9NdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJVbm11dGUgVmlkZW9cIik7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMudmlkZW9NdXRlTWVudUl0ZW0pLmZpbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIHZlY3Rvcl9pY29uXzEuVmVjdG9ySWNvbi5WSURFT19NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtKS5maW5kKFwiLmxhYmVsXCIpLmh0bWwoXCJNdXRlIFZpZGVvXCIpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtKS5maW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCB2ZWN0b3JfaWNvbl8xLlZlY3Rvckljb24uVklERU9fVU5NVVRFX0lDT04pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcG9wdXAgbWVudSBoYW5kbGVyc1xyXG4gICAgICAgIGlmIChteUluZm8uSXNIb3N0KSB7XHJcbiAgICAgICAgICAgICQodGhpcy5hdWRpb011dGVNZW51SXRlbSkudW5iaW5kKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzXzEucHJvcHMubXV0ZU15QXVkaW8oIWF1ZGlvTXV0ZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCh0aGlzLnZpZGVvTXV0ZU1lbnVJdGVtKS51bmJpbmQoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXNfMS5wcm9wcy5tdXRlTXlWaWRlbyghdmlkZW9NdXRlZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2hpZGUgcHJpdmF0ZS1jaGF0IGl0ZW1cclxuICAgICAgICAkKHRoaXMucm9vdCkuZmluZChcIi5cIiArIHRoaXMucHJpdmF0ZUNoYXRDbGFzcykuaGlkZSgpO1xyXG4gICAgICAgIC8vYWN0aXZlIHNwZWFrZXIoYmx1ZSBib3JkZXIpXHJcbiAgICAgICAgJCh0aGlzLnJvb3QpLmFkZENsYXNzKHRoaXMuYWN0aXZlU3BlYWtlckNsYXNzKTtcclxuICAgIH07XHJcbiAgICBWaWRlb1BhbmVsLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZpZGVvVGFnID0gXCI8dmlkZW8gYXV0b3BsYXkgcGxheXNpbmxpbmUgIGNsYXNzPSdcIiArIHRoaXMudmlkZW9FbGVtZW50Q2xhc3MgKyBcIicgaWQ9J3JlbW90ZVZpZGVvX1wiICsgdGhpcy5JZCArIFwiJz48L3ZpZGVvPlwiO1xyXG4gICAgICAgIHZhciBhdWRpb1RhZyA9IFwiPGF1ZGlvIGF1dG9wbGF5PVxcXCJcXFwiIGlkPVxcXCJyZW1vdGVBdWRpb19cIiArIHRoaXMuSWQgKyBcIlxcXCI+PC9hdWRpbz5cIjtcclxuICAgICAgICB2YXIgYXZhdGFyVmlzaWJsZSA9ICd2aXNpYmxlJztcclxuICAgICAgICB2YXIgY2FtZXJhU3RhdHVzID0gJzxkaXYgY2xhc3M9XCJpbmRpY2F0b3ItY29udGFpbmVyIHZpZGVvTXV0ZWRcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbmRpY2F0b3ItaWNvbi1jb250YWluZXIgIHRvb2xiYXItaWNvblwiIGlkPVwiXCI+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqaXRzaS1pY29uIFwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBoZWlnaHQ9XCIxM1wiIGlkPVwiY2FtZXJhLWRpc2FibGVkXCIgd2lkdGg9XCIxM1wiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTQuMzc1IDIuNjg4TDI4IDI2LjMxM2wtMS42ODggMS42ODgtNC4yNS00LjI1Yy0uMTg4LjEyNS0uNS4yNS0uNzUuMjVoLTE2Yy0uNzUgMC0xLjMxMy0uNTYzLTEuMzEzLTEuMzEzVjkuMzEzYzAtLjc1LjU2My0xLjMxMyAxLjMxMy0xLjMxM2gxTDIuNjg3IDQuMzc1em0yMy42MjUgNnYxNC4yNUwxMy4wNjIgOGg4LjI1Yy43NSAwIDEuMzc1LjU2MyAxLjM3NSAxLjMxM3Y0LjY4OHpcIj48L3BhdGg+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XHJcbiAgICAgICAgdmFyIG1pY1N0YXR1cyA9ICc8ZGl2IGNsYXNzPVwiaW5kaWNhdG9yLWNvbnRhaW5lciBhdWRpb011dGVkXCI+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbmRpY2F0b3ItaWNvbi1jb250YWluZXIgIHRvb2xiYXItaWNvblwiIGlkPVwiXCI+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaml0c2ktaWNvbiBcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGhlaWdodD1cIjEzXCIgaWQ9XCJtaWMtZGlzYWJsZWRcIiB3aWR0aD1cIjEzXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTUuNjg4IDRsMjIuMzEzIDIyLjMxMy0xLjY4OCAxLjY4OC01LjU2My01LjU2M2MtMSAuNjI1LTIuMjUgMS0zLjQzOCAxLjE4OHY0LjM3NWgtMi42MjV2LTQuMzc1Yy00LjM3NS0uNjI1LTgtNC4zNzUtOC04LjkzOGgyLjI1YzAgNCAzLjM3NSA2Ljc1IDcuMDYzIDYuNzUgMS4wNjMgMCAyLjEyNS0uMjUgMy4wNjMtLjY4OGwtMi4xODgtMi4xODhjLS4yNS4wNjMtLjU2My4xMjUtLjg3NS4xMjUtMi4xODggMC00LTEuODEzLTQtNHYtMWwtOC04ek0yMCAxNC44NzVsLTgtNy45Mzh2LS4yNWMwLTIuMTg4IDEuODEzLTQgNC00czQgMS44MTMgNCA0djguMTg4em01LjMxMy0uMTg3YTguODI0IDguODI0IDAgMDEtMS4xODggNC4zNzVMMjIuNSAxNy4zNzVjLjM3NS0uODEzLjU2My0xLjY4OC41NjMtMi42ODhoMi4yNXpcIj48L3BhdGg+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuICAgICAgICB2YXIgbW9kZXJhdG9yU3RhdHVzID0gJzxkaXYgY2xhc3M9XCJtb2RlcmF0b3ItaWNvbiByaWdodFwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5kaWNhdG9yLWNvbnRhaW5lclwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImluZGljYXRvci1pY29uLWNvbnRhaW5lciBmb2N1c2luZGljYXRvciB0b29sYmFyLWljb25cIiBpZD1cIlwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaml0c2ktaWNvbiBcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjEzXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTYgMjAuNTYzbDUgMy0xLjMxMy01LjY4OEwyNC4xMjUgMTRsLTUuODc1LS41TDE2IDguMTI1IDEzLjc1IDEzLjVsLTUuODc1LjUgNC40MzggMy44NzVMMTEgMjMuNTYzem0xMy4zMTMtOC4yNWwtNy4yNSA2LjMxMyAyLjE4OCA5LjM3NS04LjI1LTUtOC4yNSA1IDIuMTg4LTkuMzc1LTcuMjUtNi4zMTMgOS41NjMtLjgxMyAzLjc1LTguODEzIDMuNzUgOC44MTN6XCI+PC9wYXRoPiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG4gICAgICAgIHZhciBwYW5lbEh0bWwgPSBcIlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcIlwiICsgdGhpcy5wYW5lbENsYXNzICsgXCIgZGlzcGxheS12aWRlb1xcXCIgb25Db250ZXh0TWVudSA9IFxcXCJyZXR1cm4gZmFsc2U7XFxcIj5cXG4gICAgICAgICAgICBcIiArIHZpZGVvVGFnICsgXCIgXFxuICAgICAgICAgICAgXCIgKyBhdWRpb1RhZyArIFwiXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmlkZW9jb250YWluZXJfX3Rvb2xiYXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2PiBcIiArIGNhbWVyYVN0YXR1cyArIFwiIFwiICsgbWljU3RhdHVzICsgXCIgXCIgKyBtb2RlcmF0b3JTdGF0dXMgKyBcIjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZpZGVvY29udGFpbmVyX19ob3Zlck92ZXJsYXlcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRpc3BsYXlOYW1lQ29udGFpbmVyXFxcIj48c3BhbiBjbGFzcz1cXFwiZGlzcGxheW5hbWVcXFwiIGlkPVxcXCJsb2NhbERpc3BsYXlOYW1lXFxcIj5OYW1lPC9zcGFuPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF2YXRhci1jb250YWluZXIgXCIgKyBhdmF0YXJWaXNpYmxlICsgXCJcXFwiIHN0eWxlPVxcXCJoZWlnaHQ6IDEwNS41cHg7IHdpZHRoOiAxMDUuNXB4O1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF2YXRhciAgdXNlckF2YXRhclxcXCIgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IHJnYmEoMjM0LCAyNTUsIDEyOCwgMC40KTsgZm9udC1zaXplOiAxODAlOyBoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlO1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVxcXCJhdmF0YXItc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTAwIDEwMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB4bWxuczp4bGluaz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQgZG9taW5hbnQtYmFzZWxpbmU9XFxcImNlbnRyYWxcXFwiIGZpbGw9XFxcInJnYmEoMjU1LDI1NSwyNTUsLjYpXFxcIiBmb250LXNpemU9XFxcIjQwcHRcXFwiIHRleHQtYW5jaG9yPVxcXCJtaWRkbGVcXFwiIHg9XFxcIjUwXFxcIiB5PVxcXCI1MFxcXCI+TmFtZTwvdGV4dD5cXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2RpdiA+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIlwiICsgdGhpcy5wb3B1cE1lbnVCdXR0b25DbGFzcyArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiXFxcIiBpZD1cXFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJwb3BvdmVyLXRyaWdnZXIgcmVtb3RlLXZpZGVvLW1lbnUtdHJpZ2dlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaml0c2ktaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgaGVpZ2h0PVxcXCIxZW1cXFwiIHdpZHRoPVxcXCIxZW1cXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVxcXCJNMTIgMTUuOTg0YzEuMDc4IDAgMi4wMTYuOTM4IDIuMDE2IDIuMDE2cy0uOTM4IDIuMDE2LTIuMDE2IDIuMDE2UzkuOTg0IDE5LjA3OCA5Ljk4NCAxOHMuOTM4LTIuMDE2IDIuMDE2LTIuMDE2em0wLTZjMS4wNzggMCAyLjAxNi45MzggMi4wMTYgMi4wMTZzLS45MzggMi4wMTYtMi4wMTYgMi4wMTZTOS45ODQgMTMuMDc4IDkuOTg0IDEyIDEwLjkyMiA5Ljk4NCAxMiA5Ljk4NHptMC0xLjk2OGMtMS4wNzggMC0yLjAxNi0uOTM4LTIuMDE2LTIuMDE2UzEwLjkyMiAzLjk4NCAxMiAzLjk4NHMyLjAxNi45MzggMi4wMTYgMi4wMTZTMTMuMDc4IDguMDE2IDEyIDguMDE2elxcXCI+PC9wYXRoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJcIiArIHRoaXMucG9wdXBNZW51Q2xhc3MgKyBcIlxcXCIgdGFiSW5kZXg9LTEgc3R5bGU9XFxcInBvc2l0aW9uOiByZWxhdGl2ZTsgcmlnaHQ6IDE2OHB4OyAgdG9wOiAyNXB4OyB3aWR0aDogMTc1cHg7XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDx1bCBhcmlhLWxhYmVsPVxcXCJNb3JlIGFjdGlvbnMgbWVudVxcXCIgY2xhc3M9XFxcIm92ZXJmbG93LW1lbnVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxhYmVsPVxcXCJHcmFudCBNb2RlcmF0b3JcXFwiIGNsYXNzPVxcXCJvdmVyZmxvdy1tZW51LWl0ZW0gZ3JhbnQtbW9kZXJhdG9yXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm92ZXJmbG93LW1lbnUtaXRlbS1pY29uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImppdHNpLWljb24gXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGhlaWdodD1cXFwiMjJcXFwiIHdpZHRoPVxcXCIyMlxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIiBjbGlwLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGQ9XFxcIk0xNCA0YTIgMiAwIDAxLTEuMjk4IDEuODczbDEuNTI3IDQuMDcuNzE2IDEuOTEyYy4wNjIuMDc0LjEyNi4wNzQuMTY1LjAzNWwxLjQ0NC0xLjQ0NCAyLjAzMi0yLjAzMmEyIDIgMCAxMTEuMjQ4LjU3OUwxOSAxOWEyIDIgMCAwMS0yIDJIN2EyIDIgMCAwMS0yLTJMNC4xNjYgOC45OTNhMiAyIDAgMTExLjI0OC0uNTc5bDIuMDMzIDIuMDMzTDguODkgMTEuODljLjA4Ny4wNDIuMTQ1LjAxNi4xNjUtLjAzNWwuNzE2LTEuOTEyIDEuNTI3LTQuMDdBMiAyIDAgMTExNCA0ek02Ljg0IDE3bC0uMzkzLTQuNzI1IDEuMDI5IDEuMDNhMi4xIDIuMSAwIDAwMy40NTEtLjc0OEwxMiA5LjY5NmwxLjA3MyAyLjg2YTIuMSAyLjEgMCAwMDMuNDUxLjc0OGwxLjAzLTEuMDNMMTcuMTYgMTdINi44NHpcXFwiPjwvcGF0aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibGFiZWxcXFwiPkdyYW50IE1vZGVyYXRvcjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxhYmVsPVxcXCJNdXRlXFxcIiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtIGF1ZGlvLW11dGVcXFwiIHRhYmluZGV4PVxcXCIwXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaml0c2ktaWNvbiBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgZmlsbD1cXFwibm9uZVxcXCIgaGVpZ2h0PVxcXCIyMlxcXCIgd2lkdGg9XFxcIjIyXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjIgMjJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTcuMzMzIDguNjVWMTFhMy42NjggMy42NjggMCAwMDIuNzU3IDMuNTUzLjkyOC45MjggMCAwMC0uMDA3LjExNHYxLjc1N0E1LjUwMSA1LjUwMSAwIDAxNS41IDExYS45MTcuOTE3IDAgMTAtMS44MzMgMGMwIDMuNzQgMi43OTkgNi44MjYgNi40MTYgNy4yNzd2Ljk3M2EuOTE3LjkxNyAwIDAwMS44MzQgMHYtLjk3M2E3LjI5NyA3LjI5NyAwIDAwMy41NjgtMS40NzVsMy4wOTEgMy4wOTJhLjkzMi45MzIgMCAxMDEuMzE4LTEuMzE4bC0zLjA5MS0zLjA5MS4wMS0uMDEzLTEuMzExLTEuMzExLS4wMS4wMTMtMS4zMjUtMS4zMjUuMDA4LS4wMTQtMS4zOTUtMS4zOTVhMS4yNCAxLjI0IDAgMDEtLjAwNC4wMThsLTMuNjEtMy42MDl2LS4wMjNMNy4zMzQgNS45OTN2LjAyM2wtMy45MDktMy45MWEuOTMyLjkzMiAwIDEwLTEuMzE4IDEuMzE4TDcuMzMzIDguNjV6bTEuODM0IDEuODM0VjExYTEuODMzIDEuODMzIDAgMDAyLjI5MSAxLjc3NmwtMi4yOTEtMi4yOTJ6bTMuNjgyIDMuNjgzYy0uMjkuMTctLjYwNi4zLS45NC4zODZhLjkyOC45MjggMCAwMS4wMDguMTE0djEuNzU3YTUuNDcgNS40NyAwIDAwMi4yNTctLjkzMmwtMS4zMjUtMS4zMjV6bTEuODE4LTMuNDc2bC0xLjgzNC0xLjgzNFY1LjVhMS44MzMgMS44MzMgMCAwMC0zLjY0NC0uMjg3bC0xLjQzLTEuNDNBMy42NjYgMy42NjYgMCAwMTE0LjY2NyA1LjV2NS4xOXptMS42NjUgMS42NjVsMS40NDcgMS40NDdjLjM1Ny0uODY0LjU1NC0xLjgxLjU1NC0yLjgwM2EuOTE3LjkxNyAwIDEwLTEuODMzIDBjMCAuNDY4LS4wNTguOTIyLS4xNjggMS4zNTZ6XFxcIj48L3BhdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhYmVsXFxcIj5NdXRlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGFiZWw9XFxcIkRpc2FibGUgY2FtZXJhXFxcIiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtIHZpZGVvLW11dGVcXFwiIHRhYmluZGV4PVxcXCIwXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaml0c2ktaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBmaWxsPVxcXCJub25lXFxcIiBoZWlnaHQ9XFxcIjIyXFxcIiB3aWR0aD1cXFwiMjJcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMiAyMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTYuODQgNS41aC0uMDIyTDMuNDI0IDIuMTA2YS45MzIuOTMyIDAgMTAtMS4zMTggMS4zMThMNC4xODIgNS41aC0uNTE1Yy0xLjAxMyAwLTEuODM0LjgyLTEuODM0IDEuODMzdjcuMzM0YzAgMS4wMTIuODIxIDEuODMzIDEuODM0IDEuODMzSDEzLjc1Yy40MDQgMCAuNzc3LS4xMyAxLjA4LS4zNTJsMy43NDYgMy43NDZhLjkzMi45MzIgMCAxMDEuMzE4LTEuMzE4bC00LjMxLTQuMzF2LS4wMjRMMTMuNzUgMTIuNDF2LjAyM2wtNS4xLTUuMDk5aC4wMjRMNi44NDEgNS41em02LjkxIDQuMjc0VjcuMzMzaC0yLjQ0TDkuNDc1IDUuNWg0LjI3NGMxLjAxMiAwIDEuODMzLjgyIDEuODMzIDEuODMzdi43ODZsMy4yMTItMS44MzVhLjkxNy45MTcgMCAwMTEuMzcyLjc5NnY3Ljg0YzAgLjM0NC0uMTkuNjQ0LS40Ny44bC0zLjczNi0zLjczNSAyLjM3MiAxLjM1NlY4LjY1OWwtMi43NSAxLjU3MXYxLjM3N0wxMy43NSA5Ljc3NHpNMy42NjcgNy4zMzRoMi4zNDlsNy4zMzMgNy4zMzNIMy42NjdWNy4zMzN6XFxcIj48L3BhdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhYmVsXFxcIj5EaXNhYmxlIGNhbWVyYTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxhYmVsPVxcXCJUb2dnbGUgZnVsbCBzY3JlZW5cXFwiIGNsYXNzPVxcXCJvdmVyZmxvdy1tZW51LWl0ZW0gZnVsbHNjcmVlblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvdmVyZmxvdy1tZW51LWl0ZW0taWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJqaXRzaS1pY29uIFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBmaWxsPVxcXCJub25lXFxcIiBoZWlnaHQ9XFxcIjIyXFxcIiB3aWR0aD1cXFwiMjJcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMiAyMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTguMjUgMi43NUgzLjY2N2EuOTE3LjkxNyAwIDAwLS45MTcuOTE3VjguMjVoMS44MzNWNC41ODNIOC4yNVYyLjc1em01LjUgMS44MzNWMi43NWg0LjU4M2MuNTA3IDAgLjkxNy40MS45MTcuOTE3VjguMjVoLTEuODMzVjQuNTgzSDEzLjc1em0wIDEyLjgzNGgzLjY2N1YxMy43NWgxLjgzM3Y0LjU4M2MwIC41MDctLjQxLjkxNy0uOTE3LjkxN0gxMy43NXYtMS44MzN6TTQuNTgzIDEzLjc1djMuNjY3SDguMjV2MS44MzNIMy42NjdhLjkxNy45MTcgMCAwMS0uOTE3LS45MTdWMTMuNzVoMS44MzN6XFxcIj48L3BhdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhYmVsIG92ZXJmbG93LW1lbnUtaXRlbS10ZXh0XFxcIj5WaWV3IGZ1bGwgc2NyZWVuPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGFiZWw9XFxcIlxcXCIgY2xhc3M9XFxcIm92ZXJmbG93LW1lbnUtaXRlbSBcIiArIHRoaXMucHJpdmF0ZUNoYXRDbGFzcyArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm92ZXJmbG93LW1lbnUtaXRlbS1pY29uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImppdHNpLWljb24gXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGZpbGw9XFxcIm5vbmVcXFwiIGhlaWdodD1cXFwiMjJcXFwiIHdpZHRoPVxcXCIyMlxcXCIgdmlld0JveD1cXFwiMCAwIDIyIDIyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMTksOEgxOFY1YTMsMywwLDAsMC0zLTNINUEzLDMsMCwwLDAsMiw1VjE3YTEsMSwwLDAsMCwuNjIuOTJBLjg0Ljg0LDAsMCwwLDMsMThhMSwxLDAsMCwwLC43MS0uMjlsMi44MS0yLjgySDh2MS40NGEzLDMsMCwwLDAsMywzaDYuOTJsMi4zNywyLjM4QTEsMSwwLDAsMCwyMSwyMmEuODQuODQsMCwwLDAsLjM4LS4wOEExLDEsMCwwLDAsMjIsMjFWMTFBMywzLDAsMCwwLDE5LDhaTTgsMTF2MS44OUg2LjExYTEsMSwwLDAsMC0uNzEuMjlMNCwxNC41OVY1QTEsMSwwLDAsMSw1LDRIMTVhMSwxLDAsMCwxLDEsMVY4SDExQTMsMywwLDAsMCw4LDExWm0xMiw3LjU5LTEtMWExLDEsMCwwLDAtLjcxLS4zSDExYTEsMSwwLDAsMS0xLTFWMTFhMSwxLDAsMCwxLDEtMWg4YTEsMSwwLDAsMSwxLDFaXFxcIj48L3BhdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhYmVsIG92ZXJmbG93LW1lbnUtaXRlbS10ZXh0XFxcIj5Qcml2YXRlIGNoYXQ8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sYWJlbD1cXFwiXFxcIiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtIGtpY2stcGFydGljaXBhbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwib3ZlcmZsb3ctbWVudS1pdGVtLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaml0c2ktaWNvbiBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgaGVpZ2h0PVxcXCIyMFxcXCIgd2lkdGg9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTEwIDE2LjY2N2E2LjY2NyA2LjY2NyAwIDEwMC0xMy4zMzQgNi42NjcgNi42NjcgMCAwMDAgMTMuMzM0em0wIDEuNjY2YTguMzMzIDguMzMzIDAgMTEwLTE2LjY2NiA4LjMzMyA4LjMzMyAwIDAxMCAxNi42NjZ6bTAtOS41MTJsMi4zNTctMi4zNTdhLjgzMy44MzMgMCAxMTEuMTc5IDEuMTc5TDExLjE3OSAxMGwyLjM1NyAyLjM1N2EuODMzLjgzMyAwIDExLTEuMTc5IDEuMTc5TDEwIDExLjE3OGwtMi4zNTcgMi4zNTdhLjgzMy44MzMgMCAwMS0xLjE3OC0xLjE3OUw4LjgyMiAxMCA2LjQ2NSA3LjY0M2EuODMzLjgzMyAwIDExMS4xNzgtMS4xNzlMMTAgOC44MjF6XFxcIj48L3BhdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibGFiZWwgb3ZlcmZsb3ctbWVudS1pdGVtLXRleHRcXFwiPktpY2sgb3V0PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGFiZWw9XFxcIlxcXCIgY2xhc3M9XFxcIm92ZXJmbG93LW1lbnUtaXRlbSByZW1vdGUtY29udHJvbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJvdmVyZmxvdy1tZW51LWl0ZW0taWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJqaXRzaS1pY29uIFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBoZWlnaHQ9XFxcIjIwXFxcIiB3aWR0aD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCIgY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMTAgMTYuNjY3YTYuNjY3IDYuNjY3IDAgMTAwLTEzLjMzNCA2LjY2NyA2LjY2NyAwIDAwMCAxMy4zMzR6bTAgMS42NjZhOC4zMzMgOC4zMzMgMCAxMTAtMTYuNjY2IDguMzMzIDguMzMzIDAgMDEwIDE2LjY2NnptMC05LjUxMmwyLjM1Ny0yLjM1N2EuODMzLjgzMyAwIDExMS4xNzkgMS4xNzlMMTEuMTc5IDEwbDIuMzU3IDIuMzU3YS44MzMuODMzIDAgMTEtMS4xNzkgMS4xNzlMMTAgMTEuMTc4bC0yLjM1NyAyLjM1N2EuODMzLjgzMyAwIDAxLTEuMTc4LTEuMTc5TDguODIyIDEwIDYuNDY1IDcuNjQzYS44MzMuODMzIDAgMTExLjE3OC0xLjE3OUwxMCA4LjgyMXpcXFwiPjwvcGF0aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJsYWJlbCBvdmVyZmxvdy1tZW51LWl0ZW0tdGV4dFxcXCI+UmVtb3RlIENvbnRyb2w8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvc3BhbiA+XCI7XHJcbiAgICAgICAgcmV0dXJuICQocGFuZWxIdG1sKVswXTtcclxuICAgIH07XHJcbiAgICBWaWRlb1BhbmVsLm5QYW5lbEluc3RhbmNlSWQgPSAwOyAvL2luY3JlYXNlZCB3aGVuIGFkZCBuZXcsIGJ1dCBub3QgZGVjcmVhc2VkIHdoZW4gcmVtb3ZlIHBhbmVsXHJcbiAgICByZXR1cm4gVmlkZW9QYW5lbDtcclxufSgpKTtcclxuZXhwb3J0cy5WaWRlb1BhbmVsID0gVmlkZW9QYW5lbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmlkZW9QYW5lbC5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvY29tcG9uZW50c1xcXFxWaWRlb1BhbmVsLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmlkZW9QYW5lbEdyaWQgPSBleHBvcnRzLlZpZGVvUGFuZWxHcmlkUHJvcHMgPSB2b2lkIDA7XHJcbnZhciBWaWRlb1BhbmVsXzEgPSByZXF1aXJlKFwiLi9WaWRlb1BhbmVsXCIpO1xyXG52YXIgVmlkZW9QYW5lbEdyaWRQcm9wcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZGVvUGFuZWxHcmlkUHJvcHMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVmlkZW9QYW5lbEdyaWRQcm9wcztcclxufSgpKTtcclxuZXhwb3J0cy5WaWRlb1BhbmVsR3JpZFByb3BzID0gVmlkZW9QYW5lbEdyaWRQcm9wcztcclxudmFyIFZpZGVvUGFuZWxHcmlkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlkZW9QYW5lbEdyaWQocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnJvb3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmlkZW9QYW5lbE1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnBhbmVsQ2xhc3MgPSBcInZpZGVvY29udGFpbmVyXCI7XHJcbiAgICAgICAgdGhpcy5mdWxsc2NyZWVuQ2xhc3MgPSBcInZpZGVvLWZ1bGxzY3JlZW5cIjtcclxuICAgICAgICB0aGlzLnBvcHVwTWVudUNsYXNzID0gXCJwb3B1cC1tZW51XCI7XHJcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW8tZ3JpZFwiKTtcclxuICAgICAgICB0aGlzLmF0dGFjaEhhbmRsZXJzKCk7XHJcbiAgICB9XHJcbiAgICBWaWRlb1BhbmVsR3JpZC5wcm90b3R5cGUuYXR0YWNoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnNpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLlwiICsgX3RoaXMucG9wdXBNZW51Q2xhc3MpLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmICghaW5zaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLlwiICsgX3RoaXMucG9wdXBNZW51Q2xhc3MpLnJlbW92ZUNsYXNzKFwidmlzaWJsZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVkcmF3R3JpZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5yZWRyYXdHcmlkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmlkZW9QYW5lbEdyaWQucHJvdG90eXBlLmdldE5ld1ZpZGVvUGFuZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByb3BzID0gbmV3IFZpZGVvUGFuZWxfMS5WaWRlb1BhbmVsUHJvcHMoKTtcclxuICAgICAgICBwcm9wcy5yZWZyZXNoR3JpZCA9IHRoaXMucmVkcmF3R3JpZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHByb3BzLmdyYW50TW9kZXJhdG9yUm9sZSA9IHRoaXMucHJvcHMuZ3JhbnRNb2RlcmF0b3JSb2xlO1xyXG4gICAgICAgIHByb3BzLmtpY2tQYXJ0aWNpcGFudE91dCA9IHRoaXMucHJvcHMua2lja1BhcnRpY2lwYW50T3V0O1xyXG4gICAgICAgIHByb3BzLnNlbmRSZW1vdGVDb250cm9sUmVwbHkgPSB0aGlzLnByb3BzLnNlbmRSZW1vdGVDb250cm9sUmVwbHk7XHJcbiAgICAgICAgcHJvcHMubXV0ZVVzZXJWaWRlbyA9IHRoaXMucHJvcHMubXV0ZVVzZXJWaWRlbztcclxuICAgICAgICBwcm9wcy5tdXRlVXNlckF1ZGlvID0gdGhpcy5wcm9wcy5tdXRlVXNlckF1ZGlvO1xyXG4gICAgICAgIHByb3BzLm11dGVNeVZpZGVvID0gdGhpcy5wcm9wcy5tdXRlTXlWaWRlbztcclxuICAgICAgICBwcm9wcy5tdXRlTXlBdWRpbyA9IHRoaXMucHJvcHMubXV0ZU15QXVkaW87XHJcbiAgICAgICAgcHJvcHMub3BlblByaXZhdGVDaGF0ID0gdGhpcy5wcm9wcy5vcGVuUHJpdmF0ZUNoYXQ7XHJcbiAgICAgICAgcHJvcHMucGFuZWxDbGFzcyA9IHRoaXMucGFuZWxDbGFzcztcclxuICAgICAgICBwcm9wcy5mdWxsc2NyZWVuQ2xhc3MgPSB0aGlzLmZ1bGxzY3JlZW5DbGFzcztcclxuICAgICAgICBwcm9wcy5wb3B1cE1lbnVDbGFzcyA9IHRoaXMucG9wdXBNZW51Q2xhc3M7XHJcbiAgICAgICAgdmFyIHZpZGVvUGFuZWwgPSBuZXcgVmlkZW9QYW5lbF8xLlZpZGVvUGFuZWwocHJvcHMpO1xyXG4gICAgICAgICQodGhpcy5yb290KS5hcHBlbmQodmlkZW9QYW5lbC5yb290KTtcclxuICAgICAgICB2aWRlb1BhbmVsLmF0dGFjaEhhbmRsZXJzKCk7XHJcbiAgICAgICAgLy9hZGQgdG8gbWFwXHJcbiAgICAgICAgdGhpcy52aWRlb1BhbmVsTWFwLnNldCh2aWRlb1BhbmVsLklkLCB2aWRlb1BhbmVsKTtcclxuICAgICAgICAvL3JlZnJlc2ggbGF5b3V0XHJcbiAgICAgICAgdGhpcy5yZWRyYXdHcmlkKCk7XHJcbiAgICAgICAgcmV0dXJuIHZpZGVvUGFuZWw7XHJcbiAgICB9O1xyXG4gICAgVmlkZW9QYW5lbEdyaWQucHJvdG90eXBlLmZyZWVWaWRlb1BhbmVsID0gZnVuY3Rpb24gKElkKSB7XHJcbiAgICAgICAgdmFyIHZpZGVvUGFuZWwgPSB0aGlzLnZpZGVvUGFuZWxNYXAuZ2V0KElkKTtcclxuICAgICAgICBpZiAodmlkZW9QYW5lbCkge1xyXG4gICAgICAgICAgICAkKHZpZGVvUGFuZWwucm9vdCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9QYW5lbE1hcC5kZWxldGUoSWQpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZHJhd0dyaWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlkZW9QYW5lbEdyaWQucHJvdG90eXBlLnJlZHJhd0dyaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9tYXJnaW5cclxuICAgICAgICB2YXIgZ3V0dGVyID0gNDA7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gJChcIiNjb250ZW50XCIpLndpZHRoKCkgLSBndXR0ZXI7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9ICQoXCIjY29udGVudFwiKS5oZWlnaHQoKSAtIGd1dHRlcjtcclxuICAgICAgICAvL251bWJlciBvZiB2aWRlbyBwYW5lbHNcclxuICAgICAgICB2YXIgcGFuZWxDb3VudCA9ICQoXCIuXCIgKyB0aGlzLnBhbmVsQ2xhc3MpLmxlbmd0aDtcclxuICAgICAgICAvL2NoYXR0aW5nIGRpYWxvZ1xyXG4gICAgICAgIHZhciBjaGF0dGluZ1dpZHRoID0gMzE1O1xyXG4gICAgICAgIGlmICgkKHRoaXMucm9vdCkuaGFzQ2xhc3MoXCJzaGlmdC1yaWdodFwiKSkge1xyXG4gICAgICAgICAgICB3aWR0aCAtPSBjaGF0dGluZ1dpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3dpZHRoLCBoZWlnaHQgb2YgZWFjaCB2aWRlbyBwYW5lbFxyXG4gICAgICAgIHZhciB3LCBoO1xyXG4gICAgICAgIC8vaWYgZnVsbHNjcmVlbiBtb2RlLCBoaWRlIG90aGVyIHZpZGVvIHBhbmVsc1xyXG4gICAgICAgIGlmICgkKFwiLlwiICsgdGhpcy5wYW5lbENsYXNzKS5oYXNDbGFzcyh0aGlzLmZ1bGxzY3JlZW5DbGFzcykpIHtcclxuICAgICAgICAgICAgJChcIi5cIiArIHRoaXMucGFuZWxDbGFzcykuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgICAgICQoXCIuXCIgKyB0aGlzLmZ1bGxzY3JlZW5DbGFzcykuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKS5jc3MoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgZ3V0dGVyIC0gNikuY3NzKFwid2lkdGhcIiwgd2lkdGggKyBndXR0ZXIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vc2hvdyBhbGwgdmlkZW8gcGFuZWxzXHJcbiAgICAgICAgJChcIi5cIiArIHRoaXMucGFuZWxDbGFzcykuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB2YXIgY29sdW1uQ291bnQgPSAxO1xyXG4gICAgICAgIHZhciByb3dDb3VudCA9IDE7XHJcbiAgICAgICAgdmFyIFNNID0gNTc2O1xyXG4gICAgICAgIHZhciBNRCA9IDc2ODtcclxuICAgICAgICB2YXIgTEcgPSA5OTI7XHJcbiAgICAgICAgdmFyIFhMID0gMTIwMDtcclxuICAgICAgICB2YXIgWFhMID0gMTQwMDtcclxuICAgICAgICBpZiAod2lkdGggPCBTTSkge1xyXG4gICAgICAgICAgICBjb2x1bW5Db3VudCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHdpZHRoIDwgTEcpIHtcclxuICAgICAgICAgICAgaWYgKHBhbmVsQ291bnQgPD0gMSlcclxuICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50ID0gMTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgY29sdW1uQ291bnQgPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHBhbmVsQ291bnQgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoIDwgWFhMKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Db3VudCA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocGFuZWxDb3VudCA8PSA0KVxyXG4gICAgICAgICAgICAgICAgY29sdW1uQ291bnQgPSAyO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChwYW5lbENvdW50IDw9IDkpXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5Db3VudCA9IDM7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhbmVsQ291bnQgPD0gMTYpXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5Db3VudCA9IDQ7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhbmVsQ291bnQgPD0gMjApXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5Db3VudCA9IDU7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50ID0gNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcm93Q291bnQgPSBNYXRoLmZsb29yKChwYW5lbENvdW50IC0gMSkgLyBjb2x1bW5Db3VudCkgKyAxO1xyXG4gICAgICAgIGlmICh3aWR0aCA8IDU3Nikge1xyXG4gICAgICAgICAgICB3ID0gd2lkdGg7XHJcbiAgICAgICAgICAgIGggPSB3ICogOSAvIDE2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmICh3aWR0aCAqIHJvd0NvdW50ICogOSA+IGhlaWdodCAqIGNvbHVtbkNvdW50ICogMTYpIHtcclxuICAgICAgICAgICAgICAgIGggPSBoZWlnaHQgLyByb3dDb3VudDtcclxuICAgICAgICAgICAgICAgIHcgPSBoICogMTYgLyA5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdyA9IHdpZHRoIC8gY29sdW1uQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBoID0gdyAqIDkgLyAxNjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAkKFwiLlwiICsgdGhpcy5wYW5lbENsYXNzKVxyXG4gICAgICAgICAgICAuY3NzKFwid2lkdGhcIiwgdylcclxuICAgICAgICAgICAgLmNzcyhcImhlaWdodFwiLCBoKVxyXG4gICAgICAgICAgICAuZmluZChcIi5hdmF0YXItY29udGFpbmVyXCIpXHJcbiAgICAgICAgICAgIC5jc3MoXCJ3aWR0aFwiLCBoIC8gMilcclxuICAgICAgICAgICAgLmNzcyhcImhlaWdodFwiLCBoIC8gMik7XHJcbiAgICB9O1xyXG4gICAgVmlkZW9QYW5lbEdyaWQucHJvdG90eXBlLmhpZ2h0bGlnaHRQYW5lbCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHRoaXMudmlkZW9QYW5lbE1hcC5mb3JFYWNoKGZ1bmN0aW9uIChwYW5lbCwgSWQpIHtcclxuICAgICAgICAgICAgcGFuZWwuc2V0SGlnaGxpZ2h0KHRhcmdldElkID09PSBJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZGVvUGFuZWxHcmlkO1xyXG59KCkpO1xyXG5leHBvcnRzLlZpZGVvUGFuZWxHcmlkID0gVmlkZW9QYW5lbEdyaWQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZpZGVvUGFuZWxHcmlkLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9jb21wb25lbnRzXFxcXFZpZGVvUGFuZWxHcmlkLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmVjdG9ySWNvbiA9IHZvaWQgMDtcclxudmFyIFZlY3Rvckljb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWZWN0b3JJY29uKCkge1xyXG4gICAgfVxyXG4gICAgVmVjdG9ySWNvbi5BVURJT19NVVRFX0lDT04gPSBcIk03LjMzMyA4LjY1VjExYTMuNjY4IDMuNjY4IDAgMDAyLjc1NyAzLjU1My45MjguOTI4IDAgMDAtLjAwNy4xMTR2MS43NTdBNS41MDEgNS41MDEgMCAwMTUuNSAxMWEuOTE3LjkxNyAwIDEwLTEuODMzIDBjMCAzLjc0IDIuNzk5IDYuODI2IDYuNDE2IDcuMjc3di45NzNhLjkxNy45MTcgMCAwMDEuODM0IDB2LS45NzNhNy4yOTcgNy4yOTcgMCAwMDMuNTY4LTEuNDc1bDMuMDkxIDMuMDkyYS45MzIuOTMyIDAgMTAxLjMxOC0xLjMxOGwtMy4wOTEtMy4wOTEuMDEtLjAxMy0xLjMxMS0xLjMxMS0uMDEuMDEzLTEuMzI1LTEuMzI1LjAwOC0uMDE0LTEuMzk1LTEuMzk1YTEuMjQgMS4yNCAwIDAxLS4wMDQuMDE4bC0zLjYxLTMuNjA5di0uMDIzTDcuMzM0IDUuOTkzdi4wMjNsLTMuOTA5LTMuOTFhLjkzMi45MzIgMCAxMC0xLjMxOCAxLjMxOEw3LjMzMyA4LjY1em0xLjgzNCAxLjgzNFYxMWExLjgzMyAxLjgzMyAwIDAwMi4yOTEgMS43NzZsLTIuMjkxLTIuMjkyem0zLjY4MiAzLjY4M2MtLjI5LjE3LS42MDYuMy0uOTQuMzg2YS45MjguOTI4IDAgMDEuMDA4LjExNHYxLjc1N2E1LjQ3IDUuNDcgMCAwMDIuMjU3LS45MzJsLTEuMzI1LTEuMzI1em0xLjgxOC0zLjQ3NmwtMS44MzQtMS44MzRWNS41YTEuODMzIDEuODMzIDAgMDAtMy42NDQtLjI4N2wtMS40My0xLjQzQTMuNjY2IDMuNjY2IDAgMDExNC42NjcgNS41djUuMTl6bTEuNjY1IDEuNjY1bDEuNDQ3IDEuNDQ3Yy4zNTctLjg2NC41NTQtMS44MS41NTQtMi44MDNhLjkxNy45MTcgMCAxMC0xLjgzMyAwYzAgLjQ2OC0uMDU4LjkyMi0uMTY4IDEuMzU2elwiO1xyXG4gICAgVmVjdG9ySWNvbi5BVURJT19VTk1VVEVfSUNPTiA9IFwiTTE2IDZhNCA0IDAgMDAtOCAwdjZhNC4wMDIgNC4wMDIgMCAwMDMuMDA4IDMuODc2Yy0uMDA1LjA0LS4wMDguMDgyLS4wMDguMTI0djEuOTE3QTYuMDAyIDYuMDAyIDAgMDE2IDEyYTEgMSAwIDEwLTIgMCA4LjAwMSA4LjAwMSAwIDAwNyA3LjkzOFYyMWExIDEgMCAxMDIgMHYtMS4wNjJBOC4wMDEgOC4wMDEgMCAwMDIwIDEyYTEgMSAwIDEwLTIgMCA2LjAwMiA2LjAwMiAwIDAxLTUgNS45MTdWMTZjMC0uMDQyLS4wMDMtLjA4My0uMDA4LS4xMjRBNC4wMDIgNC4wMDIgMCAwMDE2IDEyVjZ6bS00LTJhMiAyIDAgMDAtMiAydjZhMiAyIDAgMTA0IDBWNmEyIDIgMCAwMC0yLTJ6XCI7XHJcbiAgICBWZWN0b3JJY29uLlZJREVPX01VVEVfSUNPTiA9IFwiTSA2Ljg0IDUuNSBoIC0wLjAyMiBMIDMuNDI0IDIuMTA2IGEgMC45MzIgMC45MzIgMCAxIDAgLTEuMzE4IDEuMzE4IEwgNC4xODIgNS41IGggLTAuNTE1IGMgLTEuMDEzIDAgLTEuODM0IDAuODIgLTEuODM0IDEuODMzIHYgNy4zMzQgYyAwIDEuMDEyIDAuODIxIDEuODMzIDEuODM0IDEuODMzIEggMTMuNzUgYyAwLjQwNCAwIDAuNzc3IC0wLjEzIDEuMDggLTAuMzUyIGwgMy43NDYgMy43NDYgYSAwLjkzMiAwLjkzMiAwIDEgMCAxLjMxOCAtMS4zMTggbCAtNC4zMSAtNC4zMSB2IC0wLjAyNCBMIDEzLjc1IDEyLjQxIHYgMC4wMjMgbCAtNS4xIC01LjA5OSBoIDAuMDI0IEwgNi44NDEgNS41IFogbSA2LjkxIDQuMjc0IFYgNy4zMzMgaCAtMi40NCBMIDkuNDc1IDUuNSBoIDQuMjc0IGMgMS4wMTIgMCAxLjgzMyAwLjgyIDEuODMzIDEuODMzIHYgMC43ODYgbCAzLjIxMiAtMS44MzUgYSAwLjkxNyAwLjkxNyAwIDAgMSAxLjM3MiAwLjc5NiB2IDcuODQgYyAwIDAuMzQ0IC0wLjE5IDAuNjQ0IC0wLjQ3IDAuOCBsIC0zLjczNiAtMy43MzUgbCAyLjM3MiAxLjM1NiBWIDguNjU5IGwgLTIuNzUgMS41NzEgdiAxLjM3NyBMIDEzLjc1IDkuNzc0IFogTSAzLjY2NyA3LjMzNCBoIDIuMzQ5IGwgNy4zMzMgNy4zMzMgSCAzLjY2NyBWIDcuMzMzIFpcIjtcclxuICAgIFZlY3Rvckljb24uVklERU9fVU5NVVRFX0lDT04gPSBcIk0xMy43NSA1LjVIMy42NjdjLTEuMDEzIDAtMS44MzQuODItMS44MzQgMS44MzN2Ny4zMzRjMCAxLjAxMi44MjEgMS44MzMgMS44MzQgMS44MzNIMTMuNzVjMS4wMTIgMCAxLjgzMy0uODIgMS44MzMtMS44MzN2LS43ODZsMy4yMTIgMS44MzVhLjkxNi45MTYgMCAwMDEuMzcyLS43OTZWNy4wOGEuOTE3LjkxNyAwIDAwLTEuMzcyLS43OTZsLTMuMjEyIDEuODM1di0uNzg2YzAtMS4wMTItLjgyLTEuODMzLTEuODMzLTEuODMzem0wIDMuNjY3djUuNUgzLjY2N1Y3LjMzM0gxMy43NXYxLjgzNHptNC41ODMgNC4xNzRsLTIuNzUtMS41NzJ2LTEuNTM4bDIuNzUtMS41NzJ2NC42ODJ6XCI7XHJcbiAgICBWZWN0b3JJY29uLkdSQU5UX01PREVSQVRPUl9JQ09OID0gXCJNMTQgNGEyIDIgMCAwMS0xLjI5OCAxLjg3M2wxLjUyNyA0LjA3LjcxNiAxLjkxMmMuMDYyLjA3NC4xMjYuMDc0LjE2NS4wMzVsMS40NDQtMS40NDQgMi4wMzItMi4wMzJhMiAyIDAgMTExLjI0OC41NzlMMTkgMTlhMiAyIDAgMDEtMiAySDdhMiAyIDAgMDEtMi0yTDQuMTY2IDguOTkzYTIgMiAwIDExMS4yNDgtLjU3OWwyLjAzMyAyLjAzM0w4Ljg5IDExLjg5Yy4wODcuMDQyLjE0NS4wMTYuMTY1LS4wMzVsLjcxNi0xLjkxMiAxLjUyNy00LjA3QTIgMiAwIDExMTQgNHpNNi44NCAxN2wtLjM5My00LjcyNSAxLjAyOSAxLjAzYTIuMSAyLjEgMCAwMDMuNDUxLS43NDhMMTIgOS42OTZsMS4wNzMgMi44NmEyLjEgMi4xIDAgMDAzLjQ1MS43NDhsMS4wMy0xLjAzTDE3LjE2IDE3SDYuODR6XCI7XHJcbiAgICBWZWN0b3JJY29uLkFVRElPX01VVEVfU01BTExfSUNPTiA9IFwiTTUuNjg4IDRsMjIuMzEzIDIyLjMxMy0xLjY4OCAxLjY4OC01LjU2My01LjU2M2MtMSAuNjI1LTIuMjUgMS0zLjQzOCAxLjE4OHY0LjM3NWgtMi42MjV2LTQuMzc1Yy00LjM3NS0uNjI1LTgtNC4zNzUtOC04LjkzOGgyLjI1YzAgNCAzLjM3NSA2Ljc1IDcuMDYzIDYuNzUgMS4wNjMgMCAyLjEyNS0uMjUgMy4wNjMtLjY4OGwtMi4xODgtMi4xODhjLS4yNS4wNjMtLjU2My4xMjUtLjg3NS4xMjUtMi4xODggMC00LTEuODEzLTQtNHYtMWwtOC04ek0yMCAxNC44NzVsLTgtNy45Mzh2LS4yNWMwLTIuMTg4IDEuODEzLTQgNC00czQgMS44MTMgNCA0djguMTg4em01LjMxMy0uMTg3YTguODI0IDguODI0IDAgMDEtMS4xODggNC4zNzVMMjIuNSAxNy4zNzVjLjM3NS0uODEzLjU2My0xLjY4OC41NjMtMi42ODhoMi4yNXpcIjtcclxuICAgIFZlY3Rvckljb24uVklERU9fTVVURV9TTUFMTF9JQ09OID0gXCJNNC4zNzUgMi42ODhMMjggMjYuMzEzbC0xLjY4OCAxLjY4OC00LjI1LTQuMjVjLS4xODguMTI1LS41LjI1LS43NS4yNWgtMTZjLS43NSAwLTEuMzEzLS41NjMtMS4zMTMtMS4zMTNWOS4zMTNjMC0uNzUuNTYzLTEuMzEzIDEuMzEzLTEuMzEzaDFMMi42ODcgNC4zNzV6bTIzLjYyNSA2djE0LjI1TDEzLjA2MiA4aDguMjVjLjc1IDAgMS4zNzUuNTYzIDEuMzc1IDEuMzEzdjQuNjg4elwiO1xyXG4gICAgVmVjdG9ySWNvbi5NT0RFUkFUT1JfU01BTExfSUNPTiA9IFwiTTE2IDIwLjU2M2w1IDMtMS4zMTMtNS42ODhMMjQuMTI1IDE0bC01Ljg3NS0uNUwxNiA4LjEyNSAxMy43NSAxMy41bC01Ljg3NS41IDQuNDM4IDMuODc1TDExIDIzLjU2M3ptMTMuMzEzLTguMjVsLTcuMjUgNi4zMTMgMi4xODggOS4zNzUtOC4yNS01LTguMjUgNSAyLjE4OC05LjM3NS03LjI1LTYuMzEzIDkuNTYzLS44MTMgMy43NS04LjgxMyAzLjc1IDguODEzelwiO1xyXG4gICAgVmVjdG9ySWNvbi5TRVRUSU5HX0lDT04gPSBcIk05LjAwNSAyLjE3bC0uNTc2IDEuNzI3LS42MzQuMjYyLTEuNjI4LS44MTNhMS44MzMgMS44MzMgMCAwMC0yLjExNi4zNDNsLS4zNjIuMzYyYTEuODMzIDEuODMzIDAgMDAtLjM0MyAyLjExNmwuODE2IDEuNjI0LS4yNjUuNjM4LTEuNzI3LjU3NmMtLjc0OC4yNS0xLjI1My45NS0xLjI1MyAxLjczOXYuNTEyYzAgLjc5LjUwNSAxLjQ5IDEuMjUzIDEuNzRsMS43MjcuNTc1LjI2Mi42MzQtLjgxMyAxLjYyOGExLjgzMyAxLjgzMyAwIDAwLjM0MyAyLjExNmwuMzYyLjM2MmMuNTU4LjU1OCAxLjQxLjY5NiAyLjExNi4zNDNsMS42MjQtLjgxNi42MzguMjY1LjU3NiAxLjcyN2MuMjUuNzQ4Ljk1IDEuMjUzIDEuNzM5IDEuMjUzaC41MTJjLjc5IDAgMS40OS0uNTA1IDEuNzQtMS4yNTNsLjU3NS0xLjcyNi42MzQtLjI2MyAxLjYyOC44MTNhMS44MzMgMS44MzMgMCAwMDIuMTE2LS4zNDNsLjM2Mi0uMzYyYy41NTgtLjU1OC42OTYtMS40MS4zNDMtMi4xMTZsLS44MTYtMS42MjQuMjY1LS42MzggMS43MjctLjU3NmExLjgzMyAxLjgzMyAwIDAwMS4yNTMtMS43Mzl2LS41MTJjMC0uNzktLjUwNS0xLjQ5LTEuMjUzLTEuNzRsLTEuNzI2LS41NzItLjI2NC0uNjM3LjgxNC0xLjYyOGExLjgzMyAxLjgzMyAwIDAwLS4zNDMtMi4xMTZsLS4zNjItLjM2MmExLjgzMyAxLjgzMyAwIDAwLTIuMTE2LS4zNDNsLTEuNjI0LjgxNi0uNjM4LS4yNjUtLjU3Ni0xLjcyN2ExLjgzMyAxLjgzMyAwIDAwLTEuNzQtMS4yNTNoLS41MTFjLS43OSAwLTEuNDkuNTA1LTEuNzQgMS4yNTN6TTcuNzIzIDYuMTczbDIuMTgxLS45MDMuODQtMi41MmguNTEybC44NCAyLjUyIDIuMTg1LjkwOCAyLjM3Mi0xLjE5My4zNjIuMzYyLTEuMTg4IDIuMzc2LjkwMyAyLjE4NSAyLjUyLjgzNnYuNTEybC0yLjUyLjg0LS45MDggMi4xODUgMS4xOTMgMi4zNzItLjM2Mi4zNjItMi4zNzYtMS4xODgtMi4xODEuOTAzLS44NCAyLjUyaC0uNTEybC0uODQtMi41Mi0yLjE4NS0uOTA4LTIuMzcyIDEuMTkzLS4zNjItLjM2MiAxLjE4OC0yLjM3Ni0uOTAzLTIuMTgxLTIuNTItLjg0di0uNTEybDIuNTItLjg0LjkwOC0yLjE4NS0xLjE5My0yLjM3Mi4zNjItLjM2MiAyLjM3NiAxLjE4OHpNMTEgMTUuNTgzYTQuNTgzIDQuNTgzIDAgMTEwLTkuMTY2IDQuNTgzIDQuNTgzIDAgMDEwIDkuMTY2ek0xMy43NSAxMWEyLjc1IDIuNzUgMCAxMS01LjUgMCAyLjc1IDIuNzUgMCAwMTUuNSAwelwiO1xyXG4gICAgVmVjdG9ySWNvbi5VU0VSX0dST1VQX0lDT04gPSBcIk01LjMzMzMxIDJDNi4yODEwMSAyIDcuMDk2NzUgMi41NjQ5OSA3LjQ2MjA3IDMuMzc2NTFDNy4wMDc2NiAzLjQ1MDIzIDYuNTg0MDYgMy42MTU4MyA2LjIxMDk1IDMuODUzNjFDNi4wNDExMSAzLjU0MzU2IDUuNzExNzYgMy4zMzMzMyA1LjMzMzMxIDMuMzMzMzNDNC43ODEwMyAzLjMzMzMzIDQuMzMzMzEgMy43ODEwNSA0LjMzMzMxIDQuMzMzMzNDNC4zMzMzMSA0Ljc1ODk1IDQuNTk5MjEgNS4xMjI0NiA0Ljk3Mzk1IDUuMjY2ODJDNC43NzY3MiA1LjY5MjQ1IDQuNjY2NjUgNi4xNjY3MSA0LjY2NjY1IDYuNjY2NjdMNC42NjY3OCA2LjY5NjdDMy4xMjI0OSA2Ljg1MzMyIDIuNjY2NjUgNy42NTQxNSAyLjY2NjY1IDkuODMzMzNDMi42NjY2NSA5Ljg5NjY2IDIuNjY4MzUgOS45NTIyMiAyLjY3MDg4IDEwSDMuMTM0NDFDMi45NzcgMTAuMzk4MiAyLjg2MTE0IDEwLjg0MjMgMi43ODQxIDExLjMzMzNIMi4zMzMzMUMxLjY2NjY1IDExLjMzMzMgMS4zMzMzMSAxMC44MzMzIDEuMzMzMzEgOS44MzMzM0MxLjMzMzMxIDcuNjA1NTkgMS44ODA5NyA2LjIwNDk4IDMuMzk0MTcgNS42MzE1MkMzLjE0NTIxIDUuMjYwMzggMi45OTk5OCA0LjgxMzgyIDIuOTk5OTggNC4zMzMzM0MyLjk5OTk4IDMuMDQ0NjcgNC4wNDQ2NSAyIDUuMzMzMzEgMlpNOS43ODkwMSAzLjg1MzYxQzkuNDE1OSAzLjYxNTgzIDguOTkyMyAzLjQ1MDIzIDguNTM3ODggMy4zNzY1MUM4LjkwMzIxIDIuNTY0OTkgOS43MTg5NSAyIDEwLjY2NjYgMkMxMS45NTUzIDIgMTMgMy4wNDQ2NyAxMyA0LjMzMzMzQzEzIDQuODEzODIgMTIuODU0NyA1LjI2MDM4IDEyLjYwNTggNS42MzE1MkMxNC4xMTkgNi4yMDQ5OCAxNC42NjY2IDcuNjA1NTkgMTQuNjY2NiA5LjgzMzMzQzE0LjY2NjYgMTAuODMzMyAxNC4zMzMzIDExLjMzMzMgMTMuNjY2NiAxMS4zMzMzSDEzLjIxNTlDMTMuMTM4OCAxMC44NDIzIDEzLjAyMyAxMC4zOTgyIDEyLjg2NTYgMTBIMTMuMzI5MUMxMy4zMzE2IDkuOTUyMjIgMTMuMzMzMyA5Ljg5NjY2IDEzLjMzMzMgOS44MzMzM0MxMy4zMzMzIDcuNjU0MTUgMTIuODc3NSA2Ljg1MzMyIDExLjMzMzIgNi42OTY3TDExLjMzMzMgNi42NjY2N0MxMS4zMzMzIDYuMTY2NyAxMS4yMjMyIDUuNjkyNDUgMTEuMDI2IDUuMjY2ODJDMTEuNDAwOCA1LjEyMjQ2IDExLjY2NjYgNC43NTg5NSAxMS42NjY2IDQuMzMzMzNDMTEuNjY2NiAzLjc4MTA1IDExLjIxODkgMy4zMzMzMyAxMC42NjY2IDMuMzMzMzNDMTAuMjg4MiAzLjMzMzMzIDkuOTU4ODUgMy41NDM1NiA5Ljc4OTAxIDMuODUzNjFaTTQuNDk5OTggMTQuNjY2N0MzLjcyMjIgMTQuNjY2NyAzLjMzMzMxIDE0LjExMTEgMy4zMzMzMSAxM0MzLjMzMzMxIDEwLjQ1OTggNC4wMDYyIDguODg3NSA1Ljg3ODg4IDguMjgzMDhDNS41MzY2IDcuODM0NjIgNS4zMzMzMSA3LjI3NDM4IDUuMzMzMzEgNi42NjY2N0M1LjMzMzMxIDUuMTkzOTEgNi41MjcyMiA0IDcuOTk5OTggNEM5LjQ3Mjc0IDQgMTAuNjY2NiA1LjE5MzkxIDEwLjY2NjYgNi42NjY2N0MxMC42NjY2IDcuMjc0MzggMTAuNDYzNCA3LjgzNDYyIDEwLjEyMTEgOC4yODMwOEMxMS45OTM4IDguODg3NSAxMi42NjY2IDEwLjQ1OTggMTIuNjY2NiAxM0MxMi42NjY2IDE0LjExMTEgMTIuMjc3OCAxNC42NjY3IDExLjUgMTQuNjY2N0g0LjQ5OTk4Wk05LjMzMzMxIDYuNjY2NjdDOS4zMzMzMSA3LjQwMzA1IDguNzM2MzYgOCA3Ljk5OTk4IDhDNy4yNjM2IDggNi42NjY2NSA3LjQwMzA1IDYuNjY2NjUgNi42NjY2N0M2LjY2NjY1IDUuOTMwMjkgNy4yNjM2IDUuMzMzMzMgNy45OTk5OCA1LjMzMzMzQzguNzM2MzYgNS4zMzMzMyA5LjMzMzMxIDUuOTMwMjkgOS4zMzMzMSA2LjY2NjY3Wk0xMS4zMzMzIDEzQzExLjMzMzMgMTMuMTQyNiAxMS4zMjUyIDEzLjI1MzYgMTEuMzE1MiAxMy4zMzMzSDQuNjg0NzdDNC42NzQ3NiAxMy4yNTM2IDQuNjY2NjUgMTMuMTQyNiA0LjY2NjY1IDEzQzQuNjY2NjUgMTAuMTk1NyA1LjQyMDIxIDkuMzMzMzMgNy45OTk5OCA5LjMzMzMzQzEwLjU3OTcgOS4zMzMzMyAxMS4zMzMzIDEwLjE5NTcgMTEuMzMzMyAxM1pcIjtcclxuICAgIFZlY3Rvckljb24uU0VORF9GSUxFID0gXCJNMTMuNSwxMi41YTEsMSwwLDAsMC0xLTFoLTVhMSwxLDAsMCwwLDAsMmg1QTEsMSwwLDAsMCwxMy41LDEyLjVabTUsNWEyLDIsMCwwLDAtMS4xOC4zOWwtMS43NS0uOCwxLjkxLS44OGEyLDIsMCwwLDAsMSwuMjksMiwyLDAsMSwwLTItMmwtMS44OS44N0EyLDIsMCwxLDAsMTMuNSwxOWExLjg4LDEuODgsMCwwLDAsLjkyLS4yNGwyLjEsMWEyLDIsMCwxLDAsMi0yLjIzWm0tOCwyaC01YTEsMSwwLDAsMS0xLTFWNC41YTEsMSwwLDAsMSwxLTFoNXYzYTMsMywwLDAsMCwzLDNoM2ExLDEsMCwwLDAsMiwwdi0xczAsMCwwLS4wNmExLjMxLDEuMzEsMCwwLDAtLjA2LS4yN2wwLS4wOWExLjA3LDEuMDcsMCwwLDAtLjE5LS4yOGgwbC02LTZoMGExLjA3LDEuMDcsMCwwLDAtLjI4LS4xOS4yOS4yOSwwLDAsMC0uMSwwLDEuMSwxLjEsMCwwLDAtLjI2LS4wNkg1LjVhMywzLDAsMCwwLTMsM3YxNGEzLDMsMCwwLDAsMywzaDVhMSwxLDAsMCwwLDAtMlptMi0xNC41OUwxNS4wOSw3LjVIMTMuNWExLDEsMCwwLDEtMS0xWk03LjUsMTUuNWExLDEsMCwwLDAsMCwyaDFhMSwxLDAsMCwwLDAtMlptMC02aDFhMSwxLDAsMCwwLDAtMmgtMWExLDEsMCwwLDAsMCwyWlwiO1xyXG4gICAgcmV0dXJuIFZlY3Rvckljb247XHJcbn0oKSk7XHJcbmV4cG9ydHMuVmVjdG9ySWNvbiA9IFZlY3Rvckljb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlY3Rvcl9pY29uLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9jb21wb25lbnRzXFxcXHZlY3Rvcl9pY29uLmpzXCIsXCIvY29tcG9uZW50c1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ2hhbm5lbFR5cGUgPSB2b2lkIDA7XHJcbnZhciBDaGFubmVsVHlwZTtcclxuKGZ1bmN0aW9uIChDaGFubmVsVHlwZSkge1xyXG4gICAgQ2hhbm5lbFR5cGVbXCJCb3RoXCJdID0gXCJCb3RoXCI7XHJcbiAgICBDaGFubmVsVHlwZVtcIkF1ZGlvT25seVwiXSA9IFwiQXVkaW9Pbmx5XCI7XHJcbiAgICBDaGFubmVsVHlwZVtcIlZpZGVvT25seVwiXSA9IFwiVmlkZW9Pbmx5XCI7XHJcbn0pKENoYW5uZWxUeXBlID0gZXhwb3J0cy5DaGFubmVsVHlwZSB8fCAoZXhwb3J0cy5DaGFubmVsVHlwZSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYW5uZWxUeXBlLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9lbnVtXFxcXENoYW5uZWxUeXBlLmpzXCIsXCIvZW51bVwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTWVkaWFUeXBlID0gdm9pZCAwO1xyXG52YXIgTWVkaWFUeXBlO1xyXG4oZnVuY3Rpb24gKE1lZGlhVHlwZSkge1xyXG4gICAgTWVkaWFUeXBlW1wiVklERU9cIl0gPSBcInZpZGVvXCI7XHJcbiAgICBNZWRpYVR5cGVbXCJBVURJT1wiXSA9IFwiYXVkaW9cIjtcclxuICAgIE1lZGlhVHlwZVtcIlBSRVNFTlRFUlwiXSA9IFwicHJlc2VudGVyXCI7XHJcbn0pKE1lZGlhVHlwZSA9IGV4cG9ydHMuTWVkaWFUeXBlIHx8IChleHBvcnRzLk1lZGlhVHlwZSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lZGlhVHlwZS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvZW51bVxcXFxNZWRpYVR5cGUuanNcIixcIi9lbnVtXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Ob3RpZmljYXRpb25EdXJhdGlvbiA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZSA9IHZvaWQgMDtcclxudmFyIE5vdGlmaWNhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoTm90aWZpY2F0aW9uVHlwZSkge1xyXG4gICAgTm90aWZpY2F0aW9uVHlwZVtcIlVzZXJcIl0gPSBcInVzZXJcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJHcmFudEhvc3RcIl0gPSBcImhvc3RcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJWaWRlb1wiXSA9IFwidmlkZW9cIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJWaWRlb011dGVcIl0gPSBcInZpZGVvLW11dGVcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJBdWRpb1wiXSA9IFwiYXVkaW9cIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJBdWRpb011dGVcIl0gPSBcImF1ZGlvLW11dGVcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJSZWNvcmRpbmdcIl0gPSBcInJlY29yZGluZ1wiO1xyXG4gICAgTm90aWZpY2F0aW9uVHlwZVtcIlNjcmVlbnNoYXJpbmdcIl0gPSBcInNjcmVlbnNoYXJpbmdcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJIYW5kUmFpc2VcIl0gPSBcImhhbmRyYWlzZVwiO1xyXG4gICAgTm90aWZpY2F0aW9uVHlwZVtcIkNoYXRcIl0gPSBcImNoYXRcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJGaWxlVHJhbnNmZXJcIl0gPSBcImZpbGUtdHJhbmZlclwiO1xyXG4gICAgTm90aWZpY2F0aW9uVHlwZVtcIkZpbGVSZWNlaXZlXCJdID0gXCJmaWxlLXJlY2VpdmVcIjtcclxuICAgIE5vdGlmaWNhdGlvblR5cGVbXCJJbmZvXCJdID0gXCJpbmZvXCI7XHJcbiAgICBOb3RpZmljYXRpb25UeXBlW1wiV2FybmluZ1wiXSA9IFwid2FybmluZ1wiO1xyXG59KShOb3RpZmljYXRpb25UeXBlID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlIHx8IChleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSB7fSkpO1xyXG47XHJcbnZhciBOb3RpZmljYXRpb25EdXJhdGlvbjtcclxuKGZ1bmN0aW9uIChOb3RpZmljYXRpb25EdXJhdGlvbikge1xyXG4gICAgTm90aWZpY2F0aW9uRHVyYXRpb25bXCJQZXJtYW5lbnRcIl0gPSBcInBlcm1hbmVudFwiO1xyXG4gICAgTm90aWZpY2F0aW9uRHVyYXRpb25bXCJIaWRlQXV0b1wiXSA9IFwiaGlkZS1hdXRvXCI7XHJcbn0pKE5vdGlmaWNhdGlvbkR1cmF0aW9uID0gZXhwb3J0cy5Ob3RpZmljYXRpb25EdXJhdGlvbiB8fCAoZXhwb3J0cy5Ob3RpZmljYXRpb25EdXJhdGlvbiA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvblR5cGUuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL2VudW1cXFxcTm90aWZpY2F0aW9uVHlwZS5qc1wiLFwiL2VudW1cIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlVzZXJQcm9wZXJ0eSA9IHZvaWQgMDtcclxudmFyIFVzZXJQcm9wZXJ0eTtcclxuKGZ1bmN0aW9uIChVc2VyUHJvcGVydHkpIHtcclxuICAgIFVzZXJQcm9wZXJ0eVtcInZpZGVvUGFuZWxcIl0gPSBcInZpZGVvUGFuZWxcIjtcclxuICAgIFVzZXJQcm9wZXJ0eVtcIklzSG9zdFwiXSA9IFwiSXNIb3N0XCI7XHJcbiAgICBVc2VyUHJvcGVydHlbXCJ1c2VDYW1lcmFcIl0gPSBcInVzZUNhbWVyYVwiO1xyXG4gICAgVXNlclByb3BlcnR5W1widXNlTWljXCJdID0gXCJ1c2VNaWNcIjtcclxufSkoVXNlclByb3BlcnR5ID0gZXhwb3J0cy5Vc2VyUHJvcGVydHkgfHwgKGV4cG9ydHMuVXNlclByb3BlcnR5ID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXNlclByb3BlcnR5LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9lbnVtXFxcXFVzZXJQcm9wZXJ0eS5qc1wiLFwiL2VudW1cIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXHJcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgcmV0dXJuIHRvO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQml6R2F6ZU1lZXRpbmcgPSB2b2lkIDA7XHJcbnZhciBzaWduYWxSID0gcmVxdWlyZShcIkBtaWNyb3NvZnQvc2lnbmFsclwiKTtcclxudmFyIGJnXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbC9iZ1wiKTtcclxudmFyIG1lZXRpbmdfdWlfMSA9IHJlcXVpcmUoXCIuL21lZXRpbmdfdWlcIik7XHJcbnZhciBCR1VzZXJfMSA9IHJlcXVpcmUoXCIuL21vZGVsL0JHVXNlclwiKTtcclxudmFyIEJHTWVldGluZ18xID0gcmVxdWlyZShcIi4vbW9kZWwvQkdNZWV0aW5nXCIpO1xyXG52YXIgTWVkaWFUeXBlXzEgPSByZXF1aXJlKFwiLi9lbnVtL01lZGlhVHlwZVwiKTtcclxudmFyIEppdHNpQ29tbWFuZFBhcmFtXzEgPSByZXF1aXJlKFwiLi9qaXRzaS9KaXRzaUNvbW1hbmRQYXJhbVwiKTtcclxudmFyIFVzZXJQcm9wZXJ0eV8xID0gcmVxdWlyZShcIi4vZW51bS9Vc2VyUHJvcGVydHlcIik7XHJcbnZhciBUaW1lVXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbC9UaW1lVXRpbFwiKTtcclxudmFyIEFjdGl2ZURldmljZXNfMSA9IHJlcXVpcmUoXCIuL21vZGVsL0FjdGl2ZURldmljZXNcIik7XHJcbnZhciBJbnB1dERldmljZVBvbGljeV8xID0gcmVxdWlyZShcIi4vbW9kZWwvSW5wdXREZXZpY2VQb2xpY3lcIik7XHJcbnZhciBDaGFubmVsVHlwZV8xID0gcmVxdWlyZShcIi4vZW51bS9DaGFubmVsVHlwZVwiKTtcclxudmFyIGppdHNpXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbC9qaXRzaVwiKTtcclxudmFyIE5vdGlmaWNhdGlvblR5cGVfMSA9IHJlcXVpcmUoXCIuL2VudW0vTm90aWZpY2F0aW9uVHlwZVwiKTtcclxudmFyIEppdHNpQ29tbWFuZFF1ZXVlXzEgPSByZXF1aXJlKFwiLi9qaXRzaS9KaXRzaUNvbW1hbmRRdWV1ZVwiKTtcclxudmFyIEtFWVMgPSB7XHJcbiAgICBCQUNLU1BBQ0U6ICdiYWNrc3BhY2UnLFxyXG4gICAgREVMRVRFOiAnZGVsZXRlJyxcclxuICAgIFJFVFVSTjogJ2VudGVyJyxcclxuICAgIFRBQjogJ3RhYicsXHJcbiAgICBFU0NBUEU6ICdlc2NhcGUnLFxyXG4gICAgVVA6ICd1cCcsXHJcbiAgICBET1dOOiAnZG93bicsXHJcbiAgICBSSUdIVDogJ3JpZ2h0JyxcclxuICAgIExFRlQ6ICdsZWZ0JyxcclxuICAgIEhPTUU6ICdob21lJyxcclxuICAgIEVORDogJ2VuZCcsXHJcbiAgICBQQUdFVVA6ICdwYWdldXAnLFxyXG4gICAgUEFHRURPV046ICdwYWdlZG93bicsXHJcbiAgICBGMTogJ2YxJyxcclxuICAgIEYyOiAnZjInLFxyXG4gICAgRjM6ICdmMycsXHJcbiAgICBGNDogJ2Y0JyxcclxuICAgIEY1OiAnZjUnLFxyXG4gICAgRjY6ICdmNicsXHJcbiAgICBGNzogJ2Y3JyxcclxuICAgIEY4OiAnZjgnLFxyXG4gICAgRjk6ICdmOScsXHJcbiAgICBGMTA6ICdmMTAnLFxyXG4gICAgRjExOiAnZjExJyxcclxuICAgIEYxMjogJ2YxMicsXHJcbiAgICBNRVRBOiAnY29tbWFuZCcsXHJcbiAgICBDTURfTDogJ2NvbW1hbmQnLFxyXG4gICAgQ01EX1I6ICdjb21tYW5kJyxcclxuICAgIEFMVDogJ2FsdCcsXHJcbiAgICBDT05UUk9MOiAnY29udHJvbCcsXHJcbiAgICBTSElGVDogJ3NoaWZ0JyxcclxuICAgIENBUFNfTE9DSzogJ2NhcHNfbG9jaycsXHJcbiAgICBTUEFDRTogJ3NwYWNlJyxcclxuICAgIFBSSU5UU0NSRUVOOiAncHJpbnRzY3JlZW4nLFxyXG4gICAgSU5TRVJUOiAnaW5zZXJ0JyxcclxuICAgIE5VTVBBRF8wOiAnbnVtcGFkXzAnLFxyXG4gICAgTlVNUEFEXzE6ICdudW1wYWRfMScsXHJcbiAgICBOVU1QQURfMjogJ251bXBhZF8yJyxcclxuICAgIE5VTVBBRF8zOiAnbnVtcGFkXzMnLFxyXG4gICAgTlVNUEFEXzQ6ICdudW1wYWRfNCcsXHJcbiAgICBOVU1QQURfNTogJ251bXBhZF81JyxcclxuICAgIE5VTVBBRF82OiAnbnVtcGFkXzYnLFxyXG4gICAgTlVNUEFEXzc6ICdudW1wYWRfNycsXHJcbiAgICBOVU1QQURfODogJ251bXBhZF84JyxcclxuICAgIE5VTVBBRF85OiAnbnVtcGFkXzknLFxyXG4gICAgQ09NTUE6ICcsJyxcclxuICAgIFBFUklPRDogJy4nLFxyXG4gICAgU0VNSUNPTE9OOiAnOycsXHJcbiAgICBRVU9URTogJ1xcJycsXHJcbiAgICBCUkFDS0VUX0xFRlQ6ICdbJyxcclxuICAgIEJSQUNLRVRfUklHSFQ6ICddJyxcclxuICAgIEJBQ0tRVU9URTogJ2AnLFxyXG4gICAgQkFDS1NMQVNIOiAnXFxcXCcsXHJcbiAgICBNSU5VUzogJy0nLFxyXG4gICAgRVFVQUw6ICc9JyxcclxuICAgIFNMQVNIOiAnLydcclxufTtcclxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xyXG4vKipcclxuICogTWFwcGluZyBiZXR3ZWVuIHRoZSBrZXkgY29kZXMgYW5kIGtleXMgZGVmaW5lZCBpbiBLRVlTLlxyXG4gKiBUaGUgbWFwcGluZ3MgYXJlIGJhc2VkIG9uXHJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleUNvZGUjU3BlY2lmaWNhdGlvbnNcclxuICovXHJcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xyXG52YXIga2V5Q29kZVRvS2V5ID0ge1xyXG4gICAgODogS0VZUy5CQUNLU1BBQ0UsXHJcbiAgICA5OiBLRVlTLlRBQixcclxuICAgIDEzOiBLRVlTLlJFVFVSTixcclxuICAgIDE2OiBLRVlTLlNISUZULFxyXG4gICAgMTc6IEtFWVMuQ09OVFJPTCxcclxuICAgIDE4OiBLRVlTLkFMVCxcclxuICAgIDIwOiBLRVlTLkNBUFNfTE9DSyxcclxuICAgIDI3OiBLRVlTLkVTQ0FQRSxcclxuICAgIDMyOiBLRVlTLlNQQUNFLFxyXG4gICAgMzM6IEtFWVMuUEFHRVVQLFxyXG4gICAgMzQ6IEtFWVMuUEFHRURPV04sXHJcbiAgICAzNTogS0VZUy5FTkQsXHJcbiAgICAzNjogS0VZUy5IT01FLFxyXG4gICAgMzc6IEtFWVMuTEVGVCxcclxuICAgIDM4OiBLRVlTLlVQLFxyXG4gICAgMzk6IEtFWVMuUklHSFQsXHJcbiAgICA0MDogS0VZUy5ET1dOLFxyXG4gICAgNDI6IEtFWVMuUFJJTlRTQ1JFRU4sXHJcbiAgICA0NDogS0VZUy5QUklOVFNDUkVFTixcclxuICAgIDQ1OiBLRVlTLklOU0VSVCxcclxuICAgIDQ2OiBLRVlTLkRFTEVURSxcclxuICAgIDQ4OiAnMCcsXHJcbiAgICA0OTogJzEnLFxyXG4gICAgNTA6ICcyJyxcclxuICAgIDUxOiAnMycsXHJcbiAgICA1MjogJzQnLFxyXG4gICAgNTM6ICc1JyxcclxuICAgIDU0OiAnNicsXHJcbiAgICA1NTogJzcnLFxyXG4gICAgNTY6ICc4JyxcclxuICAgIDU3OiAnOScsXHJcbiAgICA1OTogS0VZUy5TRU1JQ09MT04sXHJcbiAgICA2MTogS0VZUy5FUVVBTCxcclxuICAgIDY1OiAnJyxcclxuICAgIDY2OiAnJyxcclxuICAgIDY3OiAnJyxcclxuICAgIDY4OiAnJyxcclxuICAgIDY5OiAnJyxcclxuICAgIDcwOiAnJyxcclxuICAgIDcxOiAnJyxcclxuICAgIDcyOiAnJyxcclxuICAgIDczOiAnJyxcclxuICAgIDc0OiAnJyxcclxuICAgIDc1OiAnJyxcclxuICAgIDc2OiAnJyxcclxuICAgIDc3OiAnJyxcclxuICAgIDc4OiAnJyxcclxuICAgIDc5OiAnJyxcclxuICAgIDgwOiAnJyxcclxuICAgIDgxOiAnJyxcclxuICAgIDgyOiAnJyxcclxuICAgIDgzOiAnJyxcclxuICAgIDg0OiAnJyxcclxuICAgIDg1OiAnJyxcclxuICAgIDg2OiAnJyxcclxuICAgIDg3OiAnJyxcclxuICAgIDg4OiAnJyxcclxuICAgIDg5OiAnJyxcclxuICAgIDkwOiAnJyxcclxuICAgIDkxOiBLRVlTLkNNRF9MLFxyXG4gICAgOTI6IEtFWVMuQ01EX1IsXHJcbiAgICA5MzogS0VZUy5DTURfUixcclxuICAgIDk2OiBLRVlTLk5VTVBBRF8wLFxyXG4gICAgOTc6IEtFWVMuTlVNUEFEXzEsXHJcbiAgICA5ODogS0VZUy5OVU1QQURfMixcclxuICAgIDk5OiBLRVlTLk5VTVBBRF8zLFxyXG4gICAgMTAwOiBLRVlTLk5VTVBBRF80LFxyXG4gICAgMTAxOiBLRVlTLk5VTVBBRF81LFxyXG4gICAgMTAyOiBLRVlTLk5VTVBBRF82LFxyXG4gICAgMTAzOiBLRVlTLk5VTVBBRF83LFxyXG4gICAgMTA0OiBLRVlTLk5VTVBBRF84LFxyXG4gICAgMTA1OiBLRVlTLk5VTVBBRF85LFxyXG4gICAgMTEyOiBLRVlTLkYxLFxyXG4gICAgMTEzOiBLRVlTLkYyLFxyXG4gICAgMTE0OiBLRVlTLkYzLFxyXG4gICAgMTE1OiBLRVlTLkY0LFxyXG4gICAgMTE2OiBLRVlTLkY1LFxyXG4gICAgMTE3OiBLRVlTLkY2LFxyXG4gICAgMTE4OiBLRVlTLkY3LFxyXG4gICAgMTE5OiBLRVlTLkY4LFxyXG4gICAgMTIwOiBLRVlTLkY5LFxyXG4gICAgMTIxOiBLRVlTLkYxMCxcclxuICAgIDEyMjogS0VZUy5GMTEsXHJcbiAgICAxMjM6IEtFWVMuRjEyLFxyXG4gICAgMTI0OiBLRVlTLlBSSU5UU0NSRUVOLFxyXG4gICAgMTczOiBLRVlTLk1JTlVTLFxyXG4gICAgMTg2OiBLRVlTLlNFTUlDT0xPTixcclxuICAgIDE4NzogS0VZUy5FUVVBTCxcclxuICAgIDE4ODogS0VZUy5DT01NQSxcclxuICAgIDE4OTogS0VZUy5NSU5VUyxcclxuICAgIDE5MDogS0VZUy5QRVJJT0QsXHJcbiAgICAxOTE6IEtFWVMuU0xBU0gsXHJcbiAgICAxOTI6IEtFWVMuQkFDS1FVT1RFLFxyXG4gICAgMjE5OiBLRVlTLkJSQUNLRVRfTEVGVCxcclxuICAgIDIyMDogS0VZUy5CQUNLU0xBU0gsXHJcbiAgICAyMjE6IEtFWVMuQlJBQ0tFVF9SSUdIVCxcclxuICAgIDIyMjogS0VZUy5RVU9URSxcclxuICAgIDIyNDogS0VZUy5NRVRBLFxyXG4gICAgMjI5OiBLRVlTLlNFTUlDT0xPTlxyXG59O1xyXG52YXIga2V5Q29kZVRvS2V5MSA9IFtdO1xyXG5rZXlDb2RlVG9LZXkxWzhdID0gS0VZUy5CQUNLU1BBQ0U7XHJcbmtleUNvZGVUb0tleTFbOV0gPSBLRVlTLlRBQjtcclxua2V5Q29kZVRvS2V5MVsxM10gPSBLRVlTLlJFVFVSTjtcclxua2V5Q29kZVRvS2V5MVsxNl0gPSBLRVlTLlNISUZUO1xyXG5rZXlDb2RlVG9LZXkxWzE3XSA9IEtFWVMuQ09OVFJPTDtcclxua2V5Q29kZVRvS2V5MVsxOF0gPSBLRVlTLkFMVDtcclxua2V5Q29kZVRvS2V5MVsyMF0gPSBLRVlTLkNBUFNfTE9DSztcclxua2V5Q29kZVRvS2V5MVsyN10gPSBLRVlTLkVTQ0FQRTtcclxua2V5Q29kZVRvS2V5MVszMl0gPSBLRVlTLlNQQUNFO1xyXG5rZXlDb2RlVG9LZXkxWzMzXSA9IEtFWVMuUEFHRVVQO1xyXG5rZXlDb2RlVG9LZXkxWzM0XSA9IEtFWVMuUEFHRURPV047XHJcbmtleUNvZGVUb0tleTFbMzVdID0gS0VZUy5FTkQ7XHJcbmtleUNvZGVUb0tleTFbMzZdID0gS0VZUy5IT01FO1xyXG5rZXlDb2RlVG9LZXkxWzM3XSA9IEtFWVMuTEVGVDtcclxua2V5Q29kZVRvS2V5MVszOF0gPSBLRVlTLlVQO1xyXG5rZXlDb2RlVG9LZXkxWzM5XSA9IEtFWVMuUklHSFQ7XHJcbmtleUNvZGVUb0tleTFbNDBdID0gS0VZUy5ET1dOO1xyXG5rZXlDb2RlVG9LZXkxWzQyXSA9IEtFWVMuUFJJTlRTQ1JFRU47XHJcbmtleUNvZGVUb0tleTFbNDRdID0gS0VZUy5QUklOVFNDUkVFTjtcclxua2V5Q29kZVRvS2V5MVs0NV0gPSBLRVlTLklOU0VSVDtcclxua2V5Q29kZVRvS2V5MVs0Nl0gPSBLRVlTLkRFTEVURTtcclxua2V5Q29kZVRvS2V5MVs1OV0gPSBLRVlTLlNFTUlDT0xPTjtcclxua2V5Q29kZVRvS2V5MVs2MV0gPSBLRVlTLkVRVUFMO1xyXG5rZXlDb2RlVG9LZXkxWzkxXSA9IEtFWVMuQ01EX0w7XHJcbmtleUNvZGVUb0tleTFbOTJdID0gS0VZUy5DTURfUjtcclxua2V5Q29kZVRvS2V5MVs5M10gPSBLRVlTLkNNRF9SO1xyXG5rZXlDb2RlVG9LZXkxWzk2XSA9IEtFWVMuTlVNUEFEXzA7XHJcbmtleUNvZGVUb0tleTFbOTddID0gS0VZUy5OVU1QQURfMTtcclxua2V5Q29kZVRvS2V5MVs5OF0gPSBLRVlTLk5VTVBBRF8yO1xyXG5rZXlDb2RlVG9LZXkxWzk5XSA9IEtFWVMuTlVNUEFEXzM7XHJcbmtleUNvZGVUb0tleTFbMTAwXSA9IEtFWVMuTlVNUEFEXzQ7XHJcbmtleUNvZGVUb0tleTFbMTAxXSA9IEtFWVMuTlVNUEFEXzU7XHJcbmtleUNvZGVUb0tleTFbMTAyXSA9IEtFWVMuTlVNUEFEXzY7XHJcbmtleUNvZGVUb0tleTFbMTAzXSA9IEtFWVMuTlVNUEFEXzc7XHJcbmtleUNvZGVUb0tleTFbMTA0XSA9IEtFWVMuTlVNUEFEXzg7XHJcbmtleUNvZGVUb0tleTFbMTA1XSA9IEtFWVMuTlVNUEFEXzk7XHJcbmtleUNvZGVUb0tleTFbMTEyXSA9IEtFWVMuRjE7XHJcbmtleUNvZGVUb0tleTFbMTEzXSA9IEtFWVMuRjI7XHJcbmtleUNvZGVUb0tleTFbMTE0XSA9IEtFWVMuRjM7XHJcbmtleUNvZGVUb0tleTFbMTE1XSA9IEtFWVMuRjQ7XHJcbmtleUNvZGVUb0tleTFbMTE2XSA9IEtFWVMuRjU7XHJcbmtleUNvZGVUb0tleTFbMTE3XSA9IEtFWVMuRjY7XHJcbmtleUNvZGVUb0tleTFbMTE4XSA9IEtFWVMuRjc7XHJcbmtleUNvZGVUb0tleTFbMTE5XSA9IEtFWVMuRjg7XHJcbmtleUNvZGVUb0tleTFbMTIwXSA9IEtFWVMuRjk7XHJcbmtleUNvZGVUb0tleTFbMTIxXSA9IEtFWVMuRjEwO1xyXG5rZXlDb2RlVG9LZXkxWzEyMl0gPSBLRVlTLkYxMTtcclxua2V5Q29kZVRvS2V5MVsxMjNdID0gS0VZUy5GMTI7XHJcbmtleUNvZGVUb0tleTFbMTI0XSA9IEtFWVMuUFJJTlRTQ1JFRU47XHJcbmtleUNvZGVUb0tleTFbMTczXSA9IEtFWVMuTUlOVVM7XHJcbmtleUNvZGVUb0tleTFbMTg2XSA9IEtFWVMuU0VNSUNPTE9OO1xyXG5rZXlDb2RlVG9LZXkxWzE4N10gPSBLRVlTLkVRVUFMO1xyXG5rZXlDb2RlVG9LZXkxWzE4OF0gPSBLRVlTLkNPTU1BO1xyXG5rZXlDb2RlVG9LZXkxWzE4OV0gPSBLRVlTLk1JTlVTO1xyXG5rZXlDb2RlVG9LZXkxWzE5MF0gPSBLRVlTLlBFUklPRDtcclxua2V5Q29kZVRvS2V5MVsxOTFdID0gS0VZUy5TTEFTSDtcclxua2V5Q29kZVRvS2V5MVsxOTJdID0gS0VZUy5CQUNLUVVPVEU7XHJcbmtleUNvZGVUb0tleTFbMjE5XSA9IEtFWVMuQlJBQ0tFVF9MRUZUO1xyXG5rZXlDb2RlVG9LZXkxWzIyMF0gPSBLRVlTLkJBQ0tTTEFTSDtcclxua2V5Q29kZVRvS2V5MVsyMjFdID0gS0VZUy5CUkFDS0VUX1JJR0hUO1xyXG5rZXlDb2RlVG9LZXkxWzIyMl0gPSBLRVlTLlFVT1RFO1xyXG5rZXlDb2RlVG9LZXkxWzIyNF0gPSBLRVlTLk1FVEE7XHJcbmtleUNvZGVUb0tleTFbMjI5XSA9IEtFWVMuU0VNSUNPTE9OO1xyXG5mb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcclxuICAgIGtleUNvZGVUb0tleTFbaSArIDQ4XSA9IFwiXCIgKyBpO1xyXG59XHJcbmZvciAodmFyIGkgPSAwOyBpIDwgMjY7IGkrKykge1xyXG4gICAgdmFyIGtleUNvZGUgPSBpICsgNjU7XHJcbiAgICBrZXlDb2RlVG9LZXkxW2tleUNvZGVdID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXlDb2RlKS50b0xvd2VyQ2FzZSgpO1xyXG59XHJcbmZ1bmN0aW9uIGtleWJvYXJkRXZlbnRUb0tleShha2V5KSB7XHJcbiAgICByZXR1cm4ga2V5Q29kZVRvS2V5MVtha2V5XTtcclxufVxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgTGlmZWN5Y2xlIG9mIEJpemdhemUgTWVldGluZ1xyXG5cclxuICAgIGNvbm5lY3RUb0JHIC0+IGpvaW5CR0NvbmZlcmVuY2UgLT4gY29ubmVjdFRvSml0c2kgLT4gam9pbkppdHNpQ29uZmVyZW5jZSAtPiAuLi5cclxuICAgIC4uLiAtPiBsZWF2ZUZyb21KaXRzaSAtPiBsZWF2ZUZyb21CR1xyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG52YXIgTWVldGluZ0NvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lZXRpbmdDb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5yZXNldE11dGVPbkRldmljZUNoYW5nZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5oaWRlVG9vbGJhck9uTW91c2VPdXQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1lZXRpbmdDb25maWc7XHJcbn0oKSk7XHJcbnZhciBCaXpHYXplTWVldGluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJpekdhemVNZWV0aW5nKCkge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldyBzaWduYWxSLkh1YkNvbm5lY3Rpb25CdWlsZGVyKCkud2l0aFVybChcIi9CaXpHYXplTWVldGluZ1NlcnZlclwiKS5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuam9pbmVkQkdDb25mZXJlbmNlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51aSA9IG5ldyBtZWV0aW5nX3VpXzEuTWVldGluZ1VJKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucm9vbUluZm8gPSBuZXcgQkdNZWV0aW5nXzEuQkdNZWV0aW5nSW5mbygpO1xyXG4gICAgICAgIHRoaXMubV9CR1VzZXJMaXN0ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubG9jYWxWaWRlb1BhbmVsID0gbnVsbDtcclxuICAgICAgICB0aGlzLm15SW5mbyA9IG5ldyBCR1VzZXJfMS5Vc2VySW5mbygpO1xyXG4gICAgICAgIHRoaXMuSml0c2lNZWV0SlMgPSB3aW5kb3cuSml0c2lNZWV0SlM7XHJcbiAgICAgICAgLy9KaXRzaVNlcnZlckRvbWFpbiA9IFwiaWRsZXN0cy5jb21cIjtcclxuICAgICAgICAvL0ppdHNpU2VydmVyRG9tYWluID0gXCJ1bmltYWlsLmluXCI7XHJcbiAgICAgICAgdGhpcy5KaXRzaVNlcnZlckRvbWFpbiA9IFwibWVldHNlcnZlci5jb21cIjtcclxuICAgICAgICB0aGlzLmxvY2FsVHJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5zY3JlZW5TaGFyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRvd25sb2FkUmVjb3JkRmlsZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vZGVmYXVsdCBkZXZpY2VzXHJcbiAgICAgICAgdGhpcy5hY3RpdmVDYW1lcmFJZCA9IHdpbmRvdy5fY2FtSWQ7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVNaWNJZCA9IHdpbmRvdy5fbWljSWQ7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVTcGVha2VySWQgPSB3aW5kb3cuX3NwZWFrZXJJZDtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBNZWV0aW5nQ29uZmlnKCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kUXVldWUgPSBuZXcgSml0c2lDb21tYW5kUXVldWVfMS5KaXRzaUNvbW1hbmRRdWV1ZSgpO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUNvbW1hbmRRdWV1ZSA9IG5ldyBKaXRzaUNvbW1hbmRRdWV1ZV8xLkppdHNpUHJpdmF0ZUNvbW1hbmRRdWV1ZSgpO1xyXG4gICAgICAgIHRoaXMucmVjb3JkaW5nRGF0YSA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICogICAgICAgICAgICAgIFNUQVJUIH4gRU5EXHJcbiAgICAgKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX3Jvb21JZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxlYXZlQkdDb25mZXJlbmNlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9qaXRzaSBpbml0XHJcbiAgICAgICAgdmFyIGluaXRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBkaXNhYmxlQXVkaW9MZXZlbHM6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuSml0c2lNZWV0SlMuc2V0TG9nTGV2ZWwodGhpcy5KaXRzaU1lZXRKUy5sb2dMZXZlbHMuRVJST1IpO1xyXG4gICAgICAgIHRoaXMuSml0c2lNZWV0SlMuaW5pdChpbml0T3B0aW9ucyk7XHJcbiAgICAgICAgLy9kZXZpY2UgbG9nXHJcbiAgICAgICAgdGhpcy5KaXRzaU1lZXRKUy5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyhmdW5jdGlvbiAoZGV2aWNlcykge1xyXG4gICAgICAgICAgICBkZXZpY2VzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hY3RpdmVDYW1lcmFJZC5sZW5ndGggPiAwICYmIGQuZGV2aWNlSWQgPT09IF90aGlzLmFjdGl2ZUNhbWVyYUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuTG9nKFwiQ2FtZXJhOiBcIiArIGQubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmFjdGl2ZU1pY0lkLmxlbmd0aCA+IDAgJiYgZC5kZXZpY2VJZCA9PT0gX3RoaXMuYWN0aXZlTWljSWQgJiYgZC5raW5kID09PSAnYXVkaW9pbnB1dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5Mb2coXCJNaWNyb3Bob25lOiBcIiArIGQubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL2Nvbm5lY3QgdG8gYmcgc2VydmVyXHJcbiAgICAgICAgdGhpcy5jb25uZWN0VG9CR1NlcnZlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLkxvZyhcIkNvbm5lY3RlZCB0byBCaXpHYXplIFNpZ25hbFIgU2VydmVyXCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5qb2luQkdDb25mZXJlbmNlKCk7IC8vID0+IG9uQkdDb25mZXJlbmNlSm9pbmVkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy90b2RvIFxyXG4gICAgICAgIC8vaWYgaXQgd2FzIHJlY29yZGluZywgc2F2ZSBpdCBiZWZvcmUgc3RvcFxyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuaml0c2lSb29tSm9pbmVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wQWxsTWVkaWFTdHJlYW1zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaml0c2lSb29tLmxlYXZlKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sZWF2ZUJHQ29uZmVyZW5jZSgpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxlYXZlQkdDb25mZXJlbmNlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sZWF2ZUJHQ29uZmVyZW5jZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuZm9yY2VTdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqICAgICAgICAgICAgICBCaXpHYXplIFNpZ25hbFIgU2VydmVyIGludGVyYWN0aW9uXHJcbiAgICAgKlxyXG4gICAgICogICAgICAgICAgQ29ubmVjdFxyXG4gICAgICogICAgICAgICAgSm9pbi9MZWF2ZVxyXG4gICAgICogICAgICAgICAgQ29udHJvbCBNZXNzYWdlXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuY29ubmVjdFRvQkdTZXJ2ZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIENvbm5lY3QgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc3RhcnQoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVnaXN0ZXJCR1NlcnZlckNhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5qb2luQkdDb25mZXJlbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5pbnZva2UoXCJKb2luXCIsIFwiXCIgKyB3aW5kb3cuX3Jvb21JZCwgXCJcIiArIHdpbmRvdy5fdXNlcklkLCBcIlwiICsgd2luZG93Ll9hbm9ueW1vdXNVc2VyTmFtZSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihcIkpvaW4gTWVldGluZyBGYWlsZWQuXCIsIGVyci50b1N0cmluZygpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL3RoaXMgaXMgdGhlIGVudHJ5IHBvaW50IHdoZXJlIHdlIGNhbiBkZWNpZGUgd2ViaW5hci9ncm91cCBjaGF0dGluZ1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB3ZSBjYW4gZGVjaWRlIGkgYW0gaG9zdCBvciBub3RcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkJHQ29uZmVyZW5jZUpvaW5lZCA9IGZ1bmN0aW9uIChyb29tSW5mbywgdXNlckluZm8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuam9pbmVkQkdDb25mZXJlbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxvY2FsU3RhcnRUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMucm9vbUluZm8gPSByb29tSW5mbztcclxuICAgICAgICB0aGlzLkxvZyhcIk1lZXRpbmcgVHlwZTogXCIgKyAocm9vbUluZm8uSXNXZWJpbmFyID8gXCJXZWJpbmFyXCIgOiBcIkdyb3VwIENoYXR0aW5nXCIpKTtcclxuICAgICAgICB0aGlzLm15SW5mby5JZCA9IHVzZXJJbmZvLklkO1xyXG4gICAgICAgIHRoaXMubXlJbmZvLk5hbWUgPSB1c2VySW5mby5OYW1lO1xyXG4gICAgICAgIHRoaXMubXlJbmZvLklzSG9zdCA9IHVzZXJJbmZvLklzSG9zdDtcclxuICAgICAgICB2YXIgZGV2aWNlVXNlUG9saWN5ID0gdGhpcy5nZXRJbml0TWVkaWFQb2xpY3koKTtcclxuICAgICAgICB0aGlzLm15SW5mby5tZWRpYVBvbGljeS51c2VDYW1lcmEgPSBkZXZpY2VVc2VQb2xpY3kudXNlQ2FtZXJhO1xyXG4gICAgICAgIHRoaXMubXlJbmZvLm1lZGlhUG9saWN5LnVzZU1pYyA9IGRldmljZVVzZVBvbGljeS51c2VNaWM7XHJcbiAgICAgICAgdGhpcy51aS51cGRhdGVCeVJvbGUodGhpcy5teUluZm8uSXNIb3N0KTtcclxuICAgICAgICB0aGlzLnVpLnRvb2xiYXIudXBkYXRlQnlSb2xlKHRoaXMubXlJbmZvLklzSG9zdCk7XHJcbiAgICAgICAgdGhpcy51aS51cGRhdGVKb2luaW5nSW5mbygpO1xyXG4gICAgICAgIHRoaXMuaW5pdE1lZGlhRGV2aWNlcygpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIC8vY29ubmVjdCB0byBqaXRzaSBzZXJ2ZXIgYW5kIGVudGVyIHJvb21cclxuICAgICAgICAgICAgX3RoaXMuY29ubmVjdFRvSml0c2lTZXJ2ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUubGVhdmVCR0NvbmZlcmVuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5Mb2coXCJsZWF2aW5nIE1lZXRpbmcgXCIgKyB0aGlzLmpvaW5lZEJHQ29uZmVyZW5jZSk7XHJcbiAgICAgICAgLyppZiAodGhpcy5qb2luZWRCR0NvbmZlcmVuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmludm9rZShcIkxlYXZlUm9vbVwiKS5jYXRjaCgoZXJyOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFwiTGVhdmUgTWVldGluZyBGYWlsZWQuXCIsIGVyci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlKi8ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BBbGxNZWRpYVN0cmVhbXMoKTtcclxuICAgICAgICAgICAgJChcImZvcm0jcmV0dXJuXCIpLnN1Ym1pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25CR0NvbmZlcmVuY2VMZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuam9pbmVkQkdDb25mZXJlbmNlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9wQWxsTWVkaWFTdHJlYW1zKCk7XHJcbiAgICAgICAgdGhpcy5tX0JHVXNlckxpc3QuY2xlYXIoKTtcclxuICAgICAgICAkKFwiZm9ybSNyZXR1cm5cIikuc3VibWl0KCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uQkdVc2VySm9pbmVkID0gZnVuY3Rpb24gKHVzZXJJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5tX0JHVXNlckxpc3Quc2V0KHVzZXJJbmZvLklkLCB1c2VySW5mbyk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uQkdVc2VyTGVmdCA9IGZ1bmN0aW9uICh1c2VySWQpIHtcclxuICAgICAgICAvL3NlbGYgbGVhdmVcclxuICAgICAgICBpZiAodXNlcklkID09IHRoaXMubXlJbmZvLklkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25CR0NvbmZlcmVuY2VMZWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBhcnRpY2lwYW50IGxlZnRcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9CR1VzZXJMaXN0Lmhhcyh1c2VySWQpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYml6VXNlciA9IHRoaXMubV9CR1VzZXJMaXN0LmdldCh1c2VySWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJpelVzZXIuSml0c2lfSWQgJiYgdGhpcy5qaXRzaVJvb21Kb2luZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBqaXRzaVVzZXIgPSB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudEJ5SWQoYml6VXNlci5KaXRzaV9JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGppdHNpVXNlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkppdHNpVXNlckxlZnQoYml6VXNlci5KaXRzaV9JZCwgaml0c2lVc2VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuTG9nKHRoaXMubV9CR1VzZXJMaXN0LmdldCh1c2VySWQpLk5hbWUgKyBcIiBoYXMgbGVmdFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9CR1VzZXJMaXN0LmRlbGV0ZSh1c2VySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5yZWdpc3RlckJHU2VydmVyQ2FsbGJhY2tzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKGJnXzEuQkd0b1VzZXIuUk9PTV9KT0lORUQsIGZ1bmN0aW9uIChzdHJSb29tSW5mbywgc3RyTXlJbmZvKSB7XHJcbiAgICAgICAgICAgIHZhciByb29tSW5mbyA9IEpTT04ucGFyc2Uoc3RyUm9vbUluZm8pO1xyXG4gICAgICAgICAgICB2YXIgbXlJbmZvID0gSlNPTi5wYXJzZShzdHJNeUluZm8pO1xyXG4gICAgICAgICAgICBfdGhpcy5vbkJHQ29uZmVyZW5jZUpvaW5lZChyb29tSW5mbywgbXlJbmZvKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub24oYmdfMS5CR3RvVXNlci5ST09NX1VTRVJfSk9JTkVELCBmdW5jdGlvbiAoc3RyVXNlckluZm8pIHtcclxuICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHN0clVzZXJJbmZvKTtcclxuICAgICAgICAgICAgX3RoaXMub25CR1VzZXJKb2luZWQoaW5mbyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKGJnXzEuQkd0b1VzZXIuRVJST1IsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmZvcmNlU3RvcCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbihiZ18xLkJHdG9Vc2VyLlJPT01fTEVGVCwgZnVuY3Rpb24gKGNsaWVudElkKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uQkdVc2VyTGVmdChjbGllbnRJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKGJnXzEuQkd0b1VzZXIuU0lHTkFMSU5HLCBmdW5jdGlvbiAoc291cmNlSWQsIHN0ck1zZykge1xyXG4gICAgICAgICAgICAvKmNvbnNvbGUubG9nKCcgcmVjZWl2ZWQgc2lnbmFsaW5nIG1lc3NhZ2U6Jywgc3RyTXNnKTtcclxuICAgICAgICAgICAgbGV0IG1zZyA9IEpTT04ucGFyc2Uoc3RyTXNnKTtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZUlkICE9IHRoaXMubXlJbmZvLklkICYmIHRoaXMuY29ubk1hcC5oYXMoc291cmNlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGVlckNvbm46IEJpekdhemVDb25uZWN0aW9uID0gdGhpcy5jb25uTWFwLmdldChzb3VyY2VJZCk7XHJcbiAgICAgICAgICAgICAgICBwZWVyQ29ubi5vblNpZ25hbGluZ01lc3NhZ2UobXNnKTtcclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnNlbmRCR1NpZ25hbGluZ01lc3NhZ2UgPSBmdW5jdGlvbiAoZGVzdElkLCBtc2cpIHtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uaW52b2tlKGJnXzEuQkd0b1VzZXIuU0lHTkFMSU5HLCB0aGlzLm15SW5mby5JZCwgZGVzdElkLCBKU09OLnN0cmluZ2lmeShtc2cpKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiAgICAgICAgICAgICAgTG9jYWwgQ2FtZXJhL01pY3JvcGhvbmUgaW5pdFxyXG4gICAgICpcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5pbml0TWVkaWFEZXZpY2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5Mb2coJ0dldHRpbmcgdXNlciBtZWRpYSBkZXZpY2VzIC4uLicpO1xyXG4gICAgICAgIC8vc2V0IHNwZWFrZXJcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVTcGVha2VySWQgJiYgdGhpcy5KaXRzaU1lZXRKUy5tZWRpYURldmljZXMuaXNEZXZpY2VDaGFuZ2VBdmFpbGFibGUoJ291dHB1dCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSml0c2lNZWV0SlMubWVkaWFEZXZpY2VzLnNldEF1ZGlvT3V0cHV0RGV2aWNlKHRoaXMuYWN0aXZlU3BlYWtlcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIC8vc2V0IGlucHV0IGRldmljZXNcclxuICAgICAgICB2YXIgY2FtZXJhSWQgPSB0aGlzLmFjdGl2ZUNhbWVyYUlkO1xyXG4gICAgICAgIHZhciBtaWNJZCA9IHRoaXMuYWN0aXZlTWljSWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTG9jYWxUcmFja3MoY2FtZXJhSWQsIG1pY0lkKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJhY2tzKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFja3MubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIHRyYWNrc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2ssIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm15SW5mby5tZWRpYVBvbGljeS51c2VDYW1lcmEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLm11dGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLnVubXV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm15SW5mby5tZWRpYVBvbGljeS51c2VNaWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLm11dGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLnVubXV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMub25Mb2NhbFRyYWNrQWRkZWQodHJhY2tzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy51aS50b29sYmFyLnVwZGF0ZShfdGhpcy5teUluZm8sIF90aGlzLmdldExvY2FsVHJhY2tzKCkpO1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLnJvb21JbmZvLklzV2ViaW5hciB8fCBfdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZU15UGFuZWwoKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5jcmVhdGVWaWRlb1RyYWNrID0gZnVuY3Rpb24gKGNhbWVyYURldmljZUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5KaXRzaU1lZXRKUy5jcmVhdGVMb2NhbFRyYWNrcyh7XHJcbiAgICAgICAgICAgIGRldmljZXM6IFsndmlkZW8nXSxcclxuICAgICAgICAgICAgY2FtZXJhRGV2aWNlSWQ6IGNhbWVyYURldmljZUlkLFxyXG4gICAgICAgICAgICBtaWNEZXZpY2VJZDogbnVsbFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuTG9nKGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmNyZWF0ZUF1ZGlvVHJhY2sgPSBmdW5jdGlvbiAobWljRGV2aWNlSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiAodGhpcy5KaXRzaU1lZXRKUy5jcmVhdGVMb2NhbFRyYWNrcyh7XHJcbiAgICAgICAgICAgIGRldmljZXM6IFsnYXVkaW8nXSxcclxuICAgICAgICAgICAgY2FtZXJhRGV2aWNlSWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG1pY0RldmljZUlkOiBtaWNEZXZpY2VJZFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuTG9nKGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5jcmVhdGVMb2NhbFRyYWNrcyA9IGZ1bmN0aW9uIChjYW1lcmFEZXZpY2VJZCwgbWljRGV2aWNlSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChjYW1lcmFEZXZpY2VJZCAhPSBudWxsICYmIG1pY0RldmljZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSml0c2lNZWV0SlMuY3JlYXRlTG9jYWxUcmFja3Moe1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlczogWydhdWRpbycsICd2aWRlbyddLFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhRGV2aWNlSWQ6IGNhbWVyYURldmljZUlkLFxyXG4gICAgICAgICAgICAgICAgbWljRGV2aWNlSWQ6IG1pY0RldmljZUlkXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNyZWF0ZUF1ZGlvVHJhY2sobWljRGV2aWNlSWQpLnRoZW4oZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IF9hWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIF90aGlzLmNyZWF0ZVZpZGVvVHJhY2soY2FtZXJhRGV2aWNlSWQpLnRoZW4oZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IF9hWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdKTsgfSkudGhlbihmdW5jdGlvbiAodHJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tzLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdHlwZW9mIHQgIT09ICd1bmRlZmluZWQnOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNhbWVyYURldmljZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVmlkZW9UcmFjayhjYW1lcmFEZXZpY2VJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG1pY0RldmljZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXVkaW9UcmFjayhtaWNEZXZpY2VJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkxvY2FsVHJhY2tBZGRlZCA9IGZ1bmN0aW9uICh0cmFja3MpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBsb2NhbFZpZGVvVHJhY2s7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFja3MubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpIDwgdHJhY2tzLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja3NbaV0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy50cmFjay5UUkFDS19BVURJT19MRVZFTF9DSEFOR0VELCBmdW5jdGlvbiAoYXVkaW9MZXZlbCkgeyByZXR1cm4gY29uc29sZS5sb2coXCJBdWRpbyBMZXZlbCBsb2NhbDogXCIgKyBhdWRpb0xldmVsKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrc1tpXS5hZGRFdmVudExpc3RlbmVyKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLnRyYWNrLlRSQUNLX01VVEVfQ0hBTkdFRCwgZnVuY3Rpb24gKHRyYWNrKSB7IF90aGlzLnVwZGF0ZVVpT25Mb2NhbFRyYWNrQ2hhbmdlKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja3NbaV0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy50cmFjay5MT0NBTF9UUkFDS19TVE9QUEVELCBmdW5jdGlvbiAodHJhY2spIHsgX3RoaXMudXBkYXRlVWlPbkxvY2FsVHJhY2tDaGFuZ2UoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrc1tpXS5hZGRFdmVudExpc3RlbmVyKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLnRyYWNrLlRSQUNLX0FVRElPX09VVFBVVF9DSEFOR0VELCBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcInRyYWNrIGF1ZGlvIG91dHB1dCBkZXZpY2Ugd2FzIGNoYW5nZWQgdG8gXCIgKyBkZXZpY2VJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5qaXRzaVJvb21Kb2luZWQoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9nKFwiWyBPVVQgXSBteSB0cmFjayAtIFwiICsgdHJhY2tzW2ldLmdldFR5cGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVwbGFjZUxvY2FsVHJhY2sodHJhY2tzW2ldLCB0cmFja3NbaV0uZ2V0VHlwZSgpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Rvb2xiYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyLnVwZGF0ZSh0aGlzLm15SW5mbywgdGhpcy5nZXRMb2NhbFRyYWNrcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9teSB2aWRlbyBwYW5lbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNeVBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsVmlkZW9UcmFjayA9IHRoaXMuZ2V0TG9jYWxUcmFja0J5VHlwZShNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxWaWRlb1RyYWNrICYmIHRoaXMubG9jYWxWaWRlb1BhbmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFZpZGVvVHJhY2suYXR0YWNoKHRoaXMubG9jYWxWaWRlb1BhbmVsLnZpZGVvRWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2FsVmlkZW9QYW5lbC52aWRlb0VsZW0ucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbFZpZGVvUGFuZWwuc2V0U2hvdG5hbWVWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5zdG9wQWxsTWVkaWFTdHJlYW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGxvY2FsVHJhY2tzID0gX19zcHJlYWRBcnJheShbXSwgdGhpcy5nZXRMb2NhbFRyYWNrcygpKTtcclxuICAgICAgICBsb2NhbFRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICBfdGhpcy5yZW1vdmVMb2NhbFRyYWNrKHRyYWNrKS50aGVuKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFjay5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkRldmljZUNoYW5nZSA9IGZ1bmN0aW9uIChuZXdEZXZpY2VzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdmlkZW9EZXZpY2VDaGFuZ2VkID0gdGhpcy5hY3RpdmVDYW1lcmFJZCAhPT0gbmV3RGV2aWNlcy5jYW1lcmFJZDtcclxuICAgICAgICB2YXIgYXVkaW9EZXZpY2VDaGFuZ2VkID0gdGhpcy5hY3RpdmVNaWNJZCAhPT0gbmV3RGV2aWNlcy5taWNJZDtcclxuICAgICAgICAvL2NyZWF0ZSBuZXcgdHJhY2tzIHdpdGggbmV3IGRldmljZXNcclxuICAgICAgICB0aGlzLmNyZWF0ZUxvY2FsVHJhY2tzKHZpZGVvRGV2aWNlQ2hhbmdlZCA/IG5ld0RldmljZXMuY2FtZXJhSWQgOiBudWxsLCBhdWRpb0RldmljZUNoYW5nZWQgPyBuZXdEZXZpY2VzLm1pY0lkIDogbnVsbClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRyYWNrcykge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkxvY2FsVHJhY2tBZGRlZCh0cmFja3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlQ2FtZXJhSWQgPSBuZXdEZXZpY2VzLmNhbWVyYUlkO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlTWljSWQgPSBuZXdEZXZpY2VzLm1pY0lkO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3BlYWtlcklkID0gbmV3RGV2aWNlcy5zcGVha2VySWQ7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmdldEFjdGl2ZURldmljZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFjdGl2ZURldmljZXMgPSBuZXcgQWN0aXZlRGV2aWNlc18xLkFjdGl2ZURldmljZXMoKTtcclxuICAgICAgICBhY3RpdmVEZXZpY2VzLmNhbWVyYUlkID0gdGhpcy5hY3RpdmVDYW1lcmFJZDtcclxuICAgICAgICBhY3RpdmVEZXZpY2VzLm1pY0lkID0gdGhpcy5hY3RpdmVNaWNJZDtcclxuICAgICAgICBhY3RpdmVEZXZpY2VzLnNwZWFrZXJJZCA9IHRoaXMuYWN0aXZlU3BlYWtlcklkO1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVEZXZpY2VzO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5nZXRJbml0TWVkaWFQb2xpY3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHVzZUNhbWVyYSA9IHRydWU7XHJcbiAgICAgICAgdmFyIHVzZU1pYyA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMucm9vbUluZm8uSXNXZWJpbmFyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KSB7XHJcbiAgICAgICAgICAgICAgICB1c2VDYW1lcmEgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHVzZU1pYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJvb21JbmZvLmNoYW5uZWxUeXBlID09PSBDaGFubmVsVHlwZV8xLkNoYW5uZWxUeXBlLkF1ZGlvT25seSlcclxuICAgICAgICAgICAgdXNlQ2FtZXJhID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMucm9vbUluZm8uY2hhbm5lbFR5cGUgPT09IENoYW5uZWxUeXBlXzEuQ2hhbm5lbFR5cGUuVmlkZW9Pbmx5KVxyXG4gICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcclxuICAgICAgICBpZiAod2luZG93Ll92aWRlb011dGUgIT09IFwidHJ1ZVwiKVxyXG4gICAgICAgICAgICB1c2VDYW1lcmEgPSBmYWxzZTtcclxuICAgICAgICBpZiAod2luZG93Ll9hdWRpb011dGUgIT09IFwidHJ1ZVwiKVxyXG4gICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcclxuICAgICAgICB2YXIgcG9saWN5ID0gbmV3IElucHV0RGV2aWNlUG9saWN5XzEuSW5wdXRNZWRpYVBvbGljeSgpO1xyXG4gICAgICAgIHBvbGljeS51c2VDYW1lcmEgPSB1c2VDYW1lcmE7XHJcbiAgICAgICAgcG9saWN5LnVzZU1pYyA9IHVzZU1pYztcclxuICAgICAgICB0aGlzLkxvZyhcInVzZUNhbWVyYSBcIiArIHVzZUNhbWVyYSk7XHJcbiAgICAgICAgdGhpcy5Mb2coXCJ1c2VNaWMgXCIgKyB1c2VNaWMpO1xyXG4gICAgICAgIHJldHVybiBwb2xpY3k7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICogICAgICAgICAgICAgIExvY2FsIFRyYWNrIEFjY2Vzc1xyXG4gICAgICpcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5qaXRzaVJvb21Kb2luZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaml0c2lSb29tICYmIHRoaXMuaml0c2lSb29tLmlzSm9pbmVkKCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmdldExvY2FsVHJhY2tzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmppdHNpUm9vbUpvaW5lZCgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qaXRzaVJvb20uZ2V0TG9jYWxUcmFja3MoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsVHJhY2tzO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5nZXRMb2NhbFRyYWNrQnlUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBpZiAodGhpcy5qaXRzaVJvb21Kb2luZWQoKSkge1xyXG4gICAgICAgICAgICB2YXIgdHJhY2tzID0gdGhpcy5qaXRzaVJvb20uZ2V0TG9jYWxUcmFja3ModHlwZSk7XHJcbiAgICAgICAgICAgIGlmICh0cmFja3MubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFja3NbMF07XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRyYWNrID0gdGhpcy5sb2NhbFRyYWNrcy5maW5kKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmdldFR5cGUoKSA9PT0gdHlwZTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFjaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnJlbW92ZUxvY2FsVHJhY2sgPSBmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICBpZiAodGhpcy5qaXRzaVJvb21Kb2luZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qaXRzaVJvb20ucmVtb3ZlVHJhY2sodHJhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5sb2NhbFRyYWNrcy5pbmRleE9mKHRyYWNrKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsVHJhY2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy90eXBlIGlzIG5lY2Nlc3NyYXkgd2hlbiBuZXdUcmFjayBpcyBudWxsXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUucmVwbGFjZUxvY2FsVHJhY2sgPSBmdW5jdGlvbiAobmV3VHJhY2ssIHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRUcmFjaztcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgb2xkVHJhY2sgPSB0aGlzLmdldExvY2FsVHJhY2tCeVR5cGUodHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob2xkVHJhY2sgPT09IG5ld1RyYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdCgpXTtcclxuICAgICAgICAgICAgICAgIGlmICghb2xkVHJhY2sgJiYgIW5ld1RyYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdCgpXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmppdHNpUm9vbUpvaW5lZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuaml0c2lSb29tLnJlcGxhY2VUcmFjayhvbGRUcmFjaywgbmV3VHJhY2spLnRoZW4oZnVuY3Rpb24gKF8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRUcmFjaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRUcmFjay5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVVaU9uTG9jYWxUcmFja0NoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5yZW1vdmVMb2NhbFRyYWNrKG9sZFRyYWNrKS50aGVuKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkVHJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVHJhY2suZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1RyYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvY2FsVHJhY2tzLnB1c2gobmV3VHJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlVWlPbkxvY2FsVHJhY2tDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUudXBkYXRlVWlPbkxvY2FsVHJhY2tDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxWaWRlb1BhbmVsKVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNeVBhbmVsKCk7XHJcbiAgICAgICAgdGhpcy51aS50b29sYmFyLnVwZGF0ZSh0aGlzLm15SW5mbywgdGhpcy5nZXRMb2NhbFRyYWNrcygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiAgICAgICAgICAgICAgSml0c2kgU2VydmVyIGludGVyYWN0aW9uXHJcbiAgICAgKiAgICAgICAgIENvbm5lY3RcclxuICAgICAqICAgICAgICAgRW50ZXIvTGVhdmUgUm9vbVxyXG4gICAgICogICAgICAgICBTZW5kL1JlY2VpdmUgVHJhY2tcclxuICAgICAqICAgICAgICAgVXNlckluZm9cclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5jb25uZWN0VG9KaXRzaVNlcnZlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJkb21haW4gPSB0aGlzLkppdHNpU2VydmVyRG9tYWluO1xyXG4gICAgICAgIHZhciBjb25uQ29uZiA9IHtcclxuICAgICAgICAgICAgaG9zdHM6IHtcclxuICAgICAgICAgICAgICAgIGRvbWFpbjogc2VydmVyZG9tYWluLFxyXG4gICAgICAgICAgICAgICAgbXVjOiBcImNvbmZlcmVuY2UuXCIgKyBzZXJ2ZXJkb21haW4sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvc2g6IFwiLy9cIiArIHNlcnZlcmRvbWFpbiArIFwiL2h0dHAtYmluZFwiLFxyXG4gICAgICAgICAgICAvLyBUaGUgbmFtZSBvZiBjbGllbnQgbm9kZSBhZHZlcnRpc2VkIGluIFhFUC0wMTE1ICdjJyBzdGFuemFcclxuICAgICAgICAgICAgY2xpZW50Tm9kZTogXCIvL1wiICsgc2VydmVyZG9tYWluICsgXCIvaml0c2ltZWV0XCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaml0c2lDb25uZWN0aW9uID0gbmV3IHRoaXMuSml0c2lNZWV0SlMuSml0c2lDb25uZWN0aW9uKG51bGwsIG51bGwsIGNvbm5Db25mKTtcclxuICAgICAgICB0aGlzLmppdHNpQ29ubmVjdGlvbi5hZGRFdmVudExpc3RlbmVyKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbm5lY3Rpb24uQ09OTkVDVElPTl9FU1RBQkxJU0hFRCwgZnVuY3Rpb24gKCkgeyBfdGhpcy5vbkppdHNpQ29ubmVjdGlvblN1Y2Nlc3MoKTsgfSk7XHJcbiAgICAgICAgdGhpcy5qaXRzaUNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25uZWN0aW9uLkNPTk5FQ1RJT05fRkFJTEVELCBmdW5jdGlvbiAoKSB7IF90aGlzLm9uSml0c2lDb25uZWN0aW9uRmFpbGVkKCk7IH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5KaXRzaU1lZXRKUy5ldmVudHMuY29ubmVjdGlvbi5DT05ORUNUSU9OX0RJU0NPTk5FQ1RFRCwgZnVuY3Rpb24gKCkgeyBfdGhpcy5kaXNjb25uZWN0RnJvbUppdHNpU2VydmVyKCk7IH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lDb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25KaXRzaUNvbm5lY3Rpb25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuTG9nKFwiQ29ubmVjdGVkIHRvIEppdHNpIFNlcnZlciAtIFwiICsgdGhpcy5KaXRzaVNlcnZlckRvbWFpbik7XHJcbiAgICAgICAgdGhpcy5qb2luSml0c2lDb25mZXJlbmNlKCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uSml0c2lDb25uZWN0aW9uRmFpbGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuTG9nKFwiRmFpbGVkIHRvIGNvbm5lY3QgSml0c2kgU2VydmVyIC0gXCIgKyB0aGlzLkppdHNpU2VydmVyRG9tYWluKTtcclxuICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuZGlzY29ubmVjdEZyb21KaXRzaVNlcnZlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLkxvZyhcIkRpc2Nvbm5lY3RlZCBmcm9tIEppdHNpIFNlcnZlciAtIFwiICsgdGhpcy5KaXRzaVNlcnZlckRvbWFpbik7XHJcbiAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmpvaW5KaXRzaUNvbmZlcmVuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29uZk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG9wZW5CcmlkZ2VDaGFubmVsOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbSA9IHRoaXMuaml0c2lDb25uZWN0aW9uLmluaXRKaXRzaUNvbmZlcmVuY2UoXCJcIiArIHRoaXMucm9vbUluZm8uSWQsIGNvbmZPcHRpb25zKTtcclxuICAgICAgICAvL3JlbW90ZSB0cmFja1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuVFJBQ0tfQURERUQsIGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICBfdGhpcy5vblJlbW90ZVRyYWNrQWRkZWQodHJhY2spO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuVFJBQ0tfUkVNT1ZFRCwgZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uUmVtb3ZlZFJlbW90ZVRyYWNrKHRyYWNrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL215IGpvaW5cclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5vbih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25mZXJlbmNlLkNPTkZFUkVOQ0VfSk9JTkVELCBmdW5jdGlvbiAoKSB7IF90aGlzLm9uSml0c2lDb25mZXJlbmNlSm9pbmVkKCk7IH0pO1xyXG4gICAgICAgIC8vbXkgbGVmdFxyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuQ09ORkVSRU5DRV9MRUZULCBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkppdHNpQ29uZmVyZW5jZUxlZnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pOyB9KTsgfSk7XHJcbiAgICAgICAgLy9yZW1vdGUgam9pblxyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuVVNFUl9KT0lORUQsIGZ1bmN0aW9uIChpZCwgdXNlcikge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkppdHNpVXNlckpvaW5lZChpZCwgdXNlcik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLXVzZXI6XCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgICAgICAgICAgLy9yZW1vdGVUcmFja3NbaWRdID0gW107XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9yZW1vdGUgbGVmdFxyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuVVNFUl9MRUZULCBmdW5jdGlvbiAoaWQsIHVzZXIpIHtcclxuICAgICAgICAgICAgX3RoaXMub25KaXRzaVVzZXJMZWZ0KGlkLCB1c2VyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL3RyYWNrIG11dGVcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5vbih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25mZXJlbmNlLlRSQUNLX01VVEVfQ0hBTkdFRCwgZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5pc0xvY2FsKCkpXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkxvY2FsVHJhY2tNdXRlQ2hhbmdlZCh0cmFjayk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uUmVtb3RlVHJhY2tNdXRlQ2hhbmdlZCh0cmFjayk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9hdWRpbyBsZXZlbCBjaGFuZ2VcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5vbih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25mZXJlbmNlLlRSQUNLX0FVRElPX0xFVkVMX0NIQU5HRUQsIGZ1bmN0aW9uICh1c2VySUQsIGF1ZGlvTGV2ZWwpIHtcclxuICAgICAgICAgICAgX3RoaXMuTG9nKHVzZXJJRCArIFwiIC0gXCIgKyBhdWRpb0xldmVsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL2NoYXRcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5vbih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25mZXJlbmNlLk1FU1NBR0VfUkVDRUlWRUQsIGZ1bmN0aW9uIChpZCwgbWVzc2FnZSwgdGltZXN0YW1wKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uUmVjZWl2ZUNoYXRNZXNzYWdlKGlkLCBtZXNzYWdlLCB0aW1lc3RhbXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXNzYWdlIG9iamVjdFxyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLm9uKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLmNvbmZlcmVuY2UuRU5EUE9JTlRfTUVTU0FHRV9SRUNFSVZFRCwgZnVuY3Rpb24gKHBlZXIsIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS50eXBlID09PSBcImJpel9wcml2YXRlXCIpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uUHJpdmF0ZUNvbW1hbmQobWVzc2FnZS5zZW5kZXJJZCwgbWVzc2FnZS5zdWJ0eXBlLCBtZXNzYWdlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9kb21pbmFudCBzcGVha2VyXHJcbiAgICAgICAgdGhpcy5qaXRzaVJvb20ub24odGhpcy5KaXRzaU1lZXRKUy5ldmVudHMuY29uZmVyZW5jZS5ET01JTkFOVF9TUEVBS0VSX0NIQU5HRUQsIGZ1bmN0aW9uIChpZCwgcHJldmlvdXNTcGVha2Vycykge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkRvbWluYW50U3BlYWtlckNoYW5nZWQoaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vbmFtZSBjaGFuZ2VcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5vbih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy5jb25mZXJlbmNlLkRJU1BMQVlfTkFNRV9DSEFOR0VELCBmdW5jdGlvbiAodXNlcklELCBkaXNwbGF5TmFtZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VySUQgKyBcIiAtIFwiICsgZGlzcGxheU5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vY29tbWFuZFxyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihqaXRzaV8xLkppdHNpQ29tbWFuZC5LSUNLX09VVCwgZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uS2lja2VkT3V0KHBhcmFtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoaml0c2lfMS5KaXRzaUNvbW1hbmQuTVVURV9BbGxfQVVESU8sIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICBfdGhpcy5vbk11dGVBbGxBdWRpbyhwYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5qaXRzaVJvb20uYWRkQ29tbWFuZExpc3RlbmVyKGppdHNpXzEuSml0c2lDb21tYW5kLk1VVEVfQWxsX1ZJREVPLCBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgX3RoaXMub25NdXRlQWxsVmlkZW8ocGFyYW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihqaXRzaV8xLkppdHNpQ29tbWFuZC5HUkFOVF9IT1NUX1JPTEUsIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkNoYW5nZWRNb2RlcmF0b3IocGFyYW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihqaXRzaV8xLkppdHNpQ29tbWFuZC5NVVRFX0FVRElPLCBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgX3RoaXMub25NdXRlZEF1ZGlvKHBhcmFtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoaml0c2lfMS5KaXRzaUNvbW1hbmQuTVVURV9WSURFTywgZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uTXV0ZWRWaWRlbyhwYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyp0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoSml0c2lDb21tYW5kLkFMTE9XX0NBTUVSQSwgKHBhcmFtOiBKaXRzaUNvbW1hbmRQYXJhbSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uQWxsb3dDYW1lcmFDb21tYW5kKHBhcmFtKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihKaXRzaUNvbW1hbmQuQUxMT1dfTUlDLCAocGFyYW06IEppdHNpQ29tbWFuZFBhcmFtKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25BbGxvd01pY0NvbW1hbmQocGFyYW0pXHJcbiAgICAgICAgfSk7Ki9cclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoaml0c2lfMS5KaXRzaUNvbW1hbmQuSU5JVF9NRURJQV9QT0xJQ1ksIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkluaXRNZWRpYVBvbGljeShwYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5qaXRzaVJvb20uYWRkQ29tbWFuZExpc3RlbmVyKGppdHNpXzEuSml0c2lDb21tYW5kLkJJWl9JRCwgZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uQml6SWQocGFyYW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihqaXRzaV8xLkppdHNpQ29tbWFuZC5BU0tfUkVDT1JESU5HLCBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgX3RoaXMub25Bc2tSZWNvcmRpbmcocGFyYW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLmFkZENvbW1hbmRMaXN0ZW5lcihqaXRzaV8xLkppdHNpQ29tbWFuZC5BU0tfU0NSRUVOU0hBUkUsIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkFza1NjcmVlblNoYXJlKHBhcmFtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoaml0c2lfMS5KaXRzaUNvbW1hbmQuQVNLX0hBTkRSQUlTRSwgZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uQXNrSGFuZFJhaXNlKHBhcmFtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRDb21tYW5kTGlzdGVuZXIoaml0c2lfMS5KaXRzaUNvbW1hbmQuRklMRV9NRVRBLCBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgX3RoaXMub25GaWxlTWV0YShwYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5qaXRzaVJvb20uYWRkQ29tbWFuZExpc3RlbmVyKGppdHNpXzEuSml0c2lDb21tYW5kLkZJTEVfU0xJQ0UsIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICBfdGhpcy5vbkZpbGVEYXRhKHBhcmFtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL3NldCBuYW1lXHJcbiAgICAgICAgdGhpcy5qaXRzaVJvb20uc2V0RGlzcGxheU5hbWUodGhpcy5teUluZm8uTmFtZSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxvY2FsVHJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuTG9nKFwiWyBPVVQgXSBteSB0cmFjayAtIFwiICsgdGhpcy5sb2NhbFRyYWNrc1tpXS5nZXRUeXBlKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmppdHNpUm9vbS5hZGRUcmFjayh0aGlzLmxvY2FsVHJhY2tzW2ldKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLkxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2pvaW5KaXRzaUNvbmZlcmVuY2VcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5qb2luKCk7IC8vY2FsbGJhY2sgLSAgb25KaXRzaVVzZXJKb2luZWRcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUubGVhdmVKaXRzaUNvbmZlcmVuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB9O1xyXG4gICAgLy9teSBlbnRlciByb29tXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25KaXRzaUNvbmZlcmVuY2VKb2luZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm15SW5mby5KaXRzaV9JZCA9IHRoaXMuaml0c2lSb29tLm15VXNlcklkKCk7XHJcbiAgICAgICAgdGhpcy5Mb2coXCJKaXRzaV9JZCA6IFwiICsgdGhpcy5teUluZm8uSml0c2lfSWQpO1xyXG4gICAgICAgIC8vc2V0IHN1YmplY3RcclxuICAgICAgICB0aGlzLnVpLm1lZXRpbmdEZXNjV2lkZ2V0LnNldFN1YmplY3QodGhpcy5yb29tSW5mby5jb25mZXJlbmNlTmFtZSwgdGhpcy5yb29tSW5mby5ob3N0TmFtZSk7XHJcbiAgICAgICAgdmFyIGF1ZGlvTXV0ZSA9IHRydWU7XHJcbiAgICAgICAgdmFyIHZpZGVvTXV0ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5nZXRMb2NhbFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5WSURFTyAmJiAhdHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgdmlkZW9NdXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTyAmJiAhdHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgYXVkaW9NdXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9hZGQgbGlzdFxyXG4gICAgICAgIC8vaWYgKHRoaXMubXlJbmZvLklzSG9zdCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVpLmFkZFBhcnRpY2lwYW50KHRoaXMuaml0c2lSb29tLm15VXNlcklkKCksIHRoaXMubXlJbmZvLk5hbWUsIHRydWUsIHZpZGVvTXV0ZSwgYXVkaW9NdXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9zZXQgdGltZVxyXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRlbHRhID0gRGF0ZS5ub3coKSAtIF90aGlzLmxvY2FsU3RhcnRUaW1lc3RhbXA7XHJcbiAgICAgICAgICAgIHZhciBlbGFwc2VkID0gX3RoaXMucm9vbUluZm8uZWxhcHNlZCArIGRlbHRhO1xyXG4gICAgICAgICAgICBfdGhpcy51aS5tZWV0aW5nRGVzY1dpZGdldC51cGRhdGVUaW1lKFRpbWVVdGlsXzEuVHNUb0RhdGVGb3JtYXQoZWxhcHNlZCkpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIC8vc2VuZCBtZWRpYSBwb2xpY3lcclxuICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuSU5JVF9NRURJQV9QT0xJQ1ksIHRoaXMubXlJbmZvLkppdHNpX0lkLCB0aGlzLm15SW5mby5tZWRpYVBvbGljeSk7XHJcbiAgICAgICAgLy9zZW5kIGJpemdhemUgaWRcclxuICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuQklaX0lELCB0aGlzLm15SW5mby5JZCk7XHJcbiAgICB9O1xyXG4gICAgLy9teSBsZWF2ZSByb29tXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25KaXRzaUNvbmZlcmVuY2VMZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubXlJbmZvLkppdHNpX0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxlYXZlQkdDb25mZXJlbmNlKCk7XHJcbiAgICB9O1xyXG4gICAgLy9yZW1vdGUtdXNlciBlbnRlciByb29tXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25KaXRzaVVzZXJKb2luZWQgPSBmdW5jdGlvbiAoaml0c2lJZCwgdXNlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5Mb2coXCJqb2luZWQgdXNlcjogXCIgKyB1c2VyLmdldERpc3BsYXlOYW1lKCkpO1xyXG4gICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uKHVzZXIuZ2V0RGlzcGxheU5hbWUoKSwgXCJOZXcgUGFydGljaXBhbnQgam9pbmVkXCIsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLlVzZXIpO1xyXG4gICAgICAgIC8vaWYgdHJhY2sgZG9lc24ndCBhcnJpdmUgZm9yIGNlcnRhaW4gdGltZVxyXG4gICAgICAgIC8vZ2VuZXJhdGUgbmV3IHBhbmVsIGZvciB0aGF0IHVzZXJcclxuICAgICAgICBpZiAoIXRoaXMucm9vbUluZm8uSXNXZWJpbmFyKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1c2VyLmdldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb1BhbmVsID0gX3RoaXMudWkudmlkZW9QYW5lbEdyaWQuZ2V0TmV3VmlkZW9QYW5lbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuc2V0UHJvcGVydHkoVXNlclByb3BlcnR5XzEuVXNlclByb3BlcnR5LnZpZGVvUGFuZWwsIHZpZGVvUGFuZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVVc2VyUGFuZWwodXNlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYXVkaW9NdXRlID0gdHJ1ZTtcclxuICAgICAgICB2YXIgdmlkZW9NdXRlID0gdHJ1ZTtcclxuICAgICAgICB1c2VyLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5WSURFTyAmJiAhdHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgdmlkZW9NdXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTyAmJiAhdHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgdmlkZW9NdXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9hZGQgbGlzdFxyXG4gICAgICAgIC8vaWYgKHRoaXMubXlJbmZvLklzSG9zdCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVpLmFkZFBhcnRpY2lwYW50KGppdHNpSWQsIHVzZXIuZ2V0RGlzcGxheU5hbWUoKSwgZmFsc2UsIC8vbWU/XHJcbiAgICAgICAgICAgIHZpZGVvTXV0ZSwgLy91c2UgY2FtZXJhP1xyXG4gICAgICAgICAgICBhdWRpb011dGUgLy91c2UgbWljP1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL25vdGlmeSBoaW0gdGhhdCBpIGFtIG1vZGVyYXRvclxyXG4gICAgICAgIGlmICh0aGlzLm15SW5mby5Jc0hvc3QpXHJcbiAgICAgICAgICAgIHRoaXMuZ3JhbnRNb2RlcmF0b3JSb2xlKHRoaXMuaml0c2lSb29tLm15VXNlcklkKCkpO1xyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpUHJpdmF0ZUNvbW1hbmQoaml0c2lJZCwgaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLk1FRElBX1BPTElDWSwgdGhpcy5teUluZm8ubWVkaWFQb2xpY3kpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZFF1ZXVlLmV4ZWN1dGVRdWV1ZWRDb21tYW5kcyhqaXRzaUlkKTtcclxuICAgICAgICB0aGlzLnByaXZhdGVDb21tYW5kUXVldWUuZXhlY3V0ZVF1ZXVlZENvbW1hbmRzKGppdHNpSWQpO1xyXG4gICAgfTtcclxuICAgIC8vcmVtb3RlIGxlYXZlIHJvb21cclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkppdHNpVXNlckxlZnQgPSBmdW5jdGlvbiAoaml0c2lJZCwgdXNlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb25fd2FybmluZyh1c2VyLmdldERpc3BsYXlOYW1lKCksIFwiUGFydGljaXBhbnQgbGVmdFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5Vc2VyKTtcclxuICAgICAgICB0aGlzLkxvZyhcImxlZnQgdXNlcjogXCIgKyB1c2VyLmdldERpc3BsYXlOYW1lKCkpO1xyXG4gICAgICAgIHZhciB2aWRlb1BhbmVsID0gdXNlci5nZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkudmlkZW9QYW5lbCk7XHJcbiAgICAgICAgaWYgKHZpZGVvUGFuZWwpIHtcclxuICAgICAgICAgICAgdGhpcy51aS52aWRlb1BhbmVsR3JpZC5mcmVlVmlkZW9QYW5lbCh2aWRlb1BhbmVsLklkKTtcclxuICAgICAgICAgICAgdXNlci5zZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkudmlkZW9QYW5lbCwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcmVtb3ZlIGxpc3RcclxuICAgICAgICB0aGlzLnVpLnJlbW92ZVBhcnRpY2lwYW50KGppdHNpSWQpO1xyXG4gICAgICAgIC8vcmVtb3ZlIGZyb20gbGlzdFxyXG4gICAgICAgIHRoaXMubV9CR1VzZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKGJ6VXNlciwgYml6SWQpIHtcclxuICAgICAgICAgICAgaWYgKGJ6VXNlci5KaXRzaV9JZCA9PSBqaXRzaUlkKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5tX0JHVXNlckxpc3QuZGVsZXRlKGJpeklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkJpeklkID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIHNlbmRlckppdHNpSWQgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlcklkO1xyXG4gICAgICAgIGlmIChzZW5kZXJKaXRzaUlkID09PSB0aGlzLm15SW5mby5KaXRzaV9JZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB1c2VyID0gdGhpcy5qaXRzaVJvb20uZ2V0UGFydGljaXBhbnRCeUlkKHNlbmRlckppdHNpSWQpO1xyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBiaXpJZCA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgYml6VXNlciA9IHRoaXMubV9CR1VzZXJMaXN0LmdldChiaXpJZCk7XHJcbiAgICAgICAgICAgIGlmIChiaXpVc2VyKVxyXG4gICAgICAgICAgICAgICAgYml6VXNlci5KaXRzaV9JZCA9IHNlbmRlckppdHNpSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRRdWV1ZS5xdWV1ZUNvbW1hbmQoc2VuZGVySml0c2lJZCwgaml0c2lfMS5KaXRzaUNvbW1hbmQuQklaX0lELCBwYXJhbSwgdGhpcy5vbkJpeklkLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL1sgSU4gXSByZW1vdGUgdHJhY2tcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vblJlbW90ZVRyYWNrQWRkZWQgPSBmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICBpZiAodHJhY2suaXNMb2NhbCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5Mb2coXCJbIElOIF0gcmVtb3RlIHRyYWNrIC0gXCIgKyB0cmFjay5nZXRUeXBlKCkpO1xyXG4gICAgICAgIGlmICh0aGlzLnJvb21JbmZvLklzV2ViaW5hciAmJiB0cmFjay5pc011dGVkKCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvL2FkZCB0byB1aVxyXG4gICAgICAgIHZhciBpZCA9IHRyYWNrLmdldFBhcnRpY2lwYW50SWQoKTtcclxuICAgICAgICB2YXIgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChpZCk7XHJcbiAgICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuTG9nKHVzZXIuZ2V0RGlzcGxheU5hbWUoKSArIFwiIG5vdCB5ZXQgYWRkZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZpZGVvUGFuZWwgPSB1c2VyLmdldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsKTtcclxuICAgICAgICBpZiAoIXZpZGVvUGFuZWwpIHtcclxuICAgICAgICAgICAgdmlkZW9QYW5lbCA9IHRoaXMudWkudmlkZW9QYW5lbEdyaWQuZ2V0TmV3VmlkZW9QYW5lbCgpO1xyXG4gICAgICAgICAgICB1c2VyLnNldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsLCB2aWRlb1BhbmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWRlb0VsZW0gPSB2aWRlb1BhbmVsLnZpZGVvRWxlbTtcclxuICAgICAgICAgICAgdHJhY2suYXR0YWNoKHZpZGVvRWxlbSk7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbS5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLkFVRElPKSB7XHJcbiAgICAgICAgICAgIHZhciBhdWRpb0VsZW0gPSB2aWRlb1BhbmVsLmF1ZGlvRWxlbTtcclxuICAgICAgICAgICAgdHJhY2suYXR0YWNoKGF1ZGlvRWxlbSk7XHJcbiAgICAgICAgICAgIGF1ZGlvRWxlbS5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVVzZXJQYW5lbCh1c2VyKTtcclxuICAgIH07XHJcbiAgICAvLyBbREVMXSByZW1vdGUgdHJhY2tcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vblJlbW92ZWRSZW1vdGVUcmFjayA9IGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgIGlmICh0cmFjay5pc0xvY2FsKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5Mb2coXCJbIERFTCBdIGxvY2FsdHJhY2sgLSBcIiArIHRyYWNrLmdldFR5cGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLkxvZyhcIlsgREVMIF0gcmVtb3RldHJhY2sgLSBcIiArIHRyYWNrLmdldFR5cGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYWNrLnJlbW92ZUFsbExpc3RlbmVycyh0aGlzLkppdHNpTWVldEpTLmV2ZW50cy50cmFjay5UUkFDS19BVURJT19MRVZFTF9DSEFOR0VEKTtcclxuICAgICAgICB0cmFjay5yZW1vdmVBbGxMaXN0ZW5lcnModGhpcy5KaXRzaU1lZXRKUy5ldmVudHMudHJhY2suVFJBQ0tfTVVURV9DSEFOR0VEKTtcclxuICAgICAgICB0cmFjay5yZW1vdmVBbGxMaXN0ZW5lcnModGhpcy5KaXRzaU1lZXRKUy5ldmVudHMudHJhY2suTE9DQUxfVFJBQ0tfU1RPUFBFRCk7XHJcbiAgICAgICAgdHJhY2sucmVtb3ZlQWxsTGlzdGVuZXJzKHRoaXMuSml0c2lNZWV0SlMuZXZlbnRzLnRyYWNrLlRSQUNLX1ZJREVPVFlQRV9DSEFOR0VEKTtcclxuICAgICAgICB0cmFjay5yZW1vdmVBbGxMaXN0ZW5lcnModGhpcy5KaXRzaU1lZXRKUy5ldmVudHMudHJhY2suVFJBQ0tfQVVESU9fT1VUUFVUX0NIQU5HRUQpO1xyXG4gICAgICAgIHRyYWNrLnJlbW92ZUFsbExpc3RlbmVycyh0aGlzLkppdHNpTWVldEpTLmV2ZW50cy50cmFjay5OT19EQVRBX0ZST01fU09VUkNFKTtcclxuICAgICAgICBpZiAoIXRyYWNrLmlzTG9jYWwoKSkge1xyXG4gICAgICAgICAgICB2YXIgaml0c2lJZCA9IHRyYWNrLmdldFBhcnRpY2lwYW50SWQoKTtcclxuICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudEJ5SWQoaml0c2lJZCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb21JbmZvLklzV2ViaW5hcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIElzSG9zdCA9IHVzZXIuZ2V0UHJvcGVydHkoVXNlclByb3BlcnR5XzEuVXNlclByb3BlcnR5LklzSG9zdCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlclZpZGVvUGFuZWwgPSB1c2VyLmdldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsKTtcclxuICAgICAgICAgICAgICAgIGlmICghSXNIb3N0ICYmIHVzZXIuZ2V0VHJhY2tzKCkubGVuZ3RoIDw9IDAgJiYgdXNlclZpZGVvUGFuZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnZpZGVvUGFuZWxHcmlkLmZyZWVWaWRlb1BhbmVsKHVzZXJWaWRlb1BhbmVsLklkKTtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyLnNldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVVc2VyUGFuZWwodXNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVpT25Mb2NhbFRyYWNrQ2hhbmdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5fdXBkYXRlVXNlclBhbmVsID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICBpZiAodXNlciAmJiB1c2VyLmdldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsKSkge1xyXG4gICAgICAgICAgICB2YXIgdmlkZW9QYW5lbCA9IHVzZXIuZ2V0UHJvcGVydHkoVXNlclByb3BlcnR5XzEuVXNlclByb3BlcnR5LnZpZGVvUGFuZWwpO1xyXG4gICAgICAgICAgICB2aWRlb1BhbmVsLnVwZGF0ZVBhbmVsT25KaXRzaVVzZXIodGhpcy5teUluZm8sIHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuX3VwZGF0ZU15UGFuZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxWaWRlb1BhbmVsID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucm9vbUluZm8uSXNXZWJpbmFyICYmICF0aGlzLm15SW5mby5Jc0hvc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpc0FsbE11dGVkXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRMb2NhbFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFjay5pc011dGVkKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWxsTXV0ZWRfMSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWxsTXV0ZWRfMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2FsVmlkZW9QYW5lbCA9IHRoaXMudWkudmlkZW9QYW5lbEdyaWQuZ2V0TmV3VmlkZW9QYW5lbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbFZpZGVvUGFuZWwgPSB0aGlzLnVpLnZpZGVvUGFuZWxHcmlkLmdldE5ld1ZpZGVvUGFuZWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5sb2NhbFZpZGVvUGFuZWwpXHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxWaWRlb1BhbmVsLnVwZGF0ZVBhbmVsT25NeUJHVXNlcih0aGlzLm15SW5mbywgdGhpcy5nZXRMb2NhbFRyYWNrcygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiAgICAgICAgICAgICAgICBNZXNzYWdpbmcgYmV0d2VlbiBKaXRzaSBwYXJ0aWNpcGFudHNcclxuICAgICAqICAgICAgICBCcm9hZGNhc3RcclxuICAgICAqICAgICAgICBQcml2YXRlXHJcbiAgICAgKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAgLy9BVFRFTlRJT04hIGF0dHJpYnV0ZXMgPSB7a2V5MTogbm90IG9iamVjdCwga2V5Mjogbm90IG9iamVjdCwgLi4ufVxyXG4gICAgLy9zZW5kIGFzIHByaW1pdGl2ZSB0eXBlIGxpa2UgYm9vbGVhbiwgc3RyaW5nLCBudW1iZXIuLi5cclxuICAgIC8vYW5kIGRlY29kZSB3aGVuIHVzZSB2YWx1ZTEsIHZhdWxlMlxyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQgPSBmdW5jdGlvbiAodHlwZSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7IGF0dHJpYnV0ZXMgPSBudWxsOyB9XHJcbiAgICAgICAgdmFyIHBhcmFtID0gbmV3IEppdHNpQ29tbWFuZFBhcmFtXzEuSml0c2lDb21tYW5kUGFyYW0oKTtcclxuICAgICAgICBwYXJhbS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIGlmICghIWF0dHJpYnV0ZXMgJiYgdHlwZW9mIGF0dHJpYnV0ZXMgPT09IFwib2JqZWN0XCIgJiYgYXR0cmlidXRlcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiKVxyXG4gICAgICAgICAgICBwYXJhbS5hdHRyaWJ1dGVzID0gX19hc3NpZ24oe30sIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgIHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVySWQgPSB0aGlzLm15SW5mby5KaXRzaV9JZDtcclxuICAgICAgICBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWUgPSB0aGlzLm15SW5mby5OYW1lO1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLnNlbmRDb21tYW5kT25jZSh0eXBlLCBwYXJhbSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnNlbmRKaXRzaVByaXZhdGVDb21tYW5kID0gZnVuY3Rpb24gKHRhcmdldElkLCB0eXBlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYml6X3ByaXZhdGVcIixcclxuICAgICAgICAgICAgc3VidHlwZTogdHlwZSxcclxuICAgICAgICAgICAgc2VuZGVySWQ6IHRoaXMubXlJbmZvLkppdHNpX0lkLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5zZW5kTWVzc2FnZShwYXlsb2FkLCB0YXJnZXRJZCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uUHJpdmF0ZUNvbW1hbmQgPSBmdW5jdGlvbiAoc2VuZGVySWQsIHR5cGUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChzZW5kZXJJZCk7XHJcbiAgICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJpdmF0ZUNvbW1hbmRRdWV1ZS5xdWV1ZUNvbW1hbmQoc2VuZGVySWQsIHR5cGUsIG1lc3NhZ2UsIHRoaXMub25Qcml2YXRlQ29tbWFuZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLk1FRElBX1BPTElDWSkge1xyXG4gICAgICAgICAgICB2YXIgcG9saWN5ID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgdGhpcy5vblVzZXJNZWRpYVBvbGljeShzZW5kZXJJZCwgcG9saWN5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLkFMTE9XX1JFQ09SRElORykge1xyXG4gICAgICAgICAgICB2YXIgYWxsb3cgPSBtZXNzYWdlLmFsbG93O1xyXG4gICAgICAgICAgICB0aGlzLm9uQWxsb3dSZWNvcmRpbmcoc2VuZGVySWQsIGFsbG93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLkFMTE9XX1NDUkVFTlNIQVJFKSB7XHJcbiAgICAgICAgICAgIHZhciBhbGxvdyA9IG1lc3NhZ2UuYWxsb3c7XHJcbiAgICAgICAgICAgIHRoaXMub25BbGxvd1NjcmVlbnNoYXJlKHNlbmRlcklkLCBhbGxvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IGppdHNpXzEuSml0c2lQcml2YXRlQ29tbWFuZC5BTExPV19IQU5EUkFJU0UpIHtcclxuICAgICAgICAgICAgdmFyIGFsbG93ID0gbWVzc2FnZS5hbGxvdztcclxuICAgICAgICAgICAgdGhpcy5vbkFsbG93SGFuZFJhaXNlKHNlbmRlcklkLCBhbGxvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IGppdHNpXzEuSml0c2lQcml2YXRlQ29tbWFuZC5QUklWQVRFX0NBSFQpIHtcclxuICAgICAgICAgICAgdGhpcy5vblJlY2VpdmVQcml2YXRlQ2hhdE1lc3NhZ2Uoc2VuZGVySWQsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiAgICAgICAgICAgICAgICBNZWV0aW5nIExvZ2ljXHJcbiAgICAgKiAgICAgICAgTW9kZXJhdG9yXHJcbiAgICAgKiAgICAgICAgTXV0ZS9Vbm11dGUgQXVkaW8vVmlkZW9cclxuICAgICAqICAgICAgICBTY3JlZW5TaGFyZVxyXG4gICAgICogICAgICAgIFJlY29yZGluZ1xyXG4gICAgICogICAgICAgIENoYXR0aW5nXHJcbiAgICAgKiAgICAgICAgRmlsZSBTaGFyaW5nXHJcbiAgICAgKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnNlbmRSZW1vdGVDb250cm9sUmVwbHkgPSBmdW5jdGlvbiAodHlwZSwgZSwgdGFyZ2V0SWQpIHtcclxuICAgICAgICAvL3RoaXMuTG9nKFwiU2VuZGluZyByZW1vdGVDb250cm9sXCIpO1xyXG4gICAgICAgIHZhciBwYXJhbSA9IHtcclxuICAgICAgICAgICAgbmFtZTogJ3JlbW90ZS1jb250cm9sJyxcclxuICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgIGFjdGlvbjogJycsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogMCxcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgbW9kaWZpZXJzOiB7fSxcclxuICAgICAgICAgICAga2V5OiAnJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Blcm1pc3Npb25zJzpcclxuICAgICAgICAgICAgICAgIHBhcmFtLnR5cGUgPSAncGVybWlzc2lvbnMnO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uYWN0aW9uID0gJ3JlcXVlc3QnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlbW92ZSc6XHJcbiAgICAgICAgICAgICAgICBwYXJhbS50eXBlID0gJ21vdXNlbW92ZSc7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS54ID0gZS54O1xyXG4gICAgICAgICAgICAgICAgcGFyYW0ueSA9IGUueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdtb3VzZWRvd24nOlxyXG4gICAgICAgICAgICAgICAgcGFyYW0udHlwZSA9ICdtb3VzZWRvd24nO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uYnV0dG9uID0gZS5idXR0b247XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbW91c2V1cCc6XHJcbiAgICAgICAgICAgICAgICBwYXJhbS50eXBlID0gJ21vdXNldXAnO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uYnV0dG9uID0gZS5idXR0b247XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAna2V5ZG93bic6XHJcbiAgICAgICAgICAgICAgICBwYXJhbS50eXBlID0gJ2tleWRvd24nO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0ubW9kaWZpZXJzID0gZS5tb2RpZmllcnM7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5rZXkgPSBrZXlib2FyZEV2ZW50VG9LZXkoZS5rZXkpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLXBhcmFtJywgcGFyYW0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2tleXVwJzpcclxuICAgICAgICAgICAgICAgIHBhcmFtLnR5cGUgPSAna2V5dXAnO1xyXG4gICAgICAgICAgICAgICAgcGFyYW0ubW9kaWZpZXJzID0gZS5tb2RpZmllcnM7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS5rZXkgPSBrZXlib2FyZEV2ZW50VG9LZXkoZS5rZXkpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLXBhcmFtJywgcGFyYW0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qbGV0IHBhcmFtID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAncmVtb3RlLWNvbnRyb2wnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbW91c2Vkb3duJyxcclxuICAgICAgICAgICAgYnV0dG9uOiAxXHJcbiAgICAgICAgfTsqL1xyXG4gICAgICAgIHRoaXMuaml0c2lSb29tLnNlbmRFbmRwb2ludE1lc3NhZ2UodGFyZ2V0SWQsIHBhcmFtKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUua2lja1BhcnRpY2lwYW50T3V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XHJcbiAgICAgICAgdGhpcy5Mb2coXCJTZW5kaW5nIGtpY2sgb3V0XCIpO1xyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChqaXRzaV8xLkppdHNpQ29tbWFuZC5LSUNLX09VVCwgdGFyZ2V0SWQpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbktpY2tlZE91dCA9IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgIHRoaXMuTG9nKFwicmVjZWl2ZWQga2ljayBvdXRcIik7XHJcbiAgICAgICAgdmFyIHRhcmdldElkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgaWYgKHRhcmdldElkID09PSB0aGlzLm15SW5mby5KaXRzaV9JZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlU3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL21vZGVyYXRvclxyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmdyYW50TW9kZXJhdG9yUm9sZSA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xyXG4gICAgICAgIHRoaXMuTG9nKFwiU2VuZGluZyBncmFudCBob3N0XCIpO1xyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChqaXRzaV8xLkppdHNpQ29tbWFuZC5HUkFOVF9IT1NUX1JPTEUsIHRhcmdldElkKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25DaGFuZ2VkTW9kZXJhdG9yID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLkxvZyhcInJlY2VpdmVkIGdyYW50IGhvc3RcIik7XHJcbiAgICAgICAgdmFyIHRhcmdldElkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgdmFyIHNlbmRlck5hbWUgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWU7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICBpZiAodGFyZ2V0SWQgPT09IHRoaXMubXlJbmZvLkppdHNpX0lkKSB7XHJcbiAgICAgICAgICAgIGlmIChzZW5kZXJJZCAhPT0gdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uX3dhcm5pbmcoc2VuZGVyTmFtZSwgXCJZb3UncmUgZ3JhbnRlZCBjby1ob3N0IHBlcm1pc3Npb25cIiwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuR3JhbnRIb3N0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubXlJbmZvLklzSG9zdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNeVBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudHMoKS5mb3JFYWNoKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVVzZXJQYW5lbCh1c2VyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51aS51cGRhdGVCeVJvbGUodGhpcy5teUluZm8uSXNIb3N0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudEJ5SWQodGFyZ2V0SWQpO1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgdXNlci5zZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkuSXNIb3N0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVVzZXJQYW5lbCh1c2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZFF1ZXVlLnF1ZXVlQ29tbWFuZCh0YXJnZXRJZCwgaml0c2lfMS5KaXRzaUNvbW1hbmQuR1JBTlRfSE9TVF9ST0xFLCBwYXJhbSwgdGhpcy5vbkNoYW5nZWRNb2RlcmF0b3IuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uSW5pdE1lZGlhUG9saWN5ID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIHNvdXJjZUlkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgaWYgKHNvdXJjZUlkID09PSB0aGlzLm15SW5mby5KaXRzaV9JZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuTG9nKFwicmVjZWl2ZWQgaW5pdE1lZGlhUG9saWN5IGZyb20gXCIgKyBzb3VyY2VJZCk7XHJcbiAgICAgICAgdmFyIHVzZXIgPSB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudEJ5SWQoc291cmNlSWQpO1xyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VDYW1lcmEgPSBwYXJhbS5hdHRyaWJ1dGVzLnVzZUNhbWVyYSA9PT0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgIHZhciB1c2VNaWMgPSBwYXJhbS5hdHRyaWJ1dGVzLnVzZU1pYyA9PT0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgIHRoaXMudWkucGFydGljaXBhbnRzTGlzdFdpZGdldC5zZXRNdXRlQ2FtZXJhKHNvdXJjZUlkLCAhdXNlQ2FtZXJhKTtcclxuICAgICAgICAgICAgdGhpcy51aS5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnNldE11dGVNaWMoc291cmNlSWQsICF1c2VNaWMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5Mb2coXCJkZWxheWluZyBpbml0TWVkaWFQb2xpY3kgY2FsbGJhY2tcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZFF1ZXVlLnF1ZXVlQ29tbWFuZChzb3VyY2VJZCwgaml0c2lfMS5KaXRzaUNvbW1hbmQuSU5JVF9NRURJQV9QT0xJQ1ksIHBhcmFtLCB0aGlzLm9uSW5pdE1lZGlhUG9saWN5LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25Vc2VyTWVkaWFQb2xpY3kgPSBmdW5jdGlvbiAoc2VuZGVySWQsIHBvbGljeSkge1xyXG4gICAgICAgIHRoaXMudWkucGFydGljaXBhbnRzTGlzdFdpZGdldC5zZXRNdXRlQ2FtZXJhKHNlbmRlcklkLCAhcG9saWN5LnVzZUNhbWVyYSk7XHJcbiAgICAgICAgdGhpcy51aS5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnNldE11dGVNaWMoc2VuZGVySWQsICFwb2xpY3kudXNlTWljKTtcclxuICAgIH07XHJcbiAgICAvL211dGUgbXlzZWxmXHJcbiAgICAvL2NhbGxlZCB3aGVuIHVzZXIgY2xpY2sgdG9vbGJhciBidXR0b25zXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuT25Ub2dnbGVNdXRlTXlBdWRpbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5yb29tSW5mby5Jc0NvbnRyb2xBbGxvd2VkICYmICF0aGlzLm15SW5mby5Jc0hvc3QpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgYXVkaW9NdXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ2V0TG9jYWxUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xyXG4gICAgICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU8gJiYgdHJhY2suaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgYXVkaW9NdXRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5tdXRlTXlBdWRpbyghYXVkaW9NdXRlZCk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLk9uVG9nZ2xlTXV0ZU15VmlkZW8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucm9vbUluZm8uSXNDb250cm9sQWxsb3dlZCAmJiAhdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIHZpZGVvTXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmdldExvY2FsVHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPICYmIHRyYWNrLmlzTXV0ZWQoKSlcclxuICAgICAgICAgICAgICAgIHZpZGVvTXV0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubXV0ZU15VmlkZW8oIXZpZGVvTXV0ZWQpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5tdXRlTXlBdWRpbyA9IGZ1bmN0aW9uIChtdXRlKSB7XHJcbiAgICAgICAgdGhpcy5nZXRMb2NhbFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG11dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhY2subXV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLnVubXV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm11dGVNeVZpZGVvID0gZnVuY3Rpb24gKG11dGUpIHtcclxuICAgICAgICB0aGlzLmdldExvY2FsVHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobXV0ZSlcclxuICAgICAgICAgICAgICAgICAgICB0cmFjay5tdXRlKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhY2sudW5tdXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL211dGUgb3RoZXJzXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUubXV0ZVVzZXJBdWRpbyA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgbXV0ZSkge1xyXG4gICAgICAgIGlmICh0YXJnZXRJZCA9PT0gdGhpcy5teUluZm8uSml0c2lfSWQpXHJcbiAgICAgICAgICAgIHRoaXMubXV0ZU15QXVkaW8obXV0ZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuTVVURV9BVURJTywgdGFyZ2V0SWQsIHsgbXV0ZTogbXV0ZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUubXV0ZVVzZXJWaWRlbyA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgbXV0ZSkge1xyXG4gICAgICAgIGlmICh0YXJnZXRJZCA9PT0gdGhpcy5teUluZm8uSml0c2lfSWQpXHJcbiAgICAgICAgICAgIHRoaXMubXV0ZU15VmlkZW8obXV0ZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuTVVURV9WSURFTywgdGFyZ2V0SWQsIHsgbXV0ZTogbXV0ZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25NdXRlZEF1ZGlvID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldElkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICB2YXIgc2VuZGVyTmFtZSA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZTtcclxuICAgICAgICB2YXIgbXV0ZSA9IHBhcmFtLmF0dHJpYnV0ZXMubXV0ZSA9PT0gXCJ0cnVlXCI7XHJcbiAgICAgICAgaWYgKHRhcmdldElkID09IHRoaXMubXlJbmZvLkppdHNpX0lkKSB7XHJcbiAgICAgICAgICAgIGlmIChzZW5kZXJJZCAhPT0gdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5hc2tEaWFsb2coc2VuZGVyTmFtZSwgXCJSZXF1ZXN0ZWQgdG8gbXV0ZSB5b3VyIG1pY3JvcGhvbmVcIiwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuQXVkaW9NdXRlLCB0aGlzLm11dGVNeUF1ZGlvLmJpbmQodGhpcyksIG51bGwsIG11dGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5hc2tEaWFsb2coc2VuZGVyTmFtZSwgXCJSZXF1ZXN0ZWQgdG8gdW5tdXRlIHlvdXIgbWljcm9waG9uZVwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5BdWRpbywgdGhpcy5tdXRlTXlBdWRpby5iaW5kKHRoaXMpLCBudWxsLCBtdXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXV0ZU15QXVkaW8obXV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uTXV0ZWRWaWRlbyA9IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIHZhciBzZW5kZXJJZCA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVySWQ7XHJcbiAgICAgICAgdmFyIHNlbmRlck5hbWUgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWU7XHJcbiAgICAgICAgdmFyIG11dGUgPSBwYXJhbS5hdHRyaWJ1dGVzLm11dGUgPT09IFwidHJ1ZVwiO1xyXG4gICAgICAgIGlmICh0YXJnZXRJZCA9PSB0aGlzLm15SW5mby5KaXRzaV9JZCkge1xyXG4gICAgICAgICAgICBpZiAoc2VuZGVySWQgIT09IHRhcmdldElkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobXV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkuYXNrRGlhbG9nKHNlbmRlck5hbWUsIFwiUmVxdWVzdGVkIHRvIG11dGUgeW91ciBjYW1lcmFcIiwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuVmlkZW9NdXRlLCB0aGlzLm11dGVNeVZpZGVvLmJpbmQodGhpcyksIG51bGwsIG11dGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5hc2tEaWFsb2coc2VuZGVyTmFtZSwgXCJSZXF1ZXN0ZWQgdG8gdW5tdXRlIHlvdXIgY2FtZXJhXCIsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLlZpZGVvLCB0aGlzLm11dGVNeVZpZGVvLmJpbmQodGhpcyksIG51bGwsIG11dGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXRlTXlWaWRlbyhtdXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25Mb2NhbFRyYWNrTXV0ZUNoYW5nZWQgPSBmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICB2YXIgaWQgPSB0cmFjay5nZXRQYXJ0aWNpcGFudElkKCk7XHJcbiAgICAgICAgaWYgKHRoaXMucm9vbUluZm8uSXNXZWJpbmFyICYmICF0aGlzLm15SW5mby5Jc0hvc3QpIHtcclxuICAgICAgICAgICAgdmFyIGlzQWxsTXV0ZWRfMiA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0TG9jYWxUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQuaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIGlzQWxsTXV0ZWRfMiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGlzQWxsTXV0ZWRfMikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxWaWRlb1BhbmVsKSB7IC8vcmVtb3RlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS52aWRlb1BhbmVsR3JpZC5mcmVlVmlkZW9QYW5lbCh0aGlzLmxvY2FsVmlkZW9QYW5lbC5JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbFZpZGVvUGFuZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxvY2FsVmlkZW9QYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxWaWRlb1BhbmVsID0gdGhpcy51aS52aWRlb1BhbmVsR3JpZC5nZXROZXdWaWRlb1BhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9FbGVtID0gdGhpcy5sb2NhbFZpZGVvUGFuZWwudmlkZW9FbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLmF0dGFjaCh2aWRlb0VsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvRWxlbS5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb0VsZW0gPSB0aGlzLmxvY2FsVmlkZW9QYW5lbC5hdWRpb0VsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhY2suYXR0YWNoKGF1ZGlvRWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9FbGVtLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZVVpT25Mb2NhbFRyYWNrQ2hhbmdlKCk7XHJcbiAgICAgICAgLy91cGRhdGUgbGlzdFxyXG4gICAgICAgIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5WSURFTylcclxuICAgICAgICAgICAgdGhpcy51aS5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnNldE11dGVDYW1lcmEoaWQsIHRyYWNrLmlzTXV0ZWQoKSk7XHJcbiAgICAgICAgZWxzZSBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuQVVESU8pXHJcbiAgICAgICAgICAgIHRoaXMudWkucGFydGljaXBhbnRzTGlzdFdpZGdldC5zZXRNdXRlTWljKGlkLCB0cmFjay5pc011dGVkKCkpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vblJlbW90ZVRyYWNrTXV0ZUNoYW5nZWQgPSBmdW5jdGlvbiAodHJhY2spIHtcclxuICAgICAgICB2YXIgaWQgPSB0cmFjay5nZXRQYXJ0aWNpcGFudElkKCk7XHJcbiAgICAgICAgdmFyIHVzZXIgPSB0aGlzLmppdHNpUm9vbS5nZXRQYXJ0aWNpcGFudEJ5SWQoaWQpO1xyXG4gICAgICAgIGlmICghdXNlcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnJvb21JbmZvLklzV2ViaW5hcikge1xyXG4gICAgICAgICAgICB2YXIgaXNBbGxNdXRlZF8zID0gdHJ1ZTtcclxuICAgICAgICAgICAgdXNlci5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQuaXNNdXRlZCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIGlzQWxsTXV0ZWRfMyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvUGFuZWwgPSB1c2VyLmdldFByb3BlcnR5KFVzZXJQcm9wZXJ0eV8xLlVzZXJQcm9wZXJ0eS52aWRlb1BhbmVsKTtcclxuICAgICAgICAgICAgaWYgKGlzQWxsTXV0ZWRfMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvUGFuZWwpIHsgLy9yZW1vdGUgaXRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnZpZGVvUGFuZWxHcmlkLmZyZWVWaWRlb1BhbmVsKHZpZGVvUGFuZWwuSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuc2V0UHJvcGVydHkoVXNlclByb3BlcnR5XzEuVXNlclByb3BlcnR5LnZpZGVvUGFuZWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2aWRlb1BhbmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9QYW5lbCA9IHRoaXMudWkudmlkZW9QYW5lbEdyaWQuZ2V0TmV3VmlkZW9QYW5lbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuc2V0UHJvcGVydHkoVXNlclByb3BlcnR5XzEuVXNlclByb3BlcnR5LnZpZGVvUGFuZWwsIHZpZGVvUGFuZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLlZJREVPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvRWxlbSA9IHZpZGVvUGFuZWwudmlkZW9FbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLmF0dGFjaCh2aWRlb0VsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvRWxlbS5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0cmFjay5nZXRUeXBlKCkgPT09IE1lZGlhVHlwZV8xLk1lZGlhVHlwZS5BVURJTykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb0VsZW0gPSB2aWRlb1BhbmVsLmF1ZGlvRWxlbTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFjay5hdHRhY2goYXVkaW9FbGVtKTtcclxuICAgICAgICAgICAgICAgICAgICBhdWRpb0VsZW0ucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdXBkYXRlIHBhbmVsXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlVXNlclBhbmVsKHVzZXIpO1xyXG4gICAgICAgIC8vdXBkYXRlIGxpc3RcclxuICAgICAgICBpZiAodHJhY2suZ2V0VHlwZSgpID09PSBNZWRpYVR5cGVfMS5NZWRpYVR5cGUuVklERU8pXHJcbiAgICAgICAgICAgIHRoaXMudWkucGFydGljaXBhbnRzTGlzdFdpZGdldC5zZXRNdXRlQ2FtZXJhKGlkLCB0cmFjay5pc011dGVkKCkpO1xyXG4gICAgICAgIGVsc2UgaWYgKHRyYWNrLmdldFR5cGUoKSA9PT0gTWVkaWFUeXBlXzEuTWVkaWFUeXBlLkFVRElPKVxyXG4gICAgICAgICAgICB0aGlzLnVpLnBhcnRpY2lwYW50c0xpc3RXaWRnZXQuc2V0TXV0ZU1pYyhpZCwgdHJhY2suaXNNdXRlZCgpKTtcclxuICAgIH07XHJcbiAgICAvL2FsbG93IG9mIGNhbWVyYSwgbWljIFxyXG4gICAgLypwdWJsaWMgYWxsb3dDYW1lcmEoaml0c2lJZDogc3RyaW5nLCBhbGxvdzogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChKaXRzaUNvbW1hbmQuQUxMT1dfQ0FNRVJBLCBqaXRzaUlkLCB7IGFsbG93OiBhbGxvdyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWxsb3dNaWMoaml0c2lJZDogc3RyaW5nLCBhbGxvdzogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChKaXRzaUNvbW1hbmQuQUxMT1dfTUlDLCBqaXRzaUlkLCB7IGFsbG93OiBhbGxvdyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQWxsb3dDYW1lcmFDb21tYW5kKHBhcmFtOiBKaXRzaUNvbW1hbmRQYXJhbSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgY29uc3QgYWxsb3cgPSBwYXJhbS5hdHRyaWJ1dGVzLmFsbG93ID09PSBcInRydWVcIjtcclxuXHJcbiAgICAgICAgdGhpcy51aS5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnNldE11dGVDYW1lcmEodGFyZ2V0SWQsIGFsbG93KTtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldElkID09PSB0aGlzLmppdHNpUm9vbS5teVVzZXJJZCgpKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlcklkICE9PSB0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJZb3VyIGNhbWVyYSB3YXMgYWxsb3dlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25UeXBlLlZpZGVvXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uX3dhcm5pbmcoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJZb3VyIGNhbWVyYSB3YXMgYmxvY2tlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25UeXBlLlZpZGVvTXV0ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub25BbGxvd0NhbWVyYShhbGxvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25BbGxvd0NhbWVyYShhbGxvdzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMubXlJbmZvLm1lZGlhUG9saWN5LnVzZUNhbWVyYSA9IGFsbG93O1xyXG4gICAgICAgIGlmIChhbGxvdykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVZpZGVvVHJhY2sodGhpcy5hY3RpdmVDYW1lcmFJZClcclxuICAgICAgICAgICAgICAgIC50aGVuKCh0cmFja3M6IEppdHNpVHJhY2tbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2NhbFRyYWNrQWRkZWQodHJhY2tzKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9yZW1vdmUgdHJhY2tcclxuICAgICAgICAgICAgY29uc3QgbG9jYWxWaWRlb1RyYWNrID0gdGhpcy5nZXRMb2NhbFRyYWNrQnlUeXBlKE1lZGlhVHlwZS5WSURFTyk7XHJcbiAgICAgICAgICAgIGlmIChsb2NhbFZpZGVvVHJhY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTG9jYWxUcmFjayhsb2NhbFZpZGVvVHJhY2spLnRoZW4oKF86IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsVmlkZW9UcmFjay5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVVaU9uTG9jYWxUcmFja0NoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkFsbG93TWljQ29tbWFuZChwYXJhbTogSml0c2lDb21tYW5kUGFyYW0pIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGFsbG93ID0gcGFyYW0uYXR0cmlidXRlcy5hbGxvdyA9PT0gXCJ0cnVlXCI7XHJcblxyXG4gICAgICAgIHRoaXMudWkucGFydGljaXBhbnRzTGlzdFdpZGdldC5zZXRNdXRlTWljKHRhcmdldElkLCBhbGxvdyk7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXRJZCA9PT0gdGhpcy5qaXRzaVJvb20ubXlVc2VySWQoKSkge1xyXG4gICAgICAgICAgICBpZiAocGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZCAhPT0gdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbGxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiWW91ciBtaWNyb3Bob25lIHdhcyBhbGxvd2VkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblR5cGUuQXVkaW9cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb25fd2FybmluZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIllvdXIgbWljcm9waG9uZSB3YXMgYmxvY2tlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25UeXBlLkF1ZGlvTXV0ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub25BbGxvd01pYyhhbGxvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25BbGxvd01pYyhhbGxvdzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMubXlJbmZvLm1lZGlhUG9saWN5LnVzZU1pYyA9IGFsbG93O1xyXG5cclxuICAgICAgICBpZiAoYWxsb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVBdWRpb1RyYWNrKHRoaXMuYWN0aXZlTWljSWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigodHJhY2tzOiBKaXRzaVRyYWNrW10pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTG9jYWxUcmFja0FkZGVkKHRyYWNrcyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vcmVtb3ZlIHRyYWNrXHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsQXVkaW9UcmFjayA9IHRoaXMuZ2V0TG9jYWxUcmFja0J5VHlwZShNZWRpYVR5cGUuQVVESU8pO1xyXG4gICAgICAgICAgICBpZiAobG9jYWxBdWRpb1RyYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxvY2FsVHJhY2sobG9jYWxBdWRpb1RyYWNrKS50aGVuKChfOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbEF1ZGlvVHJhY2suZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVWlPbkxvY2FsVHJhY2tDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSovXHJcbiAgICAvL3NjcmVlbnNoYXJlXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUudG9nZ2xlU2NyZWVuU2hhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2NyZWVuU2hhcmluZykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHVybk9uQ2FtZXJhKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50dXJuT25TY3JlZW5TaGFyZSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucm9vbUluZm8uSXNTY3JlZW5TaGFyZVJlcXVpcmVkKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hc2sgcGVybWlzc2lvbiB0byBob3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChqaXRzaV8xLkppdHNpQ29tbWFuZC5BU0tfU0NSRUVOU0hBUkUsIHRoaXMubXlJbmZvLkppdHNpX0lkLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb25fd2FybmluZyhcIldhaXQgYSBzZWNvbmRcIiwgXCJTZW50IHlvdXIgc2NyZWVuIHNoYXJpbmcgcmVxdWVzdFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5TY3JlZW5zaGFyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnR1cm5PblNjcmVlblNoYXJlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDc7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuc2V0U2NyZWVuU2hhcmUodGhpcy5zY3JlZW5TaGFyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25Bc2tTY3JlZW5TaGFyZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIHNlbmRlck5hbWUgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWU7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICB0aGlzLnVpLmFza0RpYWxvZyhzZW5kZXJOYW1lLCBcIlJlcXVlc3RlZCBzY3JlZW4gc2hhcmluZ1wiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5TY3JlZW5zaGFyaW5nLCB0aGlzLmFsbG93U2NyZWVuc2hhcmUuYmluZCh0aGlzKSwgdGhpcy5kZW55U2NyZWVuc2hhcmUuYmluZCh0aGlzKSwgc2VuZGVySWQpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5hbGxvd1NjcmVlbnNoYXJlID0gZnVuY3Rpb24gKGppdHNpSWQpIHtcclxuICAgICAgICB0aGlzLnNlbmRKaXRzaVByaXZhdGVDb21tYW5kKGppdHNpSWQsIGppdHNpXzEuSml0c2lQcml2YXRlQ29tbWFuZC5BTExPV19TQ1JFRU5TSEFSRSwgeyBhbGxvdzogdHJ1ZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuZGVueVNjcmVlbnNoYXJlID0gZnVuY3Rpb24gKGppdHNpSWQpIHtcclxuICAgICAgICB0aGlzLnNlbmRKaXRzaVByaXZhdGVDb21tYW5kKGppdHNpSWQsIGppdHNpXzEuSml0c2lQcml2YXRlQ29tbWFuZC5BTExPV19TQ1JFRU5TSEFSRSwgeyBhbGxvdzogZmFsc2UgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uQWxsb3dTY3JlZW5zaGFyZSA9IGZ1bmN0aW9uIChzZW5kZXJJZCwgYWxsb3cpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VyLCB1c2VyTmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChzZW5kZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlcikgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lID0gdXNlci5nZXREaXNwbGF5TmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb24odXNlck5hbWUsIFwiU2NyZWVuc2hhcmluZyB3YXMgYWNjZXB0ZWRcIiwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuU2NyZWVuc2hhcmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHVybk9uU2NyZWVuU2hhcmUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkudG9vbGJhci5zZXRTY3JlZW5TaGFyZSh0aGlzLnNjcmVlblNoYXJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uX3dhcm5pbmcodXNlck5hbWUsIFwiU2NyZWVuc2hhcmluZyB3YXMgZGVuaWVkXCIsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLlNjcmVlbnNoYXJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vdHVybiBvbiBzY3JlZW4gc2hhcmVcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS50dXJuT25TY3JlZW5TaGFyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuSml0c2lNZWV0SlMuY3JlYXRlTG9jYWxUcmFja3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlczogWydkZXNrdG9wJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JlZW5UcmFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBTY3JlZW4gU2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblRyYWNrID0gdHJhY2tzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2NhbFRyYWNrQWRkZWQoW3NjcmVlblRyYWNrXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuVHJhY2suYWRkRXZlbnRMaXN0ZW5lcih0aGlzLkppdHNpTWVldEpTLmV2ZW50cy50cmFjay5MT0NBTF9UUkFDS19TVE9QUEVELCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkxvZygnc2NyZWVuIC0gc3RvcHBlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGVTY3JlZW5TaGFyZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NyZWVuU2hhcmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2NyZWVuU2hhcmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnR1cm5PbkNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuSml0c2lNZWV0SlMuY3JlYXRlTG9jYWxUcmFja3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlczogW01lZGlhVHlwZV8xLk1lZGlhVHlwZS5WSURFT11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFja3MpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYW1lcmFUcmFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhVHJhY2sgPSB0cmFja3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkxvY2FsVHJhY2tBZGRlZChbY2FtZXJhVHJhY2tdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcmVlblNoYXJpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JlZW5TaGFyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKmNoYXQqL1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnNlbmRDaGF0TWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICB0aGlzLmppdHNpUm9vbS5zZW5kVGV4dE1lc3NhZ2UobXNnKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuc2VuZFByaXZhdGVDaGF0TWVzc2FnZSA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgbXNnKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kSml0c2lQcml2YXRlQ29tbWFuZCh0YXJnZXRJZCwgaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLlBSSVZBVEVfQ0FIVCwgbXNnKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25SZWNlaXZlQ2hhdE1lc3NhZ2UgPSBmdW5jdGlvbiAoaWQsIG1zZywgdGltZXN0YW1wKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXlJbmZvLkppdHNpX0lkID09PSBpZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB1c2VyID0gdGhpcy5qaXRzaVJvb20uZ2V0UGFydGljaXBhbnRCeUlkKGlkKTtcclxuICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICB0aGlzLnVpLmNoYXR0aW5nV2lkZ2V0LnJlY2VpdmVNZXNzYWdlKGlkLCB1c2VyLmdldERpc3BsYXlOYW1lKCksIG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vblJlY2VpdmVQcml2YXRlQ2hhdE1lc3NhZ2UgPSBmdW5jdGlvbiAoc2VuZGVySWQsIG1zZykge1xyXG4gICAgICAgIGlmICh0aGlzLm15SW5mby5KaXRzaV9JZCA9PT0gc2VuZGVySWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChzZW5kZXJJZCk7XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy51aS5jaGF0dGluZ1dpZGdldC5yZWNlaXZlTWVzc2FnZShzZW5kZXJJZCwgdXNlci5nZXREaXNwbGF5TmFtZSgpLCBtc2csIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKmZpbGUgc2hhcmluZyovXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuc2VuZEZpbGVNZXRhID0gZnVuY3Rpb24gKG1ldGEpIHtcclxuICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuRklMRV9NRVRBLCBtZXRhLnNlc3Npb25JZCwgeyBtZXRhOiBKU09OLnN0cmluZ2lmeShtZXRhKSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuc2VuZEZpbGVEYXRhID0gZnVuY3Rpb24gKHNlc3Npb25JZCwgZGF0YSkge1xyXG4gICAgICAgIHZhciBiaW5hcnkgPSAnJztcclxuICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICB2YXIgbGVuID0gYnl0ZXMuYnl0ZUxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVuYyA9IHdpbmRvdy5idG9hKGJpbmFyeSk7XHJcbiAgICAgICAgdGhpcy5zZW5kSml0c2lCcm9hZGNhc3RDb21tYW5kKGppdHNpXzEuSml0c2lDb21tYW5kLkZJTEVfU0xJQ0UsIHNlc3Npb25JZCwgeyBkYXRhOiBlbmMgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uRmlsZU1ldGEgPSBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICB2YXIgc2Vzc2lvbklkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICB2YXIgc2VuZGVyTmFtZSA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZTtcclxuICAgICAgICB2YXIgbWV0YSA9IEpTT04ucGFyc2UocGFyYW0uYXR0cmlidXRlcy5tZXRhKTtcclxuICAgICAgICBpZiAoc2VuZGVySWQgPT09IHRoaXMubXlJbmZvLkppdHNpX0lkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy51aS5jaGF0dGluZ1dpZGdldC5vbkZpbGVNZXRhKHNlc3Npb25JZCwgbWV0YSwgc2VuZGVySWQsIHNlbmRlck5hbWUpO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkZpbGVEYXRhID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIHNlc3Npb25JZCA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIHZhciBlbmMgPSBwYXJhbS5hdHRyaWJ1dGVzLmRhdGE7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICB2YXIgc2VuZGVyTmFtZSA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZTtcclxuICAgICAgICBpZiAoc2VuZGVySWQgPT09IHRoaXMubXlJbmZvLkppdHNpX0lkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGJpbmFyeSA9IHdpbmRvdy5hdG9iKGVuYyk7XHJcbiAgICAgICAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5Lmxlbmd0aCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgYXJyYXlbaV0gPSBiaW5hcnkuY2hhckNvZGVBdChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51aS5jaGF0dGluZ1dpZGdldC5vbkZpbGVEYXRhKHNlc3Npb25JZCwgYXJyYXkuYnVmZmVyKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUudG9nZ2xlUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlY29yZGluZykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcFJlY29yZGluZygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS50b29sYmFyLnNldFJlY29yZGluZyh0aGlzLnJlY29yZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm15SW5mby5Jc0hvc3QpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0UmVjb3JkaW5nKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuc2V0UmVjb3JkaW5nKHRoaXMucmVjb3JkaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucm9vbUluZm8uSXNSZWNvcmRpbmdSZXF1aXJlZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXNrIHBlcm1pc3Npb24gdG8gaG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuQVNLX1JFQ09SRElORywgdGhpcy5teUluZm8uSml0c2lfSWQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm5vdGlmaWNhdGlvbl93YXJuaW5nKFwiV2FpdCBhIHNlY29uZFwiLCBcIlNlbnQgeW91ciByZWNvcmRpbmcgcmVxdWVzdFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5SZWNvcmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RhcnRSZWNvcmRpbmcoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkudG9vbGJhci5zZXRSZWNvcmRpbmcodGhpcy5yZWNvcmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDc7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkFza1JlY29yZGluZyA9IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIHNlbmRlck5hbWUgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWU7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJJZDtcclxuICAgICAgICB0aGlzLnVpLmFza0RpYWxvZyhzZW5kZXJOYW1lLCBcIlJlcXVlc3RlZCBhIHJlY29yZGluZ1wiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5SZWNvcmRpbmcsIHRoaXMuYWxsb3dSZWNvcmRpbmcuYmluZCh0aGlzKSwgdGhpcy5kZW55UmVjb3JkaW5nLmJpbmQodGhpcyksIHNlbmRlcklkKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuYWxsb3dSZWNvcmRpbmcgPSBmdW5jdGlvbiAoaml0c2lJZCkge1xyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpUHJpdmF0ZUNvbW1hbmQoaml0c2lJZCwgaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLkFMTE9XX1JFQ09SRElORywgeyBhbGxvdzogdHJ1ZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuZGVueVJlY29yZGluZyA9IGZ1bmN0aW9uIChqaXRzaUlkKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kSml0c2lQcml2YXRlQ29tbWFuZChqaXRzaUlkLCBqaXRzaV8xLkppdHNpUHJpdmF0ZUNvbW1hbmQuQUxMT1dfUkVDT1JESU5HLCB7IGFsbG93OiBmYWxzZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25BbGxvd1JlY29yZGluZyA9IGZ1bmN0aW9uIChzZW5kZXJJZCwgYWxsb3cpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VyLCB1c2VyTmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChzZW5kZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlcikgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lID0gdXNlci5nZXREaXNwbGF5TmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb24odXNlck5hbWUsIFwiUmVjb3JkaW5nIHdhcyBhY2NlcHRlZFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5SZWNvcmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0UmVjb3JkaW5nKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnRvb2xiYXIuc2V0UmVjb3JkaW5nKHRoaXMucmVjb3JkaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm5vdGlmaWNhdGlvbl93YXJuaW5nKHVzZXJOYW1lLCBcIlJlY29yZGluZyB3YXMgZGVuaWVkXCIsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLlJlY29yZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnN0YXJ0UmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGd1bVN0cmVhbSwgZ2RtU3RyZWFtLCBlXzEsIGVfMjtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3VtU3RyZWFtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2RtU3RyZWFtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgNCwgLCA5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IGZhbHNlLCBhdWRpbzogdHJ1ZSB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBndW1TdHJlYW0gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzogeyBkaXNwbGF5U3VyZmFjZTogXCJicm93c2VyXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogeyBjaGFubmVsQ291bnQ6IDIgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2RtU3RyZWFtID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZG1TdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcignaW5hY3RpdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZWNvcmRpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlUmVjb3JkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZWVtcyB0byBoYXMgbm8gYXVkaW8gZGV2aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzUsIDcsICwgOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBndW1TdHJlYW0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHsgZGlzcGxheVN1cmZhY2U6IFwiYnJvd3NlclwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IHsgY2hhbm5lbENvdW50OiAyIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdkbVN0cmVhbSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2RtU3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2luYWN0aXZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucmVjb3JkaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRvZ2dsZVJlY29yZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjYXB0dXJlIGZvciByZWNvcmRpbmcgZmFpbHVyZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29yZGVyU3RyZWFtID0gZ3VtU3RyZWFtID8gdGhpcy5taXhlcihndW1TdHJlYW0sIGdkbVN0cmVhbSkgOiBnZG1TdHJlYW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKHRoaXMucmVjb3JkZXJTdHJlYW0sIHsgbWltZVR5cGU6ICd2aWRlby93ZWJtJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLm9uZGF0YWF2YWlsYWJsZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5kYXRhICYmIGUuZGF0YS5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlY29yZGluZ0RhdGEucHVzaChlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMucmVjb3JkaW5nICYmICFfdGhpcy5kb3dubG9hZFJlY29yZEZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG93bmxvYWRSZWNvcmRpbmdGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIub25zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjb3JkZXJTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHsgcmV0dXJuIHRyYWNrLnN0b3AoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndW1TdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHsgcmV0dXJuIHRyYWNrLnN0b3AoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZG1TdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHsgcmV0dXJuIHRyYWNrLnN0b3AoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkZXJTdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcignaW5hY3RpdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ2FwdHVyZSBzdHJlYW0gaW5hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN0b3BSZWNvcmRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkaW5nRGF0YSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkUmVjb3JkRmlsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5zdG9wUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlY29yZGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZWRpYVJlY29yZGVyLnN0b3AoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRSZWNvcmRpbmdGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLmRvd25sb2FkUmVjb3JkaW5nRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5kb3dubG9hZFJlY29yZEZpbGUgfHwgdGhpcy5yZWNvcmRpbmdEYXRhLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYih0aGlzLnJlY29yZGluZ0RhdGEsIHsgdHlwZTogJ3ZpZGVvL3dlYm0nIH0pO1xyXG4gICAgICAgIHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgYS5ocmVmID0gdXJsO1xyXG4gICAgICAgIGEuZG93bmxvYWQgPSB0aGlzLmdldFJlY29yZGluZ0ZpbGVuYW1lKCkgKyBcIi53ZWJtXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcclxuICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XHJcbiAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgdGhpcy5kb3dubG9hZFJlY29yZEZpbGUgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5nZXRSZWNvcmRpbmdGaWxlbmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICB2YXIgdGltZXN0YW1wID0gbm93LnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vbUluZm8uY29uZmVyZW5jZU5hbWUgKyBcIl9yZWNvcmRpbmdfXCIgKyB0aW1lc3RhbXA7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm1peGVyID0gZnVuY3Rpb24gKHN0cmVhbTEsIHN0cmVhbTIpIHtcclxuICAgICAgICB2YXIgY3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgICAgIHZhciBkZXN0ID0gY3R4LmNyZWF0ZU1lZGlhU3RyZWFtRGVzdGluYXRpb24oKTtcclxuICAgICAgICBpZiAoc3RyZWFtMS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0xKS5jb25uZWN0KGRlc3QpO1xyXG4gICAgICAgIGlmIChzdHJlYW0yLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgY3R4LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbTIpLmNvbm5lY3QoZGVzdCk7XHJcbiAgICAgICAgdmFyIHRyYWNrcyA9IGRlc3Quc3RyZWFtLmdldFRyYWNrcygpO1xyXG4gICAgICAgIHRyYWNrcyA9IHRyYWNrcy5jb25jYXQoc3RyZWFtMS5nZXRWaWRlb1RyYWNrcygpKS5jb25jYXQoc3RyZWFtMi5nZXRWaWRlb1RyYWNrcygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IE1lZGlhU3RyZWFtKHRyYWNrcyk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnRvZ2dsZU11dGVBbGxWaWRlbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEppdHNpQnJvYWRjYXN0Q29tbWFuZChqaXRzaV8xLkppdHNpQ29tbWFuZC5NVVRFX0FsbF9WSURFTywgdGhpcy5teUluZm8uSml0c2lfSWQsIHsgbXV0ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uX3dhcm5pbmcoXCJXYWl0IGEgc2Vjb25kXCIsIFwiU2VudCB5b3VyIGFsbCB2aWRlbyBkaXNhYmxlIHJlcXVlc3RcIiwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuVmlkZW9NdXRlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLm9uTXV0ZUFsbFZpZGVvID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIHNlbmRlcklkID0gcGFyYW0udmFsdWU7XHJcbiAgICAgICAgdmFyIHNlbmRlck5hbWUgPSBwYXJhbS5hdHRyaWJ1dGVzLnNlbmRlck5hbWU7XHJcbiAgICAgICAgdmFyIG11dGUgPSBwYXJhbS5hdHRyaWJ1dGVzLm11dGUgPT09IFwidHJ1ZVwiO1xyXG4gICAgICAgIGlmIChzZW5kZXJJZCAhPT0gdGhpcy5teUluZm8uSml0c2lfSWQpIHtcclxuICAgICAgICAgICAgdGhpcy51aS5hc2tEaWFsb2coc2VuZGVyTmFtZSwgXCJSZXF1ZXN0ZWQgdG8gbXV0ZSB5b3VyIGNhbWVyYVwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5WaWRlb011dGUsIHRoaXMubXV0ZU15VmlkZW8uYmluZCh0aGlzKSwgbnVsbCwgbXV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS50b2dnbGVNdXRlQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm15SW5mby5Jc0hvc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kSml0c2lCcm9hZGNhc3RDb21tYW5kKGppdHNpXzEuSml0c2lDb21tYW5kLk1VVEVfQWxsX0FVRElPLCB0aGlzLm15SW5mby5KaXRzaV9JZCwgeyBtdXRlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51aS5ub3RpZmljYXRpb25fd2FybmluZyhcIldhaXQgYSBzZWNvbmRcIiwgXCJTZW50IHlvdXIgbXV0ZSBhbGwgcmVxdWVzdFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5BdWRpb011dGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25NdXRlQWxsQXVkaW8gPSBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICB2YXIgc2VuZGVySWQgPSBwYXJhbS52YWx1ZTtcclxuICAgICAgICB2YXIgc2VuZGVyTmFtZSA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVyTmFtZTtcclxuICAgICAgICB2YXIgbXV0ZSA9IHBhcmFtLmF0dHJpYnV0ZXMubXV0ZSA9PT0gXCJ0cnVlXCI7XHJcbiAgICAgICAgaWYgKHNlbmRlcklkICE9PSB0aGlzLm15SW5mby5KaXRzaV9JZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVpLmFza0RpYWxvZyhzZW5kZXJOYW1lLCBcIlJlcXVlc3RlZCB0byBtdXRlIHlvdXIgbWljcm9waG9uZVwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5BdWRpb011dGUsIHRoaXMubXV0ZU15QXVkaW8uYmluZCh0aGlzKSwgbnVsbCwgbXV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGhhbmRyYWlzZVxyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnRvZ2dsZUhhbmRSYWlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5teUluZm8uSXNIb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hc2sgaGFuZHJhaXNlIHRvIGhvc3RcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRKaXRzaUJyb2FkY2FzdENvbW1hbmQoaml0c2lfMS5KaXRzaUNvbW1hbmQuQVNLX0hBTkRSQUlTRSwgdGhpcy5teUluZm8uSml0c2lfSWQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWkubm90aWZpY2F0aW9uX3dhcm5pbmcoXCJXYWl0IGEgc2Vjb25kXCIsIFwiU2VudCB5b3VyIGhhbmQtcmFpc2UgcmVxdWVzdFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5IYW5kUmFpc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25Bc2tIYW5kUmFpc2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICBpZiAoIXRoaXMubXlJbmZvLklzSG9zdClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBzZW5kZXJOYW1lID0gcGFyYW0uYXR0cmlidXRlcy5zZW5kZXJOYW1lO1xyXG4gICAgICAgIHZhciBzZW5kZXJJZCA9IHBhcmFtLmF0dHJpYnV0ZXMuc2VuZGVySWQ7XHJcbiAgICAgICAgdGhpcy51aS5hc2tEaWFsb2coc2VuZGVyTmFtZSwgXCJSZXF1ZXN0ZWQgSGFuZC1SYWlzZVwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5IYW5kUmFpc2UsIHRoaXMuYWxsb3dIYW5kUmFpc2UuYmluZCh0aGlzKSwgdGhpcy5kZW55SGFuZFJhaXNlLmJpbmQodGhpcyksIHNlbmRlcklkKTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuYWxsb3dIYW5kUmFpc2UgPSBmdW5jdGlvbiAoaml0c2lJZCkge1xyXG4gICAgICAgIHRoaXMuc2VuZEppdHNpUHJpdmF0ZUNvbW1hbmQoaml0c2lJZCwgaml0c2lfMS5KaXRzaVByaXZhdGVDb21tYW5kLkFMTE9XX0hBTkRSQUlTRSwgeyBhbGxvdzogdHJ1ZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuZGVueUhhbmRSYWlzZSA9IGZ1bmN0aW9uIChqaXRzaUlkKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kSml0c2lQcml2YXRlQ29tbWFuZChqaXRzaUlkLCBqaXRzaV8xLkppdHNpUHJpdmF0ZUNvbW1hbmQuQUxMT1dfSEFORFJBSVNFLCB7IGFsbG93OiBmYWxzZSB9KTtcclxuICAgIH07XHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUub25BbGxvd0hhbmRSYWlzZSA9IGZ1bmN0aW9uIChzZW5kZXJJZCwgYWxsb3cpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VyLCB1c2VyTmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgdXNlciA9IHRoaXMuaml0c2lSb29tLmdldFBhcnRpY2lwYW50QnlJZChzZW5kZXJJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lID0gdXNlci5nZXREaXNwbGF5TmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm5vdGlmaWNhdGlvbih1c2VyTmFtZSwgXCJIYW5kLXJhaXNlIHdhcyBhY2NlcHRlZFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5IYW5kUmFpc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGVNeVZpZGVvKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRlTXlBdWRpbyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLm5vdGlmaWNhdGlvbl93YXJuaW5nKHVzZXJOYW1lLCBcIkhhbmQtcmFpc2Ugd2FzIGRlbmllZFwiLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5IYW5kUmFpc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQml6R2F6ZU1lZXRpbmcucHJvdG90eXBlLnRvZ2dsZUNvcHlKb2luaW5nSW5mbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgVGVtcFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgVGVtcFRleHQudmFsdWUgPSBcImh0dHBzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIFwiL2xvYmJ5L1wiICsgdGhpcy5yb29tSW5mby5JZDsgLy8gZW50ZXIgeW91ciBtZWV0aW5nIHVybCBoZXJlXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChUZW1wVGV4dCk7XHJcbiAgICAgICAgVGVtcFRleHQuc2VsZWN0KCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoVGVtcFRleHQpO1xyXG4gICAgfTtcclxuICAgIC8vaGlnaGxpZ2h0IHNwZWFrZXJcclxuICAgIEJpekdhemVNZWV0aW5nLnByb3RvdHlwZS5vbkRvbWluYW50U3BlYWtlckNoYW5nZWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICBpZiAoaWQgPT09IHRoaXMubXlJbmZvLkppdHNpX0lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudWkudmlkZW9QYW5lbEdyaWQuaGlnaHRsaWdodFBhbmVsKHRoaXMubG9jYWxWaWRlb1BhbmVsLklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VyID0gdGhpcy5qaXRzaVJvb20uZ2V0UGFydGljaXBhbnRCeUlkKGlkKTtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb1BhbmVsID0gdXNlci5nZXRQcm9wZXJ0eShVc2VyUHJvcGVydHlfMS5Vc2VyUHJvcGVydHkudmlkZW9QYW5lbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlkZW9QYW5lbClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpLnZpZGVvUGFuZWxHcmlkLmhpZ2h0bGlnaHRQYW5lbCh2aWRlb1BhbmVsLklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiAgICAgICAgICAgICAgTG9nXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICBCaXpHYXplTWVldGluZy5wcm90b3R5cGUuTG9nID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICBpZiAodGhpcy51aSAhPSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLnVpLkxvZyhtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQml6R2F6ZU1lZXRpbmc7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQml6R2F6ZU1lZXRpbmcgPSBCaXpHYXplTWVldGluZztcclxudmFyIG1lZXRpbmcgPSBuZXcgQml6R2F6ZU1lZXRpbmcoKTtcclxubWVldGluZy5zdGFydCgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZWV0aW5nLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9mYWtlX2E1OWEwZTZlLmpzXCIsXCIvXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GaWxlUmVjZWl2ZXIgPSBleHBvcnRzLkZpbGVSZWNlaXZlclByb3BzID0gdm9pZCAwO1xyXG52YXIgc25pcHBldF8xID0gcmVxdWlyZShcIi4uL3V0aWwvc25pcHBldFwiKTtcclxudmFyIEZpbGVSZWNlaXZlclByb3BzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsZVJlY2VpdmVyUHJvcHMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlsZVJlY2VpdmVyUHJvcHM7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsZVJlY2VpdmVyUHJvcHMgPSBGaWxlUmVjZWl2ZXJQcm9wcztcclxudmFyIEZpbGVSZWNlaXZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbGVSZWNlaXZlcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgfVxyXG4gICAgRmlsZVJlY2VpdmVyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWNlaXZpbmdJZCA9IFwicmVjZWl2aW5nLVwiICsgdGhpcy5wcm9wcy5tZXRhLnNlc3Npb25JZDtcclxuICAgICAgICB2YXIgaHRtbCA9IFwiXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmlsZS1wcm9ncmVzc1xcXCIgaWQ9XFxcIlwiICsgcmVjZWl2aW5nSWQgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZpbGVpbmZvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJkb3dubG9hZFxcXCIgaHJlZj1cXFwiI1xcXCI+XCIgKyB0aGlzLnByb3BzLm1ldGEubmFtZSArIFwiKFwiICsgc25pcHBldF8xLmdldENhcGFjaXR5TGFiZWwodGhpcy5wcm9wcy5tZXRhLnNpemUpICsgXCIpPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyXFxcIiByb2xlPVxcXCJwcm9ncmVzc2JhclxcXCIgYXJpYS12YWx1ZW5vdz1cXFwiMFxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwiMTAwXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XCI7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5hZGRDaGF0SXRlbSh0aGlzLnByb3BzLnNlbmRlcklkLCB0aGlzLnByb3BzLnNlbmRlck5hbWUsIGh0bWwsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmluZ0VsZW1lbnQgPSAkKFwiI1wiICsgcmVjZWl2aW5nSWQpO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NFbGVtZW50ID0gdGhpcy5yZWNlaXZpbmdFbGVtZW50LmZpbmQoXCIucHJvZ3Jlc3MtYmFyXCIpO1xyXG4gICAgICAgIHRoaXMuZG93bmxvYWRFbGVtZW50ID0gdGhpcy5yZWNlaXZpbmdFbGVtZW50LmZpbmQoXCIuZG93bmxvYWRcIik7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZpbmdFbGVtZW50LmNsb3Nlc3QoXCIudXNlcm1lc3NhZ2VcIikuY3NzKFwid2hpdGUtc3BhY2VcIiwgXCJub3dyYXBcIik7XHJcbiAgICB9O1xyXG4gICAgRmlsZVJlY2VpdmVyLnByb3RvdHlwZS5yZWFkRmlsZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGRhdGEpO1xyXG4gICAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgdmFyIHBlcmNlbnQgPSBNYXRoLmZsb29yKHRoaXMuc2l6ZSAvIHRoaXMucHJvcHMubWV0YS5zaXplICogMTAwKTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzRWxlbWVudC5hdHRyKFwiYXJpYS12YWx1ZW5vd1wiLCBwZXJjZW50KTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzRWxlbWVudC5jc3MoXCJ3aWR0aFwiLCBwZXJjZW50ICsgXCIlXCIpO1xyXG4gICAgICAgIGlmICh0aGlzLnNpemUgPj0gdGhpcy5wcm9wcy5tZXRhLnNpemUpIHtcclxuICAgICAgICAgICAgdmFyIHJlY2VpdmVkID0gbmV3IEJsb2IodGhpcy5yZWNlaXZlQnVmZmVyKTtcclxuICAgICAgICAgICAgdGhpcy5kb3dubG9hZEVsZW1lbnQuYXR0cignaHJlZicsIFVSTC5jcmVhdGVPYmplY3RVUkwocmVjZWl2ZWQpKTtcclxuICAgICAgICAgICAgdGhpcy5kb3dubG9hZEVsZW1lbnQuYXR0cignZG93bmxvYWQnLCB0aGlzLnByb3BzLm1ldGEubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0aGlzLnByb3BzLm1ldGEuc2Vzc2lvbklkLCB0aGlzLnByb3BzLm1ldGEubmFtZSwgXCJSZWNlaXZlIGZpbmlzaGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlsZVJlY2VpdmVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbGVSZWNlaXZlciA9IEZpbGVSZWNlaXZlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVJlY2VpdmVyLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9maWxlXFxcXEZpbGVSZWNlaXZlci5qc1wiLFwiL2ZpbGVcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GaWxlU2VuZGVyID0gZXhwb3J0cy5GaWxlU2VuZGVyUHJvcHMgPSB2b2lkIDA7XHJcbnZhciBzbmlwcGV0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zbmlwcGV0XCIpO1xyXG52YXIgRmlsZVNlbmRlclByb3BzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsZVNlbmRlclByb3BzKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZpbGVTZW5kZXJQcm9wcztcclxufSgpKTtcclxuZXhwb3J0cy5GaWxlU2VuZGVyUHJvcHMgPSBGaWxlU2VuZGVyUHJvcHM7XHJcbnZhciBGaWxlU2VuZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsZVNlbmRlcihwcm9wcykge1xyXG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIH1cclxuICAgIEZpbGVTZW5kZXIucHJvdG90eXBlLnNlbmRGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZpbGUsIHNlbmRpbmdJZCwgaHRtbCwgJHByb2dyZXNzRWxlbSwgY2h1bmtTaXplLCBmaWxlUmVhZGVyLCBvZmZzZXQsIHJlYWRTbGljZTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZmlsZUVsZW1lbnQuZmlsZXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMucHJvcHMub25FcnJvcihcIk5vIGZpbGVcIiwgXCJQbGVhc2Ugc2VsZWN0IGEgZmlsZSB0byBzaGFyZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaWxlID0gdGhpcy5wcm9wcy5maWxlRWxlbWVudC5maWxlc1swXTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlLnNpemUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25FcnJvcihmaWxlLm5hbWUsIFwiWW91IGNob29zZWQgZW1wdHkgZmlsZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xyXG4gICAgICAgICAgICAgICAgc2VuZGluZ0lkID0gXCJzZW5kaW5nLVwiICsgdGhpcy5wcm9wcy5zZXNzaW9uSWQ7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gXCJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmaWxlLXByb2dyZXNzXFxcIiBpZD1cXFwiXCIgKyBzZW5kaW5nSWQgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZpbGVpbmZvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgZmlsZS5uYW1lICsgXCIoXCIgKyBzbmlwcGV0XzEuZ2V0Q2FwYWNpdHlMYWJlbChmaWxlLnNpemUpICsgXCIpXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCIwXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCIxMDBcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cIjtcclxuICAgICAgICAgICAgICAgICQodGhpcy5wcm9wcy5maWxlU2VuZGluZ1BhbmVsKS5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRpbmdFbGVtZW50ID0gJChcIiNcIiArIHNlbmRpbmdJZCk7XHJcbiAgICAgICAgICAgICAgICAkcHJvZ3Jlc3NFbGVtID0gdGhpcy5zZW5kaW5nRWxlbWVudC5maW5kKFwiLnByb2dyZXNzLWJhclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2VuZEZpbGVNZXRhKHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlsZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGZpbGUuc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHRoaXMucHJvcHMuc2Vzc2lvbklkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNodW5rU2l6ZSA9IDE2Mzg0O1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVNlbGYoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkVycm9yKGZpbGUubmFtZSwgXCJFcnJvciBoYXBwZW5lZCB3aGlsZSByZWFkaW5nIFwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVNlbGYoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkVycm9yKGZpbGUubmFtZSwgXCJSZWFkaW5nIHdhcyBhYm9ydGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZWFkU2xpY2UgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IGZpbGUuc2xpY2Uob2Zmc2V0LCBvICsgY2h1bmtTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHNsaWNlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLnNlbmRGaWxlRGF0YShfdGhpcy5wcm9wcy5zZXNzaW9uSWQsIGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBibG9iLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgcHJvZ3Jlc3NcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IE1hdGguZmxvb3IoKG9mZnNldCAqIDEwMCkgLyBmaWxlLnNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRwcm9ncmVzc0VsZW0uYXR0cihcImFyaWEtdmFsdWVub3dcIiwgcGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHByb2dyZXNzRWxlbS5jc3MoXCJ3aWR0aFwiLCBwZXJjZW50ICsgXCIlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCBmaWxlLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZFNsaWNlKG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVhZFNsaWNlKG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uRmluaXNoZWQoZmlsZS5uYW1lLCBcIlNlbmRpbmcgZmluaXNoZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZWFkU2xpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpbGVTZW5kZXIucHJvdG90eXBlLnJlbW92ZVNlbGYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kaW5nRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlsZVNlbmRlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GaWxlU2VuZGVyID0gRmlsZVNlbmRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNlbmRlci5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvZmlsZVxcXFxGaWxlU2VuZGVyLmpzXCIsXCIvZmlsZVwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSml0c2lDb21tYW5kUGFyYW0gPSB2b2lkIDA7XHJcbnZhciBKaXRzaUNvbW1hbmRQYXJhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEppdHNpQ29tbWFuZFBhcmFtKCkge1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBKaXRzaUNvbW1hbmRQYXJhbTtcclxufSgpKTtcclxuZXhwb3J0cy5KaXRzaUNvbW1hbmRQYXJhbSA9IEppdHNpQ29tbWFuZFBhcmFtO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1KaXRzaUNvbW1hbmRQYXJhbS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvaml0c2lcXFxcSml0c2lDb21tYW5kUGFyYW0uanNcIixcIi9qaXRzaVwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSml0c2lQcml2YXRlQ29tbWFuZFF1ZXVlID0gZXhwb3J0cy5KaXRzaUNvbW1hbmRRdWV1ZSA9IHZvaWQgMDtcclxudmFyIEppdHNpQ29tbWFuZENhbGxiYWNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSml0c2lDb21tYW5kQ2FsbGJhY2soKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSml0c2lDb21tYW5kQ2FsbGJhY2s7XHJcbn0oKSk7XHJcbnZhciBKaXRzaUNvbW1hbmRRdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEppdHNpQ29tbWFuZFF1ZXVlKCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgSml0c2lDb21tYW5kUXVldWUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmNsZWFyKCk7XHJcbiAgICB9O1xyXG4gICAgSml0c2lDb21tYW5kUXVldWUucHJvdG90eXBlLnF1ZXVlQ29tbWFuZCA9IGZ1bmN0aW9uIChqaXRzaUlkLCBjb21tYW5kLCBwYXJhbSwgY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2tzLmhhcyhqaXRzaUlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5zZXQoaml0c2lJZCwgW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2IgPSBuZXcgSml0c2lDb21tYW5kQ2FsbGJhY2soKTtcclxuICAgICAgICBjYi5jb21tYW5kID0gY29tbWFuZDtcclxuICAgICAgICBjYi5wYXJhbSA9IHBhcmFtO1xyXG4gICAgICAgIGNiLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZ2V0KGppdHNpSWQpLnB1c2goY2IpO1xyXG4gICAgfTtcclxuICAgIEppdHNpQ29tbWFuZFF1ZXVlLnByb3RvdHlwZS5leGVjdXRlUXVldWVkQ29tbWFuZHMgPSBmdW5jdGlvbiAoaml0c2lJZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWxsYmFja3MuaGFzKGppdHNpSWQpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGNicyA9IHRoaXMuY2FsbGJhY2tzLmdldChqaXRzaUlkKTtcclxuICAgICAgICBjYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICBjYi5jYWxsYmFjayhjYi5wYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKGppdHNpSWQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBKaXRzaUNvbW1hbmRRdWV1ZTtcclxufSgpKTtcclxuZXhwb3J0cy5KaXRzaUNvbW1hbmRRdWV1ZSA9IEppdHNpQ29tbWFuZFF1ZXVlO1xyXG52YXIgSml0c2lQcml2YXRlQ29tbWFuZENhbGxiYWNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSml0c2lQcml2YXRlQ29tbWFuZENhbGxiYWNrKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEppdHNpUHJpdmF0ZUNvbW1hbmRDYWxsYmFjaztcclxufSgpKTtcclxudmFyIEppdHNpUHJpdmF0ZUNvbW1hbmRRdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEppdHNpUHJpdmF0ZUNvbW1hbmRRdWV1ZSgpIHtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIEppdHNpUHJpdmF0ZUNvbW1hbmRRdWV1ZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuY2xlYXIoKTtcclxuICAgIH07XHJcbiAgICBKaXRzaVByaXZhdGVDb21tYW5kUXVldWUucHJvdG90eXBlLnF1ZXVlQ29tbWFuZCA9IGZ1bmN0aW9uIChqaXRzaUlkLCBjb21tYW5kLCBtZXNzYWdlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWxsYmFja3MuaGFzKGppdHNpSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldChqaXRzaUlkLCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjYiA9IG5ldyBKaXRzaVByaXZhdGVDb21tYW5kQ2FsbGJhY2soKTtcclxuICAgICAgICBjYi5jb21tYW5kID0gY29tbWFuZDtcclxuICAgICAgICBjYi5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICBjYi5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmdldChqaXRzaUlkKS5wdXNoKGNiKTtcclxuICAgIH07XHJcbiAgICBKaXRzaVByaXZhdGVDb21tYW5kUXVldWUucHJvdG90eXBlLmV4ZWN1dGVRdWV1ZWRDb21tYW5kcyA9IGZ1bmN0aW9uIChqaXRzaUlkKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrcy5oYXMoaml0c2lJZCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgY2JzID0gdGhpcy5jYWxsYmFja3MuZ2V0KGppdHNpSWQpO1xyXG4gICAgICAgIGNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYiwgaW5kZXgpIHtcclxuICAgICAgICAgICAgY2IuY2FsbGJhY2soaml0c2lJZCwgY2IuY29tbWFuZCwgY2IubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKGppdHNpSWQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBKaXRzaVByaXZhdGVDb21tYW5kUXVldWU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSml0c2lQcml2YXRlQ29tbWFuZFF1ZXVlID0gSml0c2lQcml2YXRlQ29tbWFuZFF1ZXVlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1KaXRzaUNvbW1hbmRRdWV1ZS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvaml0c2lcXFxcSml0c2lDb21tYW5kUXVldWUuanNcIixcIi9qaXRzaVwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gIFxyXG4gICAgICAgICAgblBhbmVsQ291bnQgPSA0XHJcblxyXG4tLS0tLS0tLS0tcGFuZWxDb250YWluZXItLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC0tLXBhbmVsLS0tICAgICAgIC0tLXBhbmVsLS0tXHJcbiAgICB8ICAgIDEgICAgIHwgICAgICB8ICAgIDIgICAgfFxyXG4gICAgfF9fX19fX19fX198ICAgICAgfF9fX19fX19fX3xcclxuXHJcbiAgICAtLS1wYW5lbC0tLSAgICAgICAtLS1wYW5lbC0tLVxyXG4gICAgfCAgICAzICAgICB8ICAgICAgfCAgICA0ICAgIHxcclxuICAgIHxfX19fX19fX19ffCAgICAgIHxfX19fX19fX198XHJcblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgICBCdXR0b25zIC0gIGF1ZGlvL3ZpZGVvTXV0ZSwgc2NyZWVuU2hhcmUsIFJlY29yZCwgQ2hhdFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk1lZXRpbmdVSSA9IHZvaWQgMDtcclxudmFyIFNldHRpbmdEaWFsb2dfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvU2V0dGluZ0RpYWxvZ1wiKTtcclxudmFyIENoYXR0aW5nUGFuZWxfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvQ2hhdHRpbmdQYW5lbFwiKTtcclxudmFyIFBhcnRpY2lwYW50TGlzdFBhbmVsXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL1BhcnRpY2lwYW50TGlzdFBhbmVsXCIpO1xyXG52YXIgTm90aWZpY2F0aW9uVHlwZV8xID0gcmVxdWlyZShcIi4vZW51bS9Ob3RpZmljYXRpb25UeXBlXCIpO1xyXG52YXIgQXNrRGlhbG9nXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL0Fza0RpYWxvZ1wiKTtcclxudmFyIFRvb2xCYXJfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvVG9vbEJhclwiKTtcclxudmFyIE1lZXRpbmdEZXNjcmlwdGlvbldpZGdldF8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9NZWV0aW5nRGVzY3JpcHRpb25XaWRnZXRcIik7XHJcbnZhciBWaWRlb1BhbmVsR3JpZF8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9WaWRlb1BhbmVsR3JpZFwiKTtcclxudmFyIFBhbmVsVmlkZW9TdGF0ZTtcclxuKGZ1bmN0aW9uIChQYW5lbFZpZGVvU3RhdGUpIHtcclxuICAgIFBhbmVsVmlkZW9TdGF0ZVtcIk5vQ2FtZXJhXCJdID0gXCJuby1jYW1lcmFcIjtcclxuICAgIFBhbmVsVmlkZW9TdGF0ZVtcIlNjcmVlblNoYXJlXCJdID0gXCJzY3JlZW5cIjtcclxuICAgIFBhbmVsVmlkZW9TdGF0ZVtcIkNhbWVyYVwiXSA9IFwiY2FtZXJhXCI7XHJcbiAgICBQYW5lbFZpZGVvU3RhdGVbXCJWaWRlb1N0cmVhbWluZ1wiXSA9IFwic3RyZWFtXCI7XHJcbn0pKFBhbmVsVmlkZW9TdGF0ZSB8fCAoUGFuZWxWaWRlb1N0YXRlID0ge30pKTtcclxudmFyIE1lZXRpbmdVSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lZXRpbmdVSShtZWV0aW5nKSB7XHJcbiAgICAgICAgdGhpcy5tZWV0aW5nID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGhpZGVUb29sYmFyT25Nb3VzZU91dDogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm1lZXRpbmcgPSBtZWV0aW5nO1xyXG4gICAgICAgIC8vdG9vbGJhclxyXG4gICAgICAgIHZhciB0UHJvcHMgPSBuZXcgVG9vbEJhcl8xLlRvb2xCYXJQcm9wcygpO1xyXG4gICAgICAgIHRQcm9wcy50b2dnbGVUaWxlVmlldyA9IHRoaXMucmVkcmF3R3JpZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRQcm9wcy50b2dnbGVWaWRlb011dGUgPSB0aGlzLm1lZXRpbmcuT25Ub2dnbGVNdXRlTXlWaWRlby5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgdFByb3BzLnRvZ2dsZUF1ZGlvTXV0ZSA9IHRoaXMubWVldGluZy5PblRvZ2dsZU11dGVNeUF1ZGlvLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICB0UHJvcHMub3BlbkNoYXR0aW5nID0gdGhpcy5vcGVuQ2hhdHRpbmcuYmluZCh0aGlzKTtcclxuICAgICAgICB0UHJvcHMudG9nZ2xlU2NyZWVuU2hhcmUgPSB0aGlzLm1lZXRpbmcudG9nZ2xlU2NyZWVuU2hhcmUuYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHRQcm9wcy50b2dnbGVSZWNvcmRpbmcgPSB0aGlzLm1lZXRpbmcudG9nZ2xlUmVjb3JkaW5nLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICB0UHJvcHMudG9nZ2xlSGFuZFJhaXNlID0gdGhpcy5tZWV0aW5nLnRvZ2dsZUhhbmRSYWlzZS5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgdFByb3BzLnRvZ2dsZU11dGVBbGwgPSB0aGlzLm1lZXRpbmcudG9nZ2xlTXV0ZUFsbC5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgdFByb3BzLnRvZ2dsZU11dGVBbGxWaWRlbyA9IHRoaXMubWVldGluZy50b2dnbGVNdXRlQWxsVmlkZW8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHRQcm9wcy5vcGVuU2V0dGluZyA9IHRoaXMuc2hvd1NldHRpbmdEaWFsb2cuYmluZCh0aGlzKTtcclxuICAgICAgICB0UHJvcHMubGVhdmVNZWV0aW5nID0gdGhpcy5tZWV0aW5nLnN0b3AuYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sQmFyXzEuVG9vbEJhcih0UHJvcHMpO1xyXG4gICAgICAgIC8vY2hhdHRpbmdcclxuICAgICAgICB0aGlzLmNoYXR0aW5nV2lkZ2V0ID0gbmV3IENoYXR0aW5nUGFuZWxfMS5DaGF0dGluZ1dpZGdldCgpO1xyXG4gICAgICAgIHZhciBwcm9wcyA9IG5ldyBDaGF0dGluZ1BhbmVsXzEuQ2hhdHRpbmdQYW5lbFByb3BzKCk7XHJcbiAgICAgICAgcHJvcHMub3BlbkNhbGxiYWNrID0gdGhpcy5yZWRyYXdHcmlkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgcHJvcHMuc2VuZENoYXQgPSB0aGlzLm1lZXRpbmcuc2VuZENoYXRNZXNzYWdlLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICBwcm9wcy5zZW5kUHJpdmF0ZUNoYXQgPSB0aGlzLm1lZXRpbmcuc2VuZFByaXZhdGVDaGF0TWVzc2FnZS5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgcHJvcHMuc2VuZEZpbGVNZXRhID0gdGhpcy5tZWV0aW5nLnNlbmRGaWxlTWV0YS5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgcHJvcHMuc2VuZEZpbGVEYXRhID0gdGhpcy5tZWV0aW5nLnNlbmRGaWxlRGF0YS5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgcHJvcHMub25GaWxlU2VuZEVycnJvciA9IHRoaXMub25GaWxlU2VuZEVycm9yLmJpbmQodGhpcyk7XHJcbiAgICAgICAgcHJvcHMub25GaWxlU2VuZEZpbmlzaGVkID0gdGhpcy5vbkZpbGVTZW5kRmluaXNoZWQuYmluZCh0aGlzKTtcclxuICAgICAgICBwcm9wcy5vbkZpbGVSZWNlaXZlRXJyb3IgPSB0aGlzLm9uRmlsZVJlY2VpdmVFcnJvci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHByb3BzLm9uRmlsZVJlY2VpdmVGaW5pc2hlZCA9IHRoaXMub25GaWxlUmVjZWl2ZUZpbmlzaGVkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgcHJvcHMuc2hvd1VucmVhZEJhZGdlID0gdGhpcy50b29sYmFyLnNob3dVbnJlYWRCYWRnZS5iaW5kKHRoaXMudG9vbGJhcik7XHJcbiAgICAgICAgcHJvcHMuc2V0VW5yZWFkQ291bnQgPSB0aGlzLnRvb2xiYXIuc2V0VW5yZWFkQ291bnQuYmluZCh0aGlzLnRvb2xiYXIpO1xyXG4gICAgICAgIHRoaXMuY2hhdHRpbmdXaWRnZXQuaW5pdChwcm9wcyk7XHJcbiAgICAgICAgLy9saXN0XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0ID0gbmV3IFBhcnRpY2lwYW50TGlzdFBhbmVsXzEuUGFydGljaXBhbnRMaXN0V2lkZ2V0KCk7XHJcbiAgICAgICAgdmFyIGxQcm9wcyA9IG5ldyBQYXJ0aWNpcGFudExpc3RQYW5lbF8xLlBhcnRpY2lwYW50TGlzdFBhbmVsUHJvcHMoKTtcclxuICAgICAgICBsUHJvcHMub25NdXRlQ2FtZXJhID0gdGhpcy5tZWV0aW5nLm11dGVVc2VyVmlkZW8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIGxQcm9wcy5vbk11dGVNaWMgPSB0aGlzLm1lZXRpbmcubXV0ZVVzZXJBdWRpby5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgbFByb3BzLnRvZ2dsZUNvcHlKb2luaW5nSW5mbyA9IHRoaXMubWVldGluZy50b2dnbGVDb3B5Sm9pbmluZ0luZm8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzTGlzdFdpZGdldC5pbml0KGxQcm9wcyk7XHJcbiAgICAgICAgLy9tZWV0aW5nIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgdGhpcy5tZWV0aW5nRGVzY1dpZGdldCA9IG5ldyBNZWV0aW5nRGVzY3JpcHRpb25XaWRnZXRfMS5NZWV0aW5nRGVzY3JpcHRpb25XaWRnZXQoKTtcclxuICAgICAgICAvL3ZpZGVvIGdyaWRcclxuICAgICAgICB2YXIgdlByb3BzID0gbmV3IFZpZGVvUGFuZWxHcmlkXzEuVmlkZW9QYW5lbEdyaWRQcm9wcygpO1xyXG4gICAgICAgIHZQcm9wcy5ncmFudE1vZGVyYXRvclJvbGUgPSB0aGlzLm1lZXRpbmcuZ3JhbnRNb2RlcmF0b3JSb2xlLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICB2UHJvcHMua2lja1BhcnRpY2lwYW50T3V0ID0gdGhpcy5tZWV0aW5nLmtpY2tQYXJ0aWNpcGFudE91dC5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgdlByb3BzLnNlbmRSZW1vdGVDb250cm9sUmVwbHkgPSB0aGlzLm1lZXRpbmcuc2VuZFJlbW90ZUNvbnRyb2xSZXBseS5iaW5kKHRoaXMubWVldGluZyk7XHJcbiAgICAgICAgdlByb3BzLm11dGVNeUF1ZGlvID0gdGhpcy5tZWV0aW5nLm11dGVNeUF1ZGlvLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICB2UHJvcHMubXV0ZU15VmlkZW8gPSB0aGlzLm1lZXRpbmcubXV0ZU15VmlkZW8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHZQcm9wcy5tdXRlVXNlckF1ZGlvID0gdGhpcy5tZWV0aW5nLm11dGVVc2VyQXVkaW8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHZQcm9wcy5tdXRlVXNlclZpZGVvID0gdGhpcy5tZWV0aW5nLm11dGVVc2VyVmlkZW8uYmluZCh0aGlzLm1lZXRpbmcpO1xyXG4gICAgICAgIHZQcm9wcy5vcGVuUHJpdmF0ZUNoYXQgPSB0aGlzLmNoYXR0aW5nV2lkZ2V0Lm9wZW5Qcml2YXRlQ2hhdC5iaW5kKHRoaXMuY2hhdHRpbmdXaWRnZXQpO1xyXG4gICAgICAgIHRoaXMudmlkZW9QYW5lbEdyaWQgPSBuZXcgVmlkZW9QYW5lbEdyaWRfMS5WaWRlb1BhbmVsR3JpZCh2UHJvcHMpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoSGFuZGxlcnMoKTtcclxuICAgIH1cclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUuYXR0YWNoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vaG92ZXIgZWZmZWN0XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmhpZGVUb29sYmFyT25Nb3VzZU91dCkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNjb250ZW50XCIpLmhvdmVyKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9vbGJhci5mYWRlSW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tZWV0aW5nRGVzY1dpZGdldC5mYWRlSW4oKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9vbGJhci5mYWRlT3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWVldGluZ0Rlc2NXaWRnZXQuZmFkZU91dCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5tZWV0aW5nLmZvcmNlU3RvcCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUudXBkYXRlQnlSb2xlID0gZnVuY3Rpb24gKGlzSG9zdCkge1xyXG4gICAgICAgIHZhciBpc1dlYmluYXIgPSB0aGlzLm1lZXRpbmcucm9vbUluZm8uSXNXZWJpbmFyO1xyXG4gICAgICAgIC8qaWYgKGlzV2ViaW5hciAmJiAhaXNIb3N0KVxyXG4gICAgICAgICAgICB0aGlzLnNob3dQYXJ0aWNpcGFudExpc3RCdXR0b24oZmFsc2UpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5zaG93UGFydGljaXBhbnRMaXN0QnV0dG9uKHRydWUpOyovXHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnVwZGF0ZUJ5Um9sZShpc0hvc3QgJiYgdGhpcy5tZWV0aW5nLnJvb21JbmZvLklzQ29udHJvbEFsbG93ZWQpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUudXBkYXRlSm9pbmluZ0luZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnVwZGF0ZUpvaW5pbmdJbmZvKFwiaHR0cHM6Ly9cIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0ICsgXCIvbG9iYnkvXCIgKyB0aGlzLm1lZXRpbmcucm9vbUluZm8uSWQpO1xyXG4gICAgfTtcclxuICAgIC8vY2hhdHR0aW5nXHJcbiAgICBNZWV0aW5nVUkucHJvdG90eXBlLm9wZW5DaGF0dGluZyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hhdHRpbmdXaWRnZXQpXHJcbiAgICAgICAgICAgIHRoaXMuY2hhdHRpbmdXaWRnZXQub3BlbihvKTtcclxuICAgIH07XHJcbiAgICBNZWV0aW5nVUkucHJvdG90eXBlLnJlZHJhd0dyaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlkZW9QYW5lbEdyaWQpXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9QYW5lbEdyaWQucmVkcmF3R3JpZCgpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUuc2hvd1NldHRpbmdEaWFsb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNldHRpbmdEaWFsb2cgPSBuZXcgU2V0dGluZ0RpYWxvZ18xLlNldHRpbmdEaWFsb2coKTtcclxuICAgICAgICB2YXIgcHJvcHMgPSBuZXcgU2V0dGluZ0RpYWxvZ18xLlNldHRpbmdEaWFsb2dQcm9wcygpO1xyXG4gICAgICAgIHByb3BzLmN1ckRldmljZXMgPSB0aGlzLm1lZXRpbmcuZ2V0QWN0aXZlRGV2aWNlcygpO1xyXG4gICAgICAgIHByb3BzLm9uRGV2aWNlQ2hhbmdlID0gdGhpcy5tZWV0aW5nLm9uRGV2aWNlQ2hhbmdlLmJpbmQodGhpcy5tZWV0aW5nKTtcclxuICAgICAgICBzZXR0aW5nRGlhbG9nLmluaXQocHJvcHMpO1xyXG4gICAgICAgIHNldHRpbmdEaWFsb2cuc2hvdygpO1xyXG4gICAgfTtcclxuICAgIC8vYWRkLCByZW1vdmUgcGFydGljaXBhbnQgdG8gYW5kIGZyb20gbGlzdFxyXG4gICAgTWVldGluZ1VJLnByb3RvdHlwZS5hZGRQYXJ0aWNpcGFudCA9IGZ1bmN0aW9uIChqaXRzaUlkLCBuYW1lLCBtZSwgbXV0ZUNhbWVyYSwgbXV0ZU1pYykge1xyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzTGlzdFdpZGdldC5hZGRQYXJ0aWNpcGFudChqaXRzaUlkLCBuYW1lLCBtZSwgbXV0ZUNhbWVyYSwgbXV0ZU1pYyk7XHJcbiAgICB9O1xyXG4gICAgTWVldGluZ1VJLnByb3RvdHlwZS5yZW1vdmVQYXJ0aWNpcGFudCA9IGZ1bmN0aW9uIChqaXRzaUlkKSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudHNMaXN0V2lkZ2V0LnJlbW92ZVBhcnRpY2lwYW50KGppdHNpSWQpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUuc2hvd1BhcnRpY2lwYW50TGlzdEJ1dHRvbiA9IGZ1bmN0aW9uIChzaG93KSB7XHJcbiAgICAgICAgJChcIiNvcGVuLXBhcnRpY2lwYW50cy10b2dnbGVcIikuY3NzKFwidmlzaWJpbGl0eVwiLCBzaG93ID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiKTtcclxuICAgIH07XHJcbiAgICAvL2ZpbGUgc2VuZFxyXG4gICAgTWVldGluZ1VJLnByb3RvdHlwZS5vbkZpbGVTZW5kRXJyb3IgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbl93YXJuaW5nKGZpbGVuYW1lLCBtZXNzYWdlLCBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5GaWxlVHJhbnNmZXIpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUub25GaWxlU2VuZEZpbmlzaGVkID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb24oZmlsZW5hbWUsIG1lc3NhZ2UsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLkZpbGVUcmFuc2Zlcik7XHJcbiAgICB9O1xyXG4gICAgLy9maWxlIHJlY2VpdmVcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUub25GaWxlUmVjZWl2ZUVycm9yID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25fd2FybmluZyhmaWxlbmFtZSwgbWVzc2FnZSwgTm90aWZpY2F0aW9uVHlwZV8xLk5vdGlmaWNhdGlvblR5cGUuRmlsZVJlY2VpdmUpO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUub25GaWxlUmVjZWl2ZUZpbmlzaGVkID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb24oZmlsZW5hbWUsIG1lc3NhZ2UsIE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLkZpbGVSZWNlaXZlKTtcclxuICAgIH07XHJcbiAgICBNZWV0aW5nVUkucHJvdG90eXBlLkxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICgkKFwiI2xvZ1BhbmVsXCIpLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2dQYW5lbCA9IFwiPGRpdiBpZD1cXFwibG9nUGFuZWxcXFwiIHN0eWxlPVxcXCJwb3NpdGlvbjogZml4ZWQ7d2lkdGg6IDMwMHB4O2hlaWdodDogMTAwcHg7YmFja2dyb3VuZDogYmxhY2s7dG9wOjBweDtsZWZ0OiAwcHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAxMDAwMDA7Ym9yZGVyLXJpZ2h0OiAxcHggZGFzaGVkIHJlYmVjY2FwdXJwbGU7Ym9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCByZWJlY2NhcHVycGxlO292ZXJmbG93LXk6YXV0bztcXFwiPjwvZGl2PlwiO1xyXG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hcHBlbmQobG9nUGFuZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29sb3JzID0gWydibGFuY2hlZGFsbW9uZCcsICdob3RwaW5rJywgJ2NoYXJ0cmV1c2UnLCAnY29yYWwnLCAnZ29sZCcsICdncmVlbnllbGxvdycsICd2aW9sZXQnLCAnd2hlYXQnXTtcclxuICAgICAgICB2YXIgY29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSAlIGNvbG9ycy5sZW5ndGhdO1xyXG4gICAgICAgIHZhciBtZXNzYWdlSXRtID0gXCI8ZGl2IHN0eWxlPVxcXCJjb2xvcjpcIiArIGNvbG9yICsgXCI7XFxcIj48c3Bhbj5cIiArIG1lc3NhZ2UgKyBcIjwvc3Bhbj48L2Rpdj5cIjtcclxuICAgICAgICAkKFwiI2xvZ1BhbmVsXCIpLmFwcGVuZChtZXNzYWdlSXRtKTtcclxuICAgICAgICAkKCcjbG9nUGFuZWwnKS5zY3JvbGwoKTtcclxuICAgICAgICAkKFwiI2xvZ1BhbmVsXCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IDIwMDAwXHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH07XHJcbiAgICBNZWV0aW5nVUkucHJvdG90eXBlLmFza0RpYWxvZyA9IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgaWNvbiwgYWxsb3dDYWxsYmFjaywgZGVueUNhbGxiYWNrLCBwYXJhbSkge1xyXG4gICAgICAgIHZhciBwcm9wcyA9IG5ldyBBc2tEaWFsb2dfMS5Bc2tEaWFsb2dQcm9wcygpO1xyXG4gICAgICAgIHByb3BzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgcHJvcHMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgcHJvcHMuaWNvbiA9IGljb247XHJcbiAgICAgICAgcHJvcHMuaXNXYXJuaW5nID0gdHJ1ZTtcclxuICAgICAgICBwcm9wcy5hbGxvd0NhbGxiYWNrID0gYWxsb3dDYWxsYmFjaztcclxuICAgICAgICBwcm9wcy5kZW55Q2FsbGJhY2sgPSBkZW55Q2FsbGJhY2s7XHJcbiAgICAgICAgcHJvcHMucGFyYW0gPSBwYXJhbTtcclxuICAgICAgICB2YXIgZGxnID0gbmV3IEFza0RpYWxvZ18xLkFza0RpYWxvZyhwcm9wcyk7XHJcbiAgICAgICAgZGxnLnNob3coKTtcclxuICAgIH07XHJcbiAgICBNZWV0aW5nVUkucHJvdG90eXBlLm5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgaWNvbikge1xyXG4gICAgICAgIGlmICghaWNvbilcclxuICAgICAgICAgICAgaWNvbiA9IE5vdGlmaWNhdGlvblR5cGVfMS5Ob3RpZmljYXRpb25UeXBlLkluZm87XHJcbiAgICAgICAgJC50b2FzdCh7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6IHRpdGxlLFxyXG4gICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLFxyXG4gICAgICAgICAgICBzaG93SGlkZVRyYW5zaXRpb246ICdzbGlkZScsXHJcbiAgICAgICAgICAgIGhpZGVBZnRlcjogNzAwMCxcclxuICAgICAgICAgICAgYmdDb2xvcjogXCIjMTY0MTU3XCIsXHJcbiAgICAgICAgICAgIGljb246IGljb24sXHJcbiAgICAgICAgICAgIHN0YWNrOiA1LFxyXG4gICAgICAgICAgICBsb2FkZXI6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE1lZXRpbmdVSS5wcm90b3R5cGUubm90aWZpY2F0aW9uX3dhcm5pbmcgPSBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UsIGljb24pIHtcclxuICAgICAgICBpZiAoIWljb24pXHJcbiAgICAgICAgICAgIGljb24gPSBOb3RpZmljYXRpb25UeXBlXzEuTm90aWZpY2F0aW9uVHlwZS5XYXJuaW5nO1xyXG4gICAgICAgICQudG9hc3Qoe1xyXG4gICAgICAgICAgICBoZWFkaW5nOiB0aXRsZSxcclxuICAgICAgICAgICAgdGV4dDogbWVzc2FnZSxcclxuICAgICAgICAgICAgc2hvd0hpZGVUcmFuc2l0aW9uOiAnc2xpZGUnLFxyXG4gICAgICAgICAgICBoaWRlQWZ0ZXI6IDcwMDAsXHJcbiAgICAgICAgICAgIGJnQ29sb3I6IFwiIzgwMDAwMFwiLFxyXG4gICAgICAgICAgICBpY29uOiBpY29uLFxyXG4gICAgICAgICAgICBzdGFjazogNSxcclxuICAgICAgICAgICAgbG9hZGVyOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNZWV0aW5nVUk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTWVldGluZ1VJID0gTWVldGluZ1VJO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZWV0aW5nX3VpLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9tZWV0aW5nX3VpLmpzXCIsXCIvXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5BY3RpdmVEZXZpY2VzID0gdm9pZCAwO1xyXG52YXIgQWN0aXZlRGV2aWNlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFjdGl2ZURldmljZXMoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQWN0aXZlRGV2aWNlcztcclxufSgpKTtcclxuZXhwb3J0cy5BY3RpdmVEZXZpY2VzID0gQWN0aXZlRGV2aWNlcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aXZlRGV2aWNlcy5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvbW9kZWxcXFxcQWN0aXZlRGV2aWNlcy5qc1wiLFwiL21vZGVsXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5CR01lZXRpbmdJbmZvID0gZXhwb3J0cy5CR01lZXRpbmcgPSBleHBvcnRzLkJHTWVldGluZ1BhcnRpY2lwYW50ID0gdm9pZCAwO1xyXG4vKlxyXG5jYWxsYmFja1VybDogXCJodHRwOi8vXCJcclxuY29uZmVyZW5jZUlkOiAxMjM0XHJcbmNvbmZlcmVuY2VOYW1lOiBcIkJ1aWxkaW5nIEEgQml0Y29pbiBDcnlwdG8gYXBwbGljYXRpb24gXCJcclxuaXNDb250cm9sQWxsb3dlZDogdHJ1ZSB8IGZhbHNlICAgICAgICAgICAgICAvLyBIb3N0IGNhbiBjb250cm9sIEF1ZGlvIGFuZCBWaWRlbyBvZiBQYXJ0aWNpcGFudHNcclxuaXNSZWNvcmRpbmdSZXF1aXJlZDogdHJ1ZSB8IGZhbHNlICAgICAgICAgICAvLyBBcHByb3ZhbCByZXF1aXJlZCBmb3IgcmVjb3JkaW5nIHRoZSBtZWV0aW5nXHJcbmlzTXVsdGlwbGVTaGFyaW5nQWxsb3dlZDogdHJ1ZSB8IGZhbHNlICAgICAgLy8gQWxsb3cgbXVsdGlwbGUgcGFydGljaXBhbnRzIHRvIHNjcmVlbiBzaGFyZVxyXG5pc1NjcmVlblNoYXJlUmVxdWlyZWQ6IHRydWUgfCBmYWxzZSAgICAgICAgIC8vIEFwcHJvdmFsIHJlcXVpcmVkIHRvIHByZXNlbnQvc2hhcmUgdGhlIHNjcmVlblxyXG5pc09wZW5lZDogdHJ1ZSB8IGZhbHNlICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IGV4dGVybmFsIHVzZXJzIHRvIGpvaW4gbWVldGluZyB1c2luZyBsaW5rXHJcbmNoYW5uZWxUeXBlIDogOiBcIkJvdGggfCAgQXVkaW9Pbmx5IHwgVmlkZW9Pbmx5XCJcclxuZGVzY3JpcHRpb246IFwiYyMgYXBwbGljYXRpb24gdGhhdCB3b3JrcyBvbiBkb3RuZXQgZnJhbWV3b3JrLCBhbmQgYm91bmN5IGNhc3RsZSBjcnlwdG8gbGlicmFyaWVzXCJcclxuZHVyYXRpb246IFwiMjAyMS0wNS0xOFQwOToxOTo1Ny42NTRaXCJcclxuZW5kRGF0ZVRpbWU6IFwiMjAyMS0wNS0xOFQwOToxOTo1Ny42NTRaXCJcclxucGFydGljaXBhbnRzOiAoMikgW3vigKZ9LCB74oCmfV1cclxucmVmR3VpZDogXCIzMDI1MTAwM1wiXHJcbnN0YXJ0RGF0ZVRpbWU6IFwiMjAyMS0wNS0xOFQwOToxOTo1Ny42NTRaXCJcclxuKi9cclxuLy9zcmMvRGJNb2RlbHMvUGFydGljaXBhbnRzLmNzXHJcbnZhciBCR01lZXRpbmdQYXJ0aWNpcGFudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJHTWVldGluZ1BhcnRpY2lwYW50KCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEJHTWVldGluZ1BhcnRpY2lwYW50O1xyXG59KCkpO1xyXG5leHBvcnRzLkJHTWVldGluZ1BhcnRpY2lwYW50ID0gQkdNZWV0aW5nUGFydGljaXBhbnQ7XHJcbi8vc3JjL0RiTW9kZWxzL01lZXRpbmcuY3NcclxuLy9jb21lcyBmcm9tIGFwaVxyXG52YXIgQkdNZWV0aW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQkdNZWV0aW5nKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEJHTWVldGluZztcclxufSgpKTtcclxuZXhwb3J0cy5CR01lZXRpbmcgPSBCR01lZXRpbmc7XHJcbi8vc3JjL01vZGVsL0xpdmVNZWV0aW5nLmNzL01lZXRpbmdJbmZvXHJcbi8vY29tZXMgZnJvbSBCR01lZXRpbmcgU2lnbmFsUiBTZXJ2ZXJcclxudmFyIEJHTWVldGluZ0luZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCR01lZXRpbmdJbmZvKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEJHTWVldGluZ0luZm87XHJcbn0oKSk7XHJcbmV4cG9ydHMuQkdNZWV0aW5nSW5mbyA9IEJHTWVldGluZ0luZm87XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJHTWVldGluZy5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvbW9kZWxcXFxcQkdNZWV0aW5nLmpzXCIsXCIvbW9kZWxcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5cInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlVzZXJJbmZvID0gdm9pZCAwO1xyXG52YXIgVXNlckluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBVc2VySW5mbygpIHtcclxuICAgICAgICB0aGlzLklkID0gXCJcIjsgLy9jb25uZWN0aW9uSWRcclxuICAgICAgICAvL0JHX0lkOiBzdHJpbmc7XHJcbiAgICAgICAgdGhpcy5KaXRzaV9JZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLklzSG9zdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuSXNBbm9ueW1vdXMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm1lZGlhUG9saWN5ID0geyB1c2VDYW1lcmE6IGZhbHNlLCB1c2VNaWM6IGZhbHNlIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVXNlckluZm87XHJcbn0oKSk7XHJcbmV4cG9ydHMuVXNlckluZm8gPSBVc2VySW5mbztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QkdVc2VyLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9tb2RlbFxcXFxCR1VzZXIuanNcIixcIi9tb2RlbFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSW5wdXRNZWRpYVBvbGljeSA9IHZvaWQgMDtcclxudmFyIElucHV0TWVkaWFQb2xpY3kgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbnB1dE1lZGlhUG9saWN5KCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIElucHV0TWVkaWFQb2xpY3k7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSW5wdXRNZWRpYVBvbGljeSA9IElucHV0TWVkaWFQb2xpY3k7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlucHV0RGV2aWNlUG9saWN5LmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9tb2RlbFxcXFxJbnB1dERldmljZVBvbGljeS5qc1wiLFwiL21vZGVsXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Vc2VyVG9Vc2VyVmlhQkcgPSBleHBvcnRzLlVzZXJUb0JHID0gZXhwb3J0cy5CR3RvVXNlciA9IHZvaWQgMDtcclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqXHJcbiAqICAgICAgICAgICAgICBzaG91bGQgbWF0Y2ggd2l0aCAvc3JjL1NlcnZlci9Qcm90b2NvbC9CR3RvVXNlclxyXG4gKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxudmFyIEJHdG9Vc2VyO1xyXG4oZnVuY3Rpb24gKEJHdG9Vc2VyKSB7XHJcbiAgICBCR3RvVXNlcltcIlJPT01fQ1JFQVRFRFwiXSA9IFwiY3JlYXRlZFwiO1xyXG4gICAgQkd0b1VzZXJbXCJST09NX0lORk9cIl0gPSBcInJvb21faW5mb1wiO1xyXG4gICAgQkd0b1VzZXJbXCJST09NX0pPSU5FRFwiXSA9IFwiam9pbmVkXCI7XHJcbiAgICBCR3RvVXNlcltcIlJPT01fVVNFUl9KT0lORURcIl0gPSBcInVzZXJfam9pbmVkXCI7XHJcbiAgICBCR3RvVXNlcltcIlJPT01fTEVGVFwiXSA9IFwibGVmdFwiO1xyXG4gICAgQkd0b1VzZXJbXCJFUlJPUlwiXSA9IFwiZXJyb3JcIjtcclxuICAgIEJHdG9Vc2VyW1wiU0lHTkFMSU5HXCJdID0gXCJTaWduYWxpbmdNZXNzYWdlXCI7XHJcbn0pKEJHdG9Vc2VyID0gZXhwb3J0cy5CR3RvVXNlciB8fCAoZXhwb3J0cy5CR3RvVXNlciA9IHt9KSk7XHJcbjtcclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqXHJcbiAqICAgICAgICAgICAgICBzaG91bGQgbWF0Y2ggd2l0aCAvc3JjL1NlcnZlci9Qcm90b2NvbC9Vc2VyVG9CR1xyXG4gKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxudmFyIFVzZXJUb0JHO1xyXG4oZnVuY3Rpb24gKFVzZXJUb0JHKSB7XHJcbn0pKFVzZXJUb0JHID0gZXhwb3J0cy5Vc2VyVG9CRyB8fCAoZXhwb3J0cy5Vc2VyVG9CRyA9IHt9KSk7XHJcbnZhciBVc2VyVG9Vc2VyVmlhQkc7XHJcbihmdW5jdGlvbiAoVXNlclRvVXNlclZpYUJHKSB7XHJcbn0pKFVzZXJUb1VzZXJWaWFCRyA9IGV4cG9ydHMuVXNlclRvVXNlclZpYUJHIHx8IChleHBvcnRzLlVzZXJUb1VzZXJWaWFCRyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJnLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9wcm90b2NvbFxcXFxiZy5qc1wiLFwiL3Byb3RvY29sXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIFNIT1VMRCBub3QgZXhpc3Qgc2FtZSB2YWx1ZSBpbiB0d28gZW51bXNcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5KaXRzaVByaXZhdGVDb21tYW5kID0gZXhwb3J0cy5KaXRzaUNvbW1hbmQgPSB2b2lkIDA7XHJcbnZhciBKaXRzaUNvbW1hbmQ7XHJcbihmdW5jdGlvbiAoSml0c2lDb21tYW5kKSB7XHJcbiAgICBKaXRzaUNvbW1hbmRbXCJHUkFOVF9IT1NUX1JPTEVcIl0gPSBcImdyYW50LWhvc3RcIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIk1VVEVfQVVESU9cIl0gPSBcIm11dGVfYXVkaW9cIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIk1VVEVfVklERU9cIl0gPSBcIm11dGVfdmlkZW9cIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIkFMTE9XX0NBTUVSQVwiXSA9IFwiYWxsb3dfdmlkZW9cIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIkFMTE9XX01JQ1wiXSA9IFwiYWxsb3dfYXVkaW9cIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIklOSVRfTUVESUFfUE9MSUNZXCJdID0gXCJpbml0X21lZGlhX3BvbGljeVwiO1xyXG4gICAgSml0c2lDb21tYW5kW1wiQVNLX1JFQ09SRElOR1wiXSA9IFwiYXNrLXJlY29yZGluZ1wiO1xyXG4gICAgSml0c2lDb21tYW5kW1wiQVNLX1NDUkVFTlNIQVJFXCJdID0gXCJhc2stc2NyZWVuc2hhcmVcIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIkFTS19IQU5EUkFJU0VcIl0gPSBcImFzay1oYW5kcmFpc2VcIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIkZJTEVfTUVUQVwiXSA9IFwiZmlsZV9tZXRhXCI7XHJcbiAgICBKaXRzaUNvbW1hbmRbXCJGSUxFX1NMSUNFXCJdID0gXCJmaWxlX3NsaWNlXCI7XHJcbiAgICBKaXRzaUNvbW1hbmRbXCJCSVpfSURcIl0gPSBcImJpel9pZFwiO1xyXG4gICAgSml0c2lDb21tYW5kW1wiS0lDS19PVVRcIl0gPSBcImtpY2tfb3V0XCI7XHJcbiAgICBKaXRzaUNvbW1hbmRbXCJNVVRFX0FsbF9BVURJT1wiXSA9IFwibXV0ZV9hbGxfYXVkaW9cIjtcclxuICAgIEppdHNpQ29tbWFuZFtcIk1VVEVfQWxsX1ZJREVPXCJdID0gXCJtdXRlX2FsbF92aWRlb1wiO1xyXG59KShKaXRzaUNvbW1hbmQgPSBleHBvcnRzLkppdHNpQ29tbWFuZCB8fCAoZXhwb3J0cy5KaXRzaUNvbW1hbmQgPSB7fSkpO1xyXG47XHJcbnZhciBKaXRzaVByaXZhdGVDb21tYW5kO1xyXG4oZnVuY3Rpb24gKEppdHNpUHJpdmF0ZUNvbW1hbmQpIHtcclxuICAgIEppdHNpUHJpdmF0ZUNvbW1hbmRbXCJNRURJQV9QT0xJQ1lcIl0gPSBcIm1lZGlhX3BvbGljeVwiO1xyXG4gICAgSml0c2lQcml2YXRlQ29tbWFuZFtcIkFMTE9XX1JFQ09SRElOR1wiXSA9IFwiYWxsb3dfcmVjb3JkaW5nXCI7XHJcbiAgICBKaXRzaVByaXZhdGVDb21tYW5kW1wiQUxMT1dfU0NSRUVOU0hBUkVcIl0gPSBcImFsbG93X3NjcmVlbnNoYXJlXCI7XHJcbiAgICBKaXRzaVByaXZhdGVDb21tYW5kW1wiQUxMT1dfSEFORFJBSVNFXCJdID0gXCJhbGxvd19oYW5kcmFpc2VcIjtcclxuICAgIEppdHNpUHJpdmF0ZUNvbW1hbmRbXCJQUklWQVRFX0NBSFRcIl0gPSBcInByaXZhdGVfY2hhdFwiO1xyXG59KShKaXRzaVByaXZhdGVDb21tYW5kID0gZXhwb3J0cy5KaXRzaVByaXZhdGVDb21tYW5kIHx8IChleHBvcnRzLkppdHNpUHJpdmF0ZUNvbW1hbmQgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1qaXRzaS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvcHJvdG9jb2xcXFxcaml0c2kuanNcIixcIi9wcm90b2NvbFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0Q3VycmVudFRpbWVzdGFtcCA9IGV4cG9ydHMuZ2V0Q3VyVGltZSA9IGV4cG9ydHMuVHNUb0RhdGVGb3JtYXQgPSB2b2lkIDA7XHJcbmZ1bmN0aW9uIFRzVG9EYXRlRm9ybWF0KHRzSW5NaWxsaXNlY29uZCkge1xyXG4gICAgdmFyIHNlYyA9IE1hdGguZmxvb3IodHNJbk1pbGxpc2Vjb25kIC8gMTAwMCk7XHJcbiAgICAvLyBIb3VycyBwYXJ0IGZyb20gdGhlIHRpbWVzdGFtcFxyXG4gICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihzZWMgLyAzNjAwKTtcclxuICAgIC8vIE1pbnV0ZXMgcGFydCBmcm9tIHRoZSB0aW1lc3RhbXBcclxuICAgIHZhciBtaW51dGVzID0gXCIwXCIgKyAoTWF0aC5mbG9vcihzZWMgLyA2MCkgLSAoaG91cnMgKiA2MCkpO1xyXG4gICAgLy8gU2Vjb25kcyBwYXJ0IGZyb20gdGhlIHRpbWVzdGFtcFxyXG4gICAgdmFyIHNlY29uZHMgPSBcIjBcIiArIChzZWMgJSA2MCk7XHJcbiAgICAvLyBXaWxsIGRpc3BsYXkgdGltZSBpbiAxMDozMDoyMyBmb3JtYXRcclxuICAgIHZhciBmb3JtYXR0ZWRUaW1lID0gKFwiMFwiICsgaG91cnMpLnN1YnN0cigtMikgKyAnOicgKyBtaW51dGVzLnN1YnN0cigtMikgKyAnOicgKyBzZWNvbmRzLnN1YnN0cigtMik7XHJcbiAgICByZXR1cm4gZm9ybWF0dGVkVGltZTtcclxufVxyXG5leHBvcnRzLlRzVG9EYXRlRm9ybWF0ID0gVHNUb0RhdGVGb3JtYXQ7XHJcbmZ1bmN0aW9uIGdldEN1clRpbWUoKSB7XHJcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICB2YXIgaCA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgIHZhciBtID0gZGF0ZS5nZXRNaW51dGVzKCk7XHJcbiAgICB2YXIgbV8yID0gKFwiMFwiICsgbSkuc2xpY2UoLTIpO1xyXG4gICAgdmFyIGhfMiA9IChcIjBcIiArIGgpLnNsaWNlKC0yKTtcclxuICAgIHZhciB0aW1lID0gaF8yICsgXCI6XCIgKyBtXzI7XHJcbiAgICByZXR1cm4gdGltZTtcclxufVxyXG5leHBvcnRzLmdldEN1clRpbWUgPSBnZXRDdXJUaW1lO1xyXG5mdW5jdGlvbiBnZXRDdXJyZW50VGltZXN0YW1wKCkge1xyXG4gICAgdmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgIHZhciB0aW1lc3RhbXAgPSBjdXJyZW50RGF0ZS5nZXRUaW1lKCk7XHJcbiAgICByZXR1cm4gdGltZXN0YW1wO1xyXG59XHJcbmV4cG9ydHMuZ2V0Q3VycmVudFRpbWVzdGFtcCA9IGdldEN1cnJlbnRUaW1lc3RhbXA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpbWVVdGlsLmpzLm1hcFxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi91dGlsXFxcXFRpbWVVdGlsLmpzXCIsXCIvdXRpbFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmFuZG9tU2Vzc29uSWQgPSBleHBvcnRzLnJhbmRvbU51bWJlciA9IHZvaWQgMDtcclxudmFyIFRpbWVVdGlsXzEgPSByZXF1aXJlKFwiLi9UaW1lVXRpbFwiKTtcclxuZnVuY3Rpb24gcmFuZG9tTnVtYmVyKCkge1xyXG4gICAgcmV0dXJuIHJhbmRvbUZyb21JbnRlcnZhbCgxLCAxMDAwMDAwMDApO1xyXG59XHJcbmV4cG9ydHMucmFuZG9tTnVtYmVyID0gcmFuZG9tTnVtYmVyO1xyXG5mdW5jdGlvbiByYW5kb21TZXNzb25JZCgpIHtcclxuICAgIHJldHVybiBUaW1lVXRpbF8xLmdldEN1cnJlbnRUaW1lc3RhbXAoKSArIFwiLVwiICsgcmFuZG9tTnVtYmVyKCk7XHJcbn1cclxuZXhwb3J0cy5yYW5kb21TZXNzb25JZCA9IHJhbmRvbVNlc3NvbklkO1xyXG5mdW5jdGlvbiByYW5kb21Gcm9tSW50ZXJ2YWwoZnJvbSwgdG8pIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodG8gLSBmcm9tICsgMSkgKyBmcm9tKTtcclxufVxyXG4vKmludGVyZmFjZSBQcm92aWRlRmVlZGJhY2tGb3JtUHJvcHMge1xyXG4gICAgZmVlZGJhY2tOYXR1cmU6IEZvcm1pa0Ryb3Bkb3duUHJvcHNcclxuICAgIHdheWJpbGxOdW1iZXI6IEZvcm1pa0Ryb3Bkb3duUHJvcHNcclxuICAgIHByb3ZpZGVGZWVkYmFjazogRm9ybWlrRHJvcGRvd25Qcm9wc1xyXG4gICAgZWRpdG9yU3RhdGU/OiBzdHJpbmdcclxuICAgIGF0dGFjaG1lbnRzPzogc3RyaW5nW11cclxufVxyXG5cclxuXHJcbmludGVyZmFjZSBGb3JtaWtEcm9wZG93blByb3BzIHtcclxuICAgIGlkOiBudW1iZXJcclxuICAgIHZhbHVlOiBzdHJpbmdcclxufVxyXG5cclxuY29uc3QgdmFsdWVzOiBQcm92aWRlRmVlZGJhY2tGb3JtUHJvcHMgPSB7fTtcclxuY29uc3QgY3VzdG9tRmllbGRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuZm9yIChjb25zdCBwcm9wZXJ0eSBpbiB2YWx1ZXMpIHtcclxuICAgIGNvbnN0IGN1c3RvbUZpZWxkID0gdmFsdWVzW3Byb3BlcnR5IGFzIGtleW9mIFByb3ZpZGVGZWVkYmFja0Zvcm1Qcm9wc11cclxuICAgIGN1c3RvbUZpZWxkcy5wdXNoKGN1c3RvbUZpZWxkKVxyXG59Ki8gXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvdXRpbFxcXFxyYW5kb20uanNcIixcIi91dGlsXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRDYXBhY2l0eUxhYmVsID0gZXhwb3J0cy5yYW5kb20gPSBleHBvcnRzLmF2YXRhck5hbWUgPSBleHBvcnRzLnN0cmlwSFRNTFRhZ3MgPSB2b2lkIDA7XHJcbmZ1bmN0aW9uIHN0cmlwSFRNTFRhZ3ModGV4dCkge1xyXG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvKDwoW14+XSspPikvZ2ksIFwiXCIpO1xyXG59XHJcbmV4cG9ydHMuc3RyaXBIVE1MVGFncyA9IHN0cmlwSFRNTFRhZ3M7XHJcbi8qXHJcbiBhamF4IGV4YW1wbGVcclxuICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiBcImh0dHA6Ly9sb2NhbGhvc3QvbXlwcm9qZWN0L2FqYXhfdXJsXCIsXHJcbiAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgZGF0YTogJChcIiNteS1mb3JtXCIpLnNlcmlhbGl6ZSgpLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsIC8vIGxvd2VyY2FzZSBpcyBhbHdheXMgcHJlZmVyZXJlZCB0aG91Z2ggalF1ZXJ5IGRvZXMgaXQsIHRvby5cclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpe31cclxufSk7XHJcbiBcclxuIFxyXG4gKi9cclxuZnVuY3Rpb24gYXZhdGFyTmFtZShuYW1lKSB7XHJcbiAgICB2YXIgdW5rbm93biA9IFwiP1wiO1xyXG4gICAgaWYgKCFuYW1lIHx8IG5hbWUubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgcmV0dXJuIHVua25vd247XHJcbiAgICB2YXIgbmFtZVBhcnRzID0gbmFtZS5zcGxpdChcIiBcIik7XHJcbiAgICB2YXIgcmVzID0gXCJcIjtcclxuICAgIG5hbWVQYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XHJcbiAgICAgICAgaWYgKHAubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgcmVzICs9IHBbMF07XHJcbiAgICB9KTtcclxuICAgIGlmIChyZXMubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgdW5rbm93bjtcclxuICAgIHJldHVybiByZXMudG9VcHBlckNhc2UoKS5zdWJzdHIoMCwgMik7XHJcbn1cclxuZXhwb3J0cy5hdmF0YXJOYW1lID0gYXZhdGFyTmFtZTtcclxudmFyIHJhbmRvbSA9IGZ1bmN0aW9uIChtaW4sIG1heCkgeyByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluOyB9O1xyXG5leHBvcnRzLnJhbmRvbSA9IHJhbmRvbTtcclxuZnVuY3Rpb24gZ2V0Q2FwYWNpdHlMYWJlbChieXRlcykge1xyXG4gICAgaWYgKGJ5dGVzIDwgMTAyNClcclxuICAgICAgICByZXR1cm4gYnl0ZXMgKyBcIiBieXRlc1wiO1xyXG4gICAgZWxzZSBpZiAoYnl0ZXMgPCAxMDI0ICogMTAyNCkge1xyXG4gICAgICAgIHZhciBrYiA9IGJ5dGVzIC8gMTAyNDtcclxuICAgICAgICByZXR1cm4ga2IudG9GaXhlZCgyKSArIFwiIEtCXCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgbWIgPSBieXRlcyAvICgxMDI0ICogMTAyNCk7XHJcbiAgICAgICAgcmV0dXJuIG1iLnRvRml4ZWQoMikgKyBcIiBNQlwiO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0Q2FwYWNpdHlMYWJlbCA9IGdldENhcGFjaXR5TGFiZWw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNuaXBwZXQuanMubWFwXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiL3V0aWxcXFxcc25pcHBldC5qc1wiLFwiL3V0aWxcIikiXX0=
